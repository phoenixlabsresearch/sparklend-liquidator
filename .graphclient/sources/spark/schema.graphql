schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  """ { Account address } """
  id: ID!
  """ Number of positions this account has """
  positionCount: Int!
  """ All positions that belong to this account """
  positions(skip: Int = 0, first: Int = 100, orderBy: Position_orderBy, orderDirection: OrderDirection, where: Position_filter): [Position!]!
  """ Number of open positions this account has """
  openPositionCount: Int!
  """ Number of closed positions this account has """
  closedPositionCount: Int!
  """ Number of deposits this account made """
  depositCount: Int!
  """ All deposit events of this account """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  """ Number of withdrawals this account made """
  withdrawCount: Int!
  """ All withdraw events of this account """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  """ Number of borrows this account made """
  borrowCount: Int!
  """ All borrow events of this account """
  borrows(skip: Int = 0, first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, where: Borrow_filter): [Borrow!]!
  """ Number of repays this account made """
  repayCount: Int!
  """ All repay events of this account """
  repays(skip: Int = 0, first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, where: Repay_filter): [Repay!]!
  """ Number of times this account liquidated a position """
  liquidateCount: Int!
  """ All liquidation events where this account was the liquidator """
  liquidates(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
  """ Number of times this account has been liquidated """
  liquidationCount: Int!
  """ All liquidation events where this account got liquidated """
  liquidations(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
  """ Markets that the account is using as collateral """
  _enabledCollaterals(skip: Int = 0, first: Int = 100, orderBy: Market_orderBy, orderDirection: OrderDirection, where: Market_filter): [Market!]!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  positions_: Position_filter
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Withdraw_filter
  borrowCount: Int
  borrowCount_not: Int
  borrowCount_gt: Int
  borrowCount_lt: Int
  borrowCount_gte: Int
  borrowCount_lte: Int
  borrowCount_in: [Int!]
  borrowCount_not_in: [Int!]
  borrows_: Borrow_filter
  repayCount: Int
  repayCount_not: Int
  repayCount_gt: Int
  repayCount_lt: Int
  repayCount_gte: Int
  repayCount_lte: Int
  repayCount_in: [Int!]
  repayCount_not_in: [Int!]
  repays_: Repay_filter
  liquidateCount: Int
  liquidateCount_not: Int
  liquidateCount_gt: Int
  liquidateCount_lt: Int
  liquidateCount_gte: Int
  liquidateCount_lte: Int
  liquidateCount_in: [Int!]
  liquidateCount_not_in: [Int!]
  liquidates_: Liquidate_filter
  liquidationCount: Int
  liquidationCount_not: Int
  liquidationCount_gt: Int
  liquidationCount_lt: Int
  liquidationCount_gte: Int
  liquidationCount_lte: Int
  liquidationCount_in: [Int!]
  liquidationCount_not_in: [Int!]
  liquidations_: Liquidate_filter
  _enabledCollaterals: [String!]
  _enabledCollaterals_not: [String!]
  _enabledCollaterals_contains: [String!]
  _enabledCollaterals_contains_nocase: [String!]
  _enabledCollaterals_not_contains: [String!]
  _enabledCollaterals_not_contains_nocase: [String!]
  _enabledCollaterals_: Market_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
  positionCount
  positions
  openPositionCount
  closedPositionCount
  depositCount
  deposits
  withdrawCount
  withdraws
  borrowCount
  borrows
  repayCount
  repays
  liquidateCount
  liquidates
  liquidationCount
  liquidations
  _enabledCollaterals
}

type ActiveAccount {
  """ { daily/hourly }-{ Address of the account }-{ Days/hours since Unix epoch } 
  """
  id: ID!
}

input ActiveAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ActiveAccount_filter]
  or: [ActiveAccount_filter]
}

enum ActiveAccount_orderBy {
  id
}

type ActorAccount {
  """ { Actor type (Depositor / Borrower / Liquidator / Liquidatee) }-{ Account address } 
  """
  id: ID!
}

input ActorAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ActorAccount_filter]
  or: [ActorAccount_filter]
}

enum ActorAccount_orderBy {
  id
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Borrow {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Account that borrowed/minted tokens """
  account: Account!
  """ The market tokens are borrowed/minted from """
  market: Market!
  """ The user position changed by this event """
  position: Position!
  """ Token borrowed """
  asset: Token!
  """ Amount of token borrowed in native units """
  amount: BigInt!
  """ Amount of token borrowed in USD """
  amountUSD: BigDecimal!
}

input Borrow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Borrow_filter]
  or: [Borrow_filter]
}

enum Borrow_orderBy {
  id
  hash
  nonce
  logIndex
  blockNumber
  timestamp
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__borrowCount
  account__repayCount
  account__liquidateCount
  account__liquidationCount
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__side
  position__isCollateral
  position__balance
  position__depositCount
  position__withdrawCount
  position__borrowCount
  position__repayCount
  position__liquidationCount
  asset
  asset__id
  asset__name
  asset__symbol
  asset__decimals
  asset__lastPriceUSD
  asset__lastPriceBlockNumber
  asset___type
  amount
  amountUSD
}

scalar Bytes

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.

"""
type Deposit {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Account that deposited tokens """
  account: Account!
  """ The market tokens are deposited to """
  market: Market!
  """ The user position changed by this event """
  position: Position!
  """ Token deposited """
  asset: Token!
  """ Amount of token deposited in native units """
  amount: BigInt!
  """ Amount of token deposited in USD """
  amountUSD: BigDecimal!
}

input Deposit_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposit_filter]
  or: [Deposit_filter]
}

enum Deposit_orderBy {
  id
  hash
  nonce
  logIndex
  blockNumber
  timestamp
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__borrowCount
  account__repayCount
  account__liquidateCount
  account__liquidationCount
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__side
  position__isCollateral
  position__balance
  position__depositCount
  position__withdrawCount
  position__borrowCount
  position__repayCount
  position__liquidationCount
  asset
  asset__id
  asset__name
  asset__symbol
  asset__decimals
  asset__lastPriceUSD
  asset__lastPriceBlockNumber
  asset___type
  amount
  amountUSD
}

type FinancialsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: ID!
  """ Protocol this snapshot is associated with """
  protocol: LendingProtocol!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP 
  """
  mintedTokenSupplies: [BigInt!]
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  dailySupplySideRevenueUSD: BigDecimal!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  dailyProtocolSideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  dailyTotalRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Current balance of all deposited assets, in USD. Note this metric should be the same as TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Total assets deposited on a given day, in USD """
  dailyDepositUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets, in USD. """
  totalBorrowBalanceUSD: BigDecimal!
  """ Total assets borrowed/minted on a given day, in USD. """
  dailyBorrowUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination). 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Total assets liquidated on a given day, in USD. """
  dailyLiquidateUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Total assets withdrawn on a given day, in USD. """
  dailyWithdrawUSD: BigDecimal!
  """ Total assets repaid on a given day, in USD. """
  dailyRepayUSD: BigDecimal!
}

input FinancialsDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: LendingProtocol_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  mintedTokenSupplies: [BigInt!]
  mintedTokenSupplies_not: [BigInt!]
  mintedTokenSupplies_contains: [BigInt!]
  mintedTokenSupplies_contains_nocase: [BigInt!]
  mintedTokenSupplies_not_contains: [BigInt!]
  mintedTokenSupplies_not_contains_nocase: [BigInt!]
  dailySupplySideRevenueUSD: BigDecimal
  dailySupplySideRevenueUSD_not: BigDecimal
  dailySupplySideRevenueUSD_gt: BigDecimal
  dailySupplySideRevenueUSD_lt: BigDecimal
  dailySupplySideRevenueUSD_gte: BigDecimal
  dailySupplySideRevenueUSD_lte: BigDecimal
  dailySupplySideRevenueUSD_in: [BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD: BigDecimal
  dailyProtocolSideRevenueUSD_not: BigDecimal
  dailyProtocolSideRevenueUSD_gt: BigDecimal
  dailyProtocolSideRevenueUSD_lt: BigDecimal
  dailyProtocolSideRevenueUSD_gte: BigDecimal
  dailyProtocolSideRevenueUSD_lte: BigDecimal
  dailyProtocolSideRevenueUSD_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  dailyTotalRevenueUSD: BigDecimal
  dailyTotalRevenueUSD_not: BigDecimal
  dailyTotalRevenueUSD_gt: BigDecimal
  dailyTotalRevenueUSD_lt: BigDecimal
  dailyTotalRevenueUSD_gte: BigDecimal
  dailyTotalRevenueUSD_lte: BigDecimal
  dailyTotalRevenueUSD_in: [BigDecimal!]
  dailyTotalRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  dailyDepositUSD: BigDecimal
  dailyDepositUSD_not: BigDecimal
  dailyDepositUSD_gt: BigDecimal
  dailyDepositUSD_lt: BigDecimal
  dailyDepositUSD_gte: BigDecimal
  dailyDepositUSD_lte: BigDecimal
  dailyDepositUSD_in: [BigDecimal!]
  dailyDepositUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  dailyBorrowUSD: BigDecimal
  dailyBorrowUSD_not: BigDecimal
  dailyBorrowUSD_gt: BigDecimal
  dailyBorrowUSD_lt: BigDecimal
  dailyBorrowUSD_gte: BigDecimal
  dailyBorrowUSD_lte: BigDecimal
  dailyBorrowUSD_in: [BigDecimal!]
  dailyBorrowUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  dailyLiquidateUSD: BigDecimal
  dailyLiquidateUSD_not: BigDecimal
  dailyLiquidateUSD_gt: BigDecimal
  dailyLiquidateUSD_lt: BigDecimal
  dailyLiquidateUSD_gte: BigDecimal
  dailyLiquidateUSD_lte: BigDecimal
  dailyLiquidateUSD_in: [BigDecimal!]
  dailyLiquidateUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  dailyWithdrawUSD: BigDecimal
  dailyWithdrawUSD_not: BigDecimal
  dailyWithdrawUSD_gt: BigDecimal
  dailyWithdrawUSD_lt: BigDecimal
  dailyWithdrawUSD_gte: BigDecimal
  dailyWithdrawUSD_lte: BigDecimal
  dailyWithdrawUSD_in: [BigDecimal!]
  dailyWithdrawUSD_not_in: [BigDecimal!]
  dailyRepayUSD: BigDecimal
  dailyRepayUSD_not: BigDecimal
  dailyRepayUSD_gt: BigDecimal
  dailyRepayUSD_lt: BigDecimal
  dailyRepayUSD_gte: BigDecimal
  dailyRepayUSD_lte: BigDecimal
  dailyRepayUSD_in: [BigDecimal!]
  dailyRepayUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FinancialsDailySnapshot_filter]
  or: [FinancialsDailySnapshot_filter]
}

enum FinancialsDailySnapshot_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__lendingType
  protocol__riskType
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueDepositors
  protocol__cumulativeUniqueBorrowers
  protocol__cumulativeUniqueLiquidators
  protocol__cumulativeUniqueLiquidatees
  protocol__totalValueLockedUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__totalDepositBalanceUSD
  protocol__cumulativeDepositUSD
  protocol__totalBorrowBalanceUSD
  protocol__cumulativeBorrowUSD
  protocol__cumulativeLiquidateUSD
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol___priceOracle
  blockNumber
  timestamp
  totalValueLockedUSD
  protocolControlledValueUSD
  mintedTokenSupplies
  dailySupplySideRevenueUSD
  cumulativeSupplySideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyTotalRevenueUSD
  cumulativeTotalRevenueUSD
  totalDepositBalanceUSD
  dailyDepositUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  dailyBorrowUSD
  cumulativeBorrowUSD
  dailyLiquidateUSD
  cumulativeLiquidateUSD
  dailyWithdrawUSD
  dailyRepayUSD
}

type InterestRate {
  """ { Interest rate side }-{ Interest rate type }-{ Market ID } """
  id: ID!
  """ Interest rate in percentage APY. E.g. 5.21% should be stored as 5.21 """
  rate: BigDecimal!
  """ Duration of the loan in days. Only applies to fixed term lending (e.g. Notional) 
  """
  duration: Int
  """ Maturity of the loan in block height. Only applies to fixed term lending (e.g. Notional) 
  """
  maturityBlock: BigInt
  """ The party the interest is paid to / received from """
  side: InterestRateSide!
  """ The type of interest rate (e.g. stable, fixed, variable, etc) """
  type: InterestRateType!
}

enum InterestRateSide {
  """ Interest rate accrued by lenders """
  LENDER
  """ Interest rate paid by borrowers """
  BORROWER
}

enum InterestRateType {
  """ Stable interest rate (e.g. Aave) """
  STABLE
  """ Variable interest rate (e.g. Compound) """
  VARIABLE
  """ Fixed interest rate (e.g. Notional) """
  FIXED
}

input InterestRate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rate: BigDecimal
  rate_not: BigDecimal
  rate_gt: BigDecimal
  rate_lt: BigDecimal
  rate_gte: BigDecimal
  rate_lte: BigDecimal
  rate_in: [BigDecimal!]
  rate_not_in: [BigDecimal!]
  duration: Int
  duration_not: Int
  duration_gt: Int
  duration_lt: Int
  duration_gte: Int
  duration_lte: Int
  duration_in: [Int!]
  duration_not_in: [Int!]
  maturityBlock: BigInt
  maturityBlock_not: BigInt
  maturityBlock_gt: BigInt
  maturityBlock_lt: BigInt
  maturityBlock_gte: BigInt
  maturityBlock_lte: BigInt
  maturityBlock_in: [BigInt!]
  maturityBlock_not_in: [BigInt!]
  side: InterestRateSide
  side_not: InterestRateSide
  side_in: [InterestRateSide!]
  side_not_in: [InterestRateSide!]
  type: InterestRateType
  type_not: InterestRateType
  type_in: [InterestRateType!]
  type_not_in: [InterestRateType!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [InterestRate_filter]
  or: [InterestRate_filter]
}

enum InterestRate_orderBy {
  id
  rate
  duration
  maturityBlock
  side
  type
}

type LendingProtocol implements Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: ID!
  """ Name of the protocol, including version. e.g. Aave v2 """
  name: String!
  """ Slug of protocol, including version. e.g. aave-v2 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: ProtocolType!
  """ The specific lending protocol type """
  lendingType: LendingType
  """ Risk type of the lending protocol """
  riskType: RiskType
  """ Tokens that can be minted. Only applies to CDP """
  mintedTokens(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Number of cumulative depositors """
  cumulativeUniqueDepositors: Int!
  """ Number of cumulative borrowers """
  cumulativeUniqueBorrowers: Int!
  """ Number of cumulative liquidators (accounts that performed liquidation) 
  """
  cumulativeUniqueLiquidators: Int!
  """ Number of cumulative liquidatees (accounts that got liquidated) """
  cumulativeUniqueLiquidatees: Int!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Current balance of all deposited assets, in USD. Note this metric should be the same as TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD. 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination). 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP 
  """
  mintedTokenSupplies: [BigInt!]
  """ Total number of pools """
  totalPoolCount: Int!
  """ Total number of open positions """
  openPositionCount: Int!
  """ Total number of positions (open and closed) """
  cumulativePositionCount: Int!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsHourlySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsHourlySnapshot_filter): [UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: FinancialsDailySnapshot_orderBy, orderDirection: OrderDirection, where: FinancialsDailySnapshot_filter): [FinancialsDailySnapshot!]!
  """ All markets that belong to this protocol """
  markets(skip: Int = 0, first: Int = 100, orderBy: Market_orderBy, orderDirection: OrderDirection, where: Market_filter): [Market!]!
  """ String of the address of the current price oracle on the protocol """
  _priceOracle: String!
  """ A list of all markets in the snapshot """
  _marketIDs: [String!]!
}

input LendingProtocol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Network
  network_not: Network
  network_in: [Network!]
  network_not_in: [Network!]
  type: ProtocolType
  type_not: ProtocolType
  type_in: [ProtocolType!]
  type_not_in: [ProtocolType!]
  lendingType: LendingType
  lendingType_not: LendingType
  lendingType_in: [LendingType!]
  lendingType_not_in: [LendingType!]
  riskType: RiskType
  riskType_not: RiskType
  riskType_in: [RiskType!]
  riskType_not_in: [RiskType!]
  mintedTokens: [String!]
  mintedTokens_not: [String!]
  mintedTokens_contains: [String!]
  mintedTokens_contains_nocase: [String!]
  mintedTokens_not_contains: [String!]
  mintedTokens_not_contains_nocase: [String!]
  mintedTokens_: Token_filter
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeUniqueDepositors: Int
  cumulativeUniqueDepositors_not: Int
  cumulativeUniqueDepositors_gt: Int
  cumulativeUniqueDepositors_lt: Int
  cumulativeUniqueDepositors_gte: Int
  cumulativeUniqueDepositors_lte: Int
  cumulativeUniqueDepositors_in: [Int!]
  cumulativeUniqueDepositors_not_in: [Int!]
  cumulativeUniqueBorrowers: Int
  cumulativeUniqueBorrowers_not: Int
  cumulativeUniqueBorrowers_gt: Int
  cumulativeUniqueBorrowers_lt: Int
  cumulativeUniqueBorrowers_gte: Int
  cumulativeUniqueBorrowers_lte: Int
  cumulativeUniqueBorrowers_in: [Int!]
  cumulativeUniqueBorrowers_not_in: [Int!]
  cumulativeUniqueLiquidators: Int
  cumulativeUniqueLiquidators_not: Int
  cumulativeUniqueLiquidators_gt: Int
  cumulativeUniqueLiquidators_lt: Int
  cumulativeUniqueLiquidators_gte: Int
  cumulativeUniqueLiquidators_lte: Int
  cumulativeUniqueLiquidators_in: [Int!]
  cumulativeUniqueLiquidators_not_in: [Int!]
  cumulativeUniqueLiquidatees: Int
  cumulativeUniqueLiquidatees_not: Int
  cumulativeUniqueLiquidatees_gt: Int
  cumulativeUniqueLiquidatees_lt: Int
  cumulativeUniqueLiquidatees_gte: Int
  cumulativeUniqueLiquidatees_lte: Int
  cumulativeUniqueLiquidatees_in: [Int!]
  cumulativeUniqueLiquidatees_not_in: [Int!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  mintedTokenSupplies: [BigInt!]
  mintedTokenSupplies_not: [BigInt!]
  mintedTokenSupplies_contains: [BigInt!]
  mintedTokenSupplies_contains_nocase: [BigInt!]
  mintedTokenSupplies_not_contains: [BigInt!]
  mintedTokenSupplies_not_contains_nocase: [BigInt!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  cumulativePositionCount: Int
  cumulativePositionCount_not: Int
  cumulativePositionCount_gt: Int
  cumulativePositionCount_lt: Int
  cumulativePositionCount_gte: Int
  cumulativePositionCount_lte: Int
  cumulativePositionCount_in: [Int!]
  cumulativePositionCount_not_in: [Int!]
  dailyUsageMetrics_: UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: UsageMetricsHourlySnapshot_filter
  financialMetrics_: FinancialsDailySnapshot_filter
  markets_: Market_filter
  _priceOracle: String
  _priceOracle_not: String
  _priceOracle_gt: String
  _priceOracle_lt: String
  _priceOracle_gte: String
  _priceOracle_lte: String
  _priceOracle_in: [String!]
  _priceOracle_not_in: [String!]
  _priceOracle_contains: String
  _priceOracle_contains_nocase: String
  _priceOracle_not_contains: String
  _priceOracle_not_contains_nocase: String
  _priceOracle_starts_with: String
  _priceOracle_starts_with_nocase: String
  _priceOracle_not_starts_with: String
  _priceOracle_not_starts_with_nocase: String
  _priceOracle_ends_with: String
  _priceOracle_ends_with_nocase: String
  _priceOracle_not_ends_with: String
  _priceOracle_not_ends_with_nocase: String
  _marketIDs: [String!]
  _marketIDs_not: [String!]
  _marketIDs_contains: [String!]
  _marketIDs_contains_nocase: [String!]
  _marketIDs_not_contains: [String!]
  _marketIDs_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LendingProtocol_filter]
  or: [LendingProtocol_filter]
}

enum LendingProtocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  lendingType
  riskType
  mintedTokens
  cumulativeUniqueUsers
  cumulativeUniqueDepositors
  cumulativeUniqueBorrowers
  cumulativeUniqueLiquidators
  cumulativeUniqueLiquidatees
  totalValueLockedUSD
  protocolControlledValueUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  totalDepositBalanceUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  cumulativeBorrowUSD
  cumulativeLiquidateUSD
  mintedTokenSupplies
  totalPoolCount
  openPositionCount
  cumulativePositionCount
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
  markets
  _priceOracle
  _marketIDs
}

enum LendingType {
  """ Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market 
  """
  CDP
  """ Pooled protocols pool all users assets into a single market """
  POOLED
}

type Liquidate {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Account that carried out the liquidation """
  liquidator: Account!
  """ Account that got liquidated """
  liquidatee: Account!
  """ The market of the collateral being used """
  market: Market!
  """ The user position changed by this event """
  position: Position!
  """ Asset repaid (borrowed) """
  asset: Token!
  """ Amount of collateral liquidated in native units """
  amount: BigInt!
  """ Amount of collateral liquidated in USD """
  amountUSD: BigDecimal!
  """ Amount of profit from liquidation in USD """
  profitUSD: BigDecimal!
}

input Liquidate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  liquidator: String
  liquidator_not: String
  liquidator_gt: String
  liquidator_lt: String
  liquidator_gte: String
  liquidator_lte: String
  liquidator_in: [String!]
  liquidator_not_in: [String!]
  liquidator_contains: String
  liquidator_contains_nocase: String
  liquidator_not_contains: String
  liquidator_not_contains_nocase: String
  liquidator_starts_with: String
  liquidator_starts_with_nocase: String
  liquidator_not_starts_with: String
  liquidator_not_starts_with_nocase: String
  liquidator_ends_with: String
  liquidator_ends_with_nocase: String
  liquidator_not_ends_with: String
  liquidator_not_ends_with_nocase: String
  liquidator_: Account_filter
  liquidatee: String
  liquidatee_not: String
  liquidatee_gt: String
  liquidatee_lt: String
  liquidatee_gte: String
  liquidatee_lte: String
  liquidatee_in: [String!]
  liquidatee_not_in: [String!]
  liquidatee_contains: String
  liquidatee_contains_nocase: String
  liquidatee_not_contains: String
  liquidatee_not_contains_nocase: String
  liquidatee_starts_with: String
  liquidatee_starts_with_nocase: String
  liquidatee_not_starts_with: String
  liquidatee_not_starts_with_nocase: String
  liquidatee_ends_with: String
  liquidatee_ends_with_nocase: String
  liquidatee_not_ends_with: String
  liquidatee_not_ends_with_nocase: String
  liquidatee_: Account_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  profitUSD: BigDecimal
  profitUSD_not: BigDecimal
  profitUSD_gt: BigDecimal
  profitUSD_lt: BigDecimal
  profitUSD_gte: BigDecimal
  profitUSD_lte: BigDecimal
  profitUSD_in: [BigDecimal!]
  profitUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Liquidate_filter]
  or: [Liquidate_filter]
}

enum Liquidate_orderBy {
  id
  hash
  nonce
  logIndex
  blockNumber
  timestamp
  liquidator
  liquidator__id
  liquidator__positionCount
  liquidator__openPositionCount
  liquidator__closedPositionCount
  liquidator__depositCount
  liquidator__withdrawCount
  liquidator__borrowCount
  liquidator__repayCount
  liquidator__liquidateCount
  liquidator__liquidationCount
  liquidatee
  liquidatee__id
  liquidatee__positionCount
  liquidatee__openPositionCount
  liquidatee__closedPositionCount
  liquidatee__depositCount
  liquidatee__withdrawCount
  liquidatee__borrowCount
  liquidatee__repayCount
  liquidatee__liquidateCount
  liquidatee__liquidationCount
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__side
  position__isCollateral
  position__balance
  position__depositCount
  position__withdrawCount
  position__borrowCount
  position__repayCount
  position__liquidationCount
  asset
  asset__id
  asset__name
  asset__symbol
  asset__decimals
  asset__lastPriceUSD
  asset__lastPriceBlockNumber
  asset___type
  amount
  amountUSD
  profitUSD
}

type Market {
  """ Smart contract address of the market """
  id: ID!
  """ The protocol this pool belongs to """
  protocol: LendingProtocol!
  """ Name of market """
  name: String
  """ Is this market active or is it frozen """
  isActive: Boolean!
  """ Can you use the output token as collateral """
  canUseAsCollateral: Boolean!
  """ Can you borrow from this market """
  canBorrowFrom: Boolean!
  """ Maximum loan-to-value ratio as a percentage value (e.g. 75% for DAI in Aave) 
  """
  maximumLTV: BigDecimal!
  """ Liquidation threshold as a percentage value (e.g. 80% for DAI in Aave). When it is reached, the position is defined as undercollateralised and could be liquidated 
  """
  liquidationThreshold: BigDecimal!
  """ Liquidation penalty (or the liquidation bonus for liquidators) as a percentage value. It is the penalty/bonus price on the collateral when liquidators purchase it as part of the liquidation of a loan that has passed the liquidation threshold 
  """
  liquidationPenalty: BigDecimal!
  """ Token that need to be deposited to take a position in protocol """
  inputToken: Token!
  """ Token that is minted to track ownership of position in protocol (e.g. aToken, cToken). Leave as null if doesn't exist 
  """
  outputToken: Token
  """ Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon 
  """
  rewardTokens(skip: Int = 0, first: Int = 100, orderBy: RewardToken_orderBy, orderDirection: OrderDirection, where: RewardToken_filter): [RewardToken!]
  """ All interest rates / fees allowed in the market. Interest rate should be in APY percentage 
  """
  rates(skip: Int = 0, first: Int = 100, orderBy: InterestRate_orderBy, orderDirection: OrderDirection, where: InterestRate_filter): [InterestRate!]!
  """ Current TVL (Total Value Locked) of this market """
  totalValueLockedUSD: BigDecimal!
  """ All revenue generated by the market, accrued to the supply side. """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ All revenue generated by the market, accrued to the protocol. """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the market. """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Current balance of all deposited assets (not historical cumulative), in USD 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination) 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Amount of input tokens in the market """
  inputTokenBalance: BigInt!
  """ Price per share of input token in USD """
  inputTokenPriceUSD: BigDecimal!
  """ Total supply of output token """
  outputTokenSupply: BigInt!
  """ Price per share of output token in USD """
  outputTokenPriceUSD: BigDecimal!
  """ Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%) 
  """
  exchangeRate: BigDecimal
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
  """ Creation timestamp """
  createdTimestamp: BigInt!
  """ Creation block number """
  createdBlockNumber: BigInt!
  """ All positions in this market """
  positions(skip: Int = 0, first: Int = 100, orderBy: Position_orderBy, orderDirection: OrderDirection, where: Position_filter): [Position!]!
  """ Number of positions in this market """
  positionCount: Int!
  """ Number of open positions in this market """
  openPositionCount: Int!
  """ Number of closed positions in this market """
  closedPositionCount: Int!
  """ Number of lending positions in this market """
  lendingPositionCount: Int!
  """ Number of borrowing positions in this market """
  borrowingPositionCount: Int!
  """ Market daily snapshots """
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: MarketDailySnapshot_orderBy, orderDirection: OrderDirection, where: MarketDailySnapshot_filter): [MarketDailySnapshot!]!
  """ Market hourly snapshots """
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: MarketHourlySnapshot_orderBy, orderDirection: OrderDirection, where: MarketHourlySnapshot_filter): [MarketHourlySnapshot!]!
  """ All deposits made to this market """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  """ All withdrawals made from this market """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  """ All borrows from this market """
  borrows(skip: Int = 0, first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, where: Borrow_filter): [Borrow!]!
  """ All repayments to this market """
  repays(skip: Int = 0, first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, where: Repay_filter): [Repay!]!
  """ All liquidations made to this market """
  liquidates(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
  """ The reserve factor as a percentage """
  _reserveFactor: BigDecimal!
  """ The variable debt token address correlated to the reserve asset """
  _vToken: Token
  """ The stable debt token address correlated to the reserve asset """
  _sToken: Token
  """ An aggregate metric of the average borrow rate across all borrows """
  _liquidityIndex: BigInt!
  """ The state of the protocol prior to being paused (isActive / canUseAsCollateral / canBorrowFrom) 
  """
  _prePauseState: [Boolean!]!
  """ Aux: Timestamp of the last time rewards were calculated for this market. 
  """
  _lastRewardsUpdated: BigInt
}

type MarketDailySnapshot {
  """ { Smart contract address of the market }-{ # of days since Unix epoch time } 
  """
  id: ID!
  """ The protocol this snapshot belongs to """
  protocol: LendingProtocol!
  """ The pool this snapshot belongs to """
  market: Market!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
  """ All interest rates / fees allowed in the market. Interest rate should be in APY percentage 
  """
  rates(skip: Int = 0, first: Int = 100, orderBy: InterestRate_orderBy, orderDirection: OrderDirection, where: InterestRate_filter): [InterestRate!]!
  """ Current TVL (Total Value Locked) of this market """
  totalValueLockedUSD: BigDecimal!
  """ All revenue generated by the market, accrued to the supply side. """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Daily revenue generated by the market, accrued to the supply side. """
  dailySupplySideRevenueUSD: BigDecimal!
  """ All revenue generated by the market, accrued to the protocol. """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ Daily revenue generated by the market, accrued to the protocol. """
  dailyProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the market. """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Daily revenue generated by the market. """
  dailyTotalRevenueUSD: BigDecimal!
  """ Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all deposits made on a given day, in USD """
  dailyDepositUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD. 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all borrows/mints made on a given day, in USD """
  dailyBorrowUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination) 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Total assets liquidated on a given day, in USD. """
  dailyLiquidateUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Total assets withdrawn on a given day, in USD. """
  dailyWithdrawUSD: BigDecimal!
  """ Total assets repaid on a given day, in USD. """
  dailyRepayUSD: BigDecimal!
  """ Amount of input token in the market. """
  inputTokenBalance: BigInt!
  """ Price per share of input token in USD """
  inputTokenPriceUSD: BigDecimal!
  """ Total supply of output token """
  outputTokenSupply: BigInt!
  """ Price per share of output token in USD """
  outputTokenPriceUSD: BigDecimal!
  """ Amount of input token per full share of output token. Only applies when the output token exists 
  """
  exchangeRate: BigDecimal
  """ Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
}

input MarketDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: LendingProtocol_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  rates: [String!]
  rates_not: [String!]
  rates_contains: [String!]
  rates_contains_nocase: [String!]
  rates_not_contains: [String!]
  rates_not_contains_nocase: [String!]
  rates_: InterestRate_filter
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  dailySupplySideRevenueUSD: BigDecimal
  dailySupplySideRevenueUSD_not: BigDecimal
  dailySupplySideRevenueUSD_gt: BigDecimal
  dailySupplySideRevenueUSD_lt: BigDecimal
  dailySupplySideRevenueUSD_gte: BigDecimal
  dailySupplySideRevenueUSD_lte: BigDecimal
  dailySupplySideRevenueUSD_in: [BigDecimal!]
  dailySupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD: BigDecimal
  dailyProtocolSideRevenueUSD_not: BigDecimal
  dailyProtocolSideRevenueUSD_gt: BigDecimal
  dailyProtocolSideRevenueUSD_lt: BigDecimal
  dailyProtocolSideRevenueUSD_gte: BigDecimal
  dailyProtocolSideRevenueUSD_lte: BigDecimal
  dailyProtocolSideRevenueUSD_in: [BigDecimal!]
  dailyProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  dailyTotalRevenueUSD: BigDecimal
  dailyTotalRevenueUSD_not: BigDecimal
  dailyTotalRevenueUSD_gt: BigDecimal
  dailyTotalRevenueUSD_lt: BigDecimal
  dailyTotalRevenueUSD_gte: BigDecimal
  dailyTotalRevenueUSD_lte: BigDecimal
  dailyTotalRevenueUSD_in: [BigDecimal!]
  dailyTotalRevenueUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  dailyDepositUSD: BigDecimal
  dailyDepositUSD_not: BigDecimal
  dailyDepositUSD_gt: BigDecimal
  dailyDepositUSD_lt: BigDecimal
  dailyDepositUSD_gte: BigDecimal
  dailyDepositUSD_lte: BigDecimal
  dailyDepositUSD_in: [BigDecimal!]
  dailyDepositUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  dailyBorrowUSD: BigDecimal
  dailyBorrowUSD_not: BigDecimal
  dailyBorrowUSD_gt: BigDecimal
  dailyBorrowUSD_lt: BigDecimal
  dailyBorrowUSD_gte: BigDecimal
  dailyBorrowUSD_lte: BigDecimal
  dailyBorrowUSD_in: [BigDecimal!]
  dailyBorrowUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  dailyLiquidateUSD: BigDecimal
  dailyLiquidateUSD_not: BigDecimal
  dailyLiquidateUSD_gt: BigDecimal
  dailyLiquidateUSD_lt: BigDecimal
  dailyLiquidateUSD_gte: BigDecimal
  dailyLiquidateUSD_lte: BigDecimal
  dailyLiquidateUSD_in: [BigDecimal!]
  dailyLiquidateUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  dailyWithdrawUSD: BigDecimal
  dailyWithdrawUSD_not: BigDecimal
  dailyWithdrawUSD_gt: BigDecimal
  dailyWithdrawUSD_lt: BigDecimal
  dailyWithdrawUSD_gte: BigDecimal
  dailyWithdrawUSD_lte: BigDecimal
  dailyWithdrawUSD_in: [BigDecimal!]
  dailyWithdrawUSD_not_in: [BigDecimal!]
  dailyRepayUSD: BigDecimal
  dailyRepayUSD_not: BigDecimal
  dailyRepayUSD_gt: BigDecimal
  dailyRepayUSD_lt: BigDecimal
  dailyRepayUSD_gte: BigDecimal
  dailyRepayUSD_lte: BigDecimal
  dailyRepayUSD_in: [BigDecimal!]
  dailyRepayUSD_not_in: [BigDecimal!]
  inputTokenBalance: BigInt
  inputTokenBalance_not: BigInt
  inputTokenBalance_gt: BigInt
  inputTokenBalance_lt: BigInt
  inputTokenBalance_gte: BigInt
  inputTokenBalance_lte: BigInt
  inputTokenBalance_in: [BigInt!]
  inputTokenBalance_not_in: [BigInt!]
  inputTokenPriceUSD: BigDecimal
  inputTokenPriceUSD_not: BigDecimal
  inputTokenPriceUSD_gt: BigDecimal
  inputTokenPriceUSD_lt: BigDecimal
  inputTokenPriceUSD_gte: BigDecimal
  inputTokenPriceUSD_lte: BigDecimal
  inputTokenPriceUSD_in: [BigDecimal!]
  inputTokenPriceUSD_not_in: [BigDecimal!]
  outputTokenSupply: BigInt
  outputTokenSupply_not: BigInt
  outputTokenSupply_gt: BigInt
  outputTokenSupply_lt: BigInt
  outputTokenSupply_gte: BigInt
  outputTokenSupply_lte: BigInt
  outputTokenSupply_in: [BigInt!]
  outputTokenSupply_not_in: [BigInt!]
  outputTokenPriceUSD: BigDecimal
  outputTokenPriceUSD_not: BigDecimal
  outputTokenPriceUSD_gt: BigDecimal
  outputTokenPriceUSD_lt: BigDecimal
  outputTokenPriceUSD_gte: BigDecimal
  outputTokenPriceUSD_lte: BigDecimal
  outputTokenPriceUSD_in: [BigDecimal!]
  outputTokenPriceUSD_not_in: [BigDecimal!]
  exchangeRate: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_lt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_not_in: [BigDecimal!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketDailySnapshot_filter]
  or: [MarketDailySnapshot_filter]
}

enum MarketDailySnapshot_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__lendingType
  protocol__riskType
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueDepositors
  protocol__cumulativeUniqueBorrowers
  protocol__cumulativeUniqueLiquidators
  protocol__cumulativeUniqueLiquidatees
  protocol__totalValueLockedUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__totalDepositBalanceUSD
  protocol__cumulativeDepositUSD
  protocol__totalBorrowBalanceUSD
  protocol__cumulativeBorrowUSD
  protocol__cumulativeLiquidateUSD
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol___priceOracle
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  blockNumber
  timestamp
  rates
  totalValueLockedUSD
  cumulativeSupplySideRevenueUSD
  dailySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  dailyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  dailyTotalRevenueUSD
  totalDepositBalanceUSD
  dailyDepositUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  dailyBorrowUSD
  cumulativeBorrowUSD
  dailyLiquidateUSD
  cumulativeLiquidateUSD
  dailyWithdrawUSD
  dailyRepayUSD
  inputTokenBalance
  inputTokenPriceUSD
  outputTokenSupply
  outputTokenPriceUSD
  exchangeRate
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
}

type MarketHourlySnapshot {
  """ { Smart contract address of the market }-{ # of hours since Unix epoch time } 
  """
  id: ID!
  """ The protocol this snapshot belongs to """
  protocol: LendingProtocol!
  """ The pool this snapshot belongs to """
  market: Market!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
  """ All interest rates / fees allowed in the market. Interest rate should be in APY percentage 
  """
  rates(skip: Int = 0, first: Int = 100, orderBy: InterestRate_orderBy, orderDirection: OrderDirection, where: InterestRate_filter): [InterestRate!]!
  """ Current TVL (Total Value Locked) of this market """
  totalValueLockedUSD: BigDecimal!
  """ All revenue generated by the market, accrued to the supply side. """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Hourly revenue generated by the market, accrued to the supply side. """
  hourlySupplySideRevenueUSD: BigDecimal!
  """ All revenue generated by the market, accrued to the protocol. """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ Hourly revenue generated by the market, accrued to the protocol. """
  hourlyProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the market. """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Hourly revenue generated by the market. """
  hourlyTotalRevenueUSD: BigDecimal!
  """ Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL. 
  """
  totalDepositBalanceUSD: BigDecimal!
  """ Sum of all deposits made in a given hour, in USD """
  hourlyDepositUSD: BigDecimal!
  """ Sum of all historical deposits in USD (only considers deposits and not withdrawals) 
  """
  cumulativeDepositUSD: BigDecimal!
  """ Current balance of all borrowed/minted assets (not historical cumulative), in USD. 
  """
  totalBorrowBalanceUSD: BigDecimal!
  """ Sum of all borrows/mints made in a given hour, in USD """
  hourlyBorrowUSD: BigDecimal!
  """ Sum of all historical borrows/mints in USD (i.e. total loan origination) 
  """
  cumulativeBorrowUSD: BigDecimal!
  """ Total assets liquidated in a given hour, in USD. """
  hourlyLiquidateUSD: BigDecimal!
  """ Sum of all historical liquidations in USD """
  cumulativeLiquidateUSD: BigDecimal!
  """ Total assets withdrawn on a given hour, in USD. """
  hourlyWithdrawUSD: BigDecimal!
  """ Total assets repaid on a given hour, in USD. """
  hourlyRepayUSD: BigDecimal!
  """ Amount of input token in the market. """
  inputTokenBalance: BigInt!
  """ Price per share of input token in USD """
  inputTokenPriceUSD: BigDecimal!
  """ Total supply of output token """
  outputTokenSupply: BigInt!
  """ Price per share of output token in USD """
  outputTokenPriceUSD: BigDecimal!
  """ Amount of input token per full share of output token. Only applies when the output token exists 
  """
  exchangeRate: BigDecimal
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsAmount: [BigInt!]
  """ Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. 
  """
  rewardTokenEmissionsUSD: [BigDecimal!]
}

input MarketHourlySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: LendingProtocol_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  rates: [String!]
  rates_not: [String!]
  rates_contains: [String!]
  rates_contains_nocase: [String!]
  rates_not_contains: [String!]
  rates_not_contains_nocase: [String!]
  rates_: InterestRate_filter
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  hourlySupplySideRevenueUSD: BigDecimal
  hourlySupplySideRevenueUSD_not: BigDecimal
  hourlySupplySideRevenueUSD_gt: BigDecimal
  hourlySupplySideRevenueUSD_lt: BigDecimal
  hourlySupplySideRevenueUSD_gte: BigDecimal
  hourlySupplySideRevenueUSD_lte: BigDecimal
  hourlySupplySideRevenueUSD_in: [BigDecimal!]
  hourlySupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  hourlyProtocolSideRevenueUSD: BigDecimal
  hourlyProtocolSideRevenueUSD_not: BigDecimal
  hourlyProtocolSideRevenueUSD_gt: BigDecimal
  hourlyProtocolSideRevenueUSD_lt: BigDecimal
  hourlyProtocolSideRevenueUSD_gte: BigDecimal
  hourlyProtocolSideRevenueUSD_lte: BigDecimal
  hourlyProtocolSideRevenueUSD_in: [BigDecimal!]
  hourlyProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  hourlyTotalRevenueUSD: BigDecimal
  hourlyTotalRevenueUSD_not: BigDecimal
  hourlyTotalRevenueUSD_gt: BigDecimal
  hourlyTotalRevenueUSD_lt: BigDecimal
  hourlyTotalRevenueUSD_gte: BigDecimal
  hourlyTotalRevenueUSD_lte: BigDecimal
  hourlyTotalRevenueUSD_in: [BigDecimal!]
  hourlyTotalRevenueUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  hourlyDepositUSD: BigDecimal
  hourlyDepositUSD_not: BigDecimal
  hourlyDepositUSD_gt: BigDecimal
  hourlyDepositUSD_lt: BigDecimal
  hourlyDepositUSD_gte: BigDecimal
  hourlyDepositUSD_lte: BigDecimal
  hourlyDepositUSD_in: [BigDecimal!]
  hourlyDepositUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  hourlyBorrowUSD: BigDecimal
  hourlyBorrowUSD_not: BigDecimal
  hourlyBorrowUSD_gt: BigDecimal
  hourlyBorrowUSD_lt: BigDecimal
  hourlyBorrowUSD_gte: BigDecimal
  hourlyBorrowUSD_lte: BigDecimal
  hourlyBorrowUSD_in: [BigDecimal!]
  hourlyBorrowUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  hourlyLiquidateUSD: BigDecimal
  hourlyLiquidateUSD_not: BigDecimal
  hourlyLiquidateUSD_gt: BigDecimal
  hourlyLiquidateUSD_lt: BigDecimal
  hourlyLiquidateUSD_gte: BigDecimal
  hourlyLiquidateUSD_lte: BigDecimal
  hourlyLiquidateUSD_in: [BigDecimal!]
  hourlyLiquidateUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  hourlyWithdrawUSD: BigDecimal
  hourlyWithdrawUSD_not: BigDecimal
  hourlyWithdrawUSD_gt: BigDecimal
  hourlyWithdrawUSD_lt: BigDecimal
  hourlyWithdrawUSD_gte: BigDecimal
  hourlyWithdrawUSD_lte: BigDecimal
  hourlyWithdrawUSD_in: [BigDecimal!]
  hourlyWithdrawUSD_not_in: [BigDecimal!]
  hourlyRepayUSD: BigDecimal
  hourlyRepayUSD_not: BigDecimal
  hourlyRepayUSD_gt: BigDecimal
  hourlyRepayUSD_lt: BigDecimal
  hourlyRepayUSD_gte: BigDecimal
  hourlyRepayUSD_lte: BigDecimal
  hourlyRepayUSD_in: [BigDecimal!]
  hourlyRepayUSD_not_in: [BigDecimal!]
  inputTokenBalance: BigInt
  inputTokenBalance_not: BigInt
  inputTokenBalance_gt: BigInt
  inputTokenBalance_lt: BigInt
  inputTokenBalance_gte: BigInt
  inputTokenBalance_lte: BigInt
  inputTokenBalance_in: [BigInt!]
  inputTokenBalance_not_in: [BigInt!]
  inputTokenPriceUSD: BigDecimal
  inputTokenPriceUSD_not: BigDecimal
  inputTokenPriceUSD_gt: BigDecimal
  inputTokenPriceUSD_lt: BigDecimal
  inputTokenPriceUSD_gte: BigDecimal
  inputTokenPriceUSD_lte: BigDecimal
  inputTokenPriceUSD_in: [BigDecimal!]
  inputTokenPriceUSD_not_in: [BigDecimal!]
  outputTokenSupply: BigInt
  outputTokenSupply_not: BigInt
  outputTokenSupply_gt: BigInt
  outputTokenSupply_lt: BigInt
  outputTokenSupply_gte: BigInt
  outputTokenSupply_lte: BigInt
  outputTokenSupply_in: [BigInt!]
  outputTokenSupply_not_in: [BigInt!]
  outputTokenPriceUSD: BigDecimal
  outputTokenPriceUSD_not: BigDecimal
  outputTokenPriceUSD_gt: BigDecimal
  outputTokenPriceUSD_lt: BigDecimal
  outputTokenPriceUSD_gte: BigDecimal
  outputTokenPriceUSD_lte: BigDecimal
  outputTokenPriceUSD_in: [BigDecimal!]
  outputTokenPriceUSD_not_in: [BigDecimal!]
  exchangeRate: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_lt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_not_in: [BigDecimal!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MarketHourlySnapshot_filter]
  or: [MarketHourlySnapshot_filter]
}

enum MarketHourlySnapshot_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__lendingType
  protocol__riskType
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueDepositors
  protocol__cumulativeUniqueBorrowers
  protocol__cumulativeUniqueLiquidators
  protocol__cumulativeUniqueLiquidatees
  protocol__totalValueLockedUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__totalDepositBalanceUSD
  protocol__cumulativeDepositUSD
  protocol__totalBorrowBalanceUSD
  protocol__cumulativeBorrowUSD
  protocol__cumulativeLiquidateUSD
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol___priceOracle
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  blockNumber
  timestamp
  rates
  totalValueLockedUSD
  cumulativeSupplySideRevenueUSD
  hourlySupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  hourlyProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  hourlyTotalRevenueUSD
  totalDepositBalanceUSD
  hourlyDepositUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  hourlyBorrowUSD
  cumulativeBorrowUSD
  hourlyLiquidateUSD
  cumulativeLiquidateUSD
  hourlyWithdrawUSD
  hourlyRepayUSD
  inputTokenBalance
  inputTokenPriceUSD
  outputTokenSupply
  outputTokenPriceUSD
  exchangeRate
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
}

input Market_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: LendingProtocol_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  canUseAsCollateral: Boolean
  canUseAsCollateral_not: Boolean
  canUseAsCollateral_in: [Boolean!]
  canUseAsCollateral_not_in: [Boolean!]
  canBorrowFrom: Boolean
  canBorrowFrom_not: Boolean
  canBorrowFrom_in: [Boolean!]
  canBorrowFrom_not_in: [Boolean!]
  maximumLTV: BigDecimal
  maximumLTV_not: BigDecimal
  maximumLTV_gt: BigDecimal
  maximumLTV_lt: BigDecimal
  maximumLTV_gte: BigDecimal
  maximumLTV_lte: BigDecimal
  maximumLTV_in: [BigDecimal!]
  maximumLTV_not_in: [BigDecimal!]
  liquidationThreshold: BigDecimal
  liquidationThreshold_not: BigDecimal
  liquidationThreshold_gt: BigDecimal
  liquidationThreshold_lt: BigDecimal
  liquidationThreshold_gte: BigDecimal
  liquidationThreshold_lte: BigDecimal
  liquidationThreshold_in: [BigDecimal!]
  liquidationThreshold_not_in: [BigDecimal!]
  liquidationPenalty: BigDecimal
  liquidationPenalty_not: BigDecimal
  liquidationPenalty_gt: BigDecimal
  liquidationPenalty_lt: BigDecimal
  liquidationPenalty_gte: BigDecimal
  liquidationPenalty_lte: BigDecimal
  liquidationPenalty_in: [BigDecimal!]
  liquidationPenalty_not_in: [BigDecimal!]
  inputToken: String
  inputToken_not: String
  inputToken_gt: String
  inputToken_lt: String
  inputToken_gte: String
  inputToken_lte: String
  inputToken_in: [String!]
  inputToken_not_in: [String!]
  inputToken_contains: String
  inputToken_contains_nocase: String
  inputToken_not_contains: String
  inputToken_not_contains_nocase: String
  inputToken_starts_with: String
  inputToken_starts_with_nocase: String
  inputToken_not_starts_with: String
  inputToken_not_starts_with_nocase: String
  inputToken_ends_with: String
  inputToken_ends_with_nocase: String
  inputToken_not_ends_with: String
  inputToken_not_ends_with_nocase: String
  inputToken_: Token_filter
  outputToken: String
  outputToken_not: String
  outputToken_gt: String
  outputToken_lt: String
  outputToken_gte: String
  outputToken_lte: String
  outputToken_in: [String!]
  outputToken_not_in: [String!]
  outputToken_contains: String
  outputToken_contains_nocase: String
  outputToken_not_contains: String
  outputToken_not_contains_nocase: String
  outputToken_starts_with: String
  outputToken_starts_with_nocase: String
  outputToken_not_starts_with: String
  outputToken_not_starts_with_nocase: String
  outputToken_ends_with: String
  outputToken_ends_with_nocase: String
  outputToken_not_ends_with: String
  outputToken_not_ends_with_nocase: String
  outputToken_: Token_filter
  rewardTokens: [String!]
  rewardTokens_not: [String!]
  rewardTokens_contains: [String!]
  rewardTokens_contains_nocase: [String!]
  rewardTokens_not_contains: [String!]
  rewardTokens_not_contains_nocase: [String!]
  rewardTokens_: RewardToken_filter
  rates: [String!]
  rates_not: [String!]
  rates_contains: [String!]
  rates_contains_nocase: [String!]
  rates_not_contains: [String!]
  rates_not_contains_nocase: [String!]
  rates_: InterestRate_filter
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  totalDepositBalanceUSD: BigDecimal
  totalDepositBalanceUSD_not: BigDecimal
  totalDepositBalanceUSD_gt: BigDecimal
  totalDepositBalanceUSD_lt: BigDecimal
  totalDepositBalanceUSD_gte: BigDecimal
  totalDepositBalanceUSD_lte: BigDecimal
  totalDepositBalanceUSD_in: [BigDecimal!]
  totalDepositBalanceUSD_not_in: [BigDecimal!]
  cumulativeDepositUSD: BigDecimal
  cumulativeDepositUSD_not: BigDecimal
  cumulativeDepositUSD_gt: BigDecimal
  cumulativeDepositUSD_lt: BigDecimal
  cumulativeDepositUSD_gte: BigDecimal
  cumulativeDepositUSD_lte: BigDecimal
  cumulativeDepositUSD_in: [BigDecimal!]
  cumulativeDepositUSD_not_in: [BigDecimal!]
  totalBorrowBalanceUSD: BigDecimal
  totalBorrowBalanceUSD_not: BigDecimal
  totalBorrowBalanceUSD_gt: BigDecimal
  totalBorrowBalanceUSD_lt: BigDecimal
  totalBorrowBalanceUSD_gte: BigDecimal
  totalBorrowBalanceUSD_lte: BigDecimal
  totalBorrowBalanceUSD_in: [BigDecimal!]
  totalBorrowBalanceUSD_not_in: [BigDecimal!]
  cumulativeBorrowUSD: BigDecimal
  cumulativeBorrowUSD_not: BigDecimal
  cumulativeBorrowUSD_gt: BigDecimal
  cumulativeBorrowUSD_lt: BigDecimal
  cumulativeBorrowUSD_gte: BigDecimal
  cumulativeBorrowUSD_lte: BigDecimal
  cumulativeBorrowUSD_in: [BigDecimal!]
  cumulativeBorrowUSD_not_in: [BigDecimal!]
  cumulativeLiquidateUSD: BigDecimal
  cumulativeLiquidateUSD_not: BigDecimal
  cumulativeLiquidateUSD_gt: BigDecimal
  cumulativeLiquidateUSD_lt: BigDecimal
  cumulativeLiquidateUSD_gte: BigDecimal
  cumulativeLiquidateUSD_lte: BigDecimal
  cumulativeLiquidateUSD_in: [BigDecimal!]
  cumulativeLiquidateUSD_not_in: [BigDecimal!]
  inputTokenBalance: BigInt
  inputTokenBalance_not: BigInt
  inputTokenBalance_gt: BigInt
  inputTokenBalance_lt: BigInt
  inputTokenBalance_gte: BigInt
  inputTokenBalance_lte: BigInt
  inputTokenBalance_in: [BigInt!]
  inputTokenBalance_not_in: [BigInt!]
  inputTokenPriceUSD: BigDecimal
  inputTokenPriceUSD_not: BigDecimal
  inputTokenPriceUSD_gt: BigDecimal
  inputTokenPriceUSD_lt: BigDecimal
  inputTokenPriceUSD_gte: BigDecimal
  inputTokenPriceUSD_lte: BigDecimal
  inputTokenPriceUSD_in: [BigDecimal!]
  inputTokenPriceUSD_not_in: [BigDecimal!]
  outputTokenSupply: BigInt
  outputTokenSupply_not: BigInt
  outputTokenSupply_gt: BigInt
  outputTokenSupply_lt: BigInt
  outputTokenSupply_gte: BigInt
  outputTokenSupply_lte: BigInt
  outputTokenSupply_in: [BigInt!]
  outputTokenSupply_not_in: [BigInt!]
  outputTokenPriceUSD: BigDecimal
  outputTokenPriceUSD_not: BigDecimal
  outputTokenPriceUSD_gt: BigDecimal
  outputTokenPriceUSD_lt: BigDecimal
  outputTokenPriceUSD_gte: BigDecimal
  outputTokenPriceUSD_lte: BigDecimal
  outputTokenPriceUSD_in: [BigDecimal!]
  outputTokenPriceUSD_not_in: [BigDecimal!]
  exchangeRate: BigDecimal
  exchangeRate_not: BigDecimal
  exchangeRate_gt: BigDecimal
  exchangeRate_lt: BigDecimal
  exchangeRate_gte: BigDecimal
  exchangeRate_lte: BigDecimal
  exchangeRate_in: [BigDecimal!]
  exchangeRate_not_in: [BigDecimal!]
  rewardTokenEmissionsAmount: [BigInt!]
  rewardTokenEmissionsAmount_not: [BigInt!]
  rewardTokenEmissionsAmount_contains: [BigInt!]
  rewardTokenEmissionsAmount_contains_nocase: [BigInt!]
  rewardTokenEmissionsAmount_not_contains: [BigInt!]
  rewardTokenEmissionsAmount_not_contains_nocase: [BigInt!]
  rewardTokenEmissionsUSD: [BigDecimal!]
  rewardTokenEmissionsUSD_not: [BigDecimal!]
  rewardTokenEmissionsUSD_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_contains_nocase: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains: [BigDecimal!]
  rewardTokenEmissionsUSD_not_contains_nocase: [BigDecimal!]
  createdTimestamp: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_lt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_not_in: [BigInt!]
  createdBlockNumber: BigInt
  createdBlockNumber_not: BigInt
  createdBlockNumber_gt: BigInt
  createdBlockNumber_lt: BigInt
  createdBlockNumber_gte: BigInt
  createdBlockNumber_lte: BigInt
  createdBlockNumber_in: [BigInt!]
  createdBlockNumber_not_in: [BigInt!]
  positions_: Position_filter
  positionCount: Int
  positionCount_not: Int
  positionCount_gt: Int
  positionCount_lt: Int
  positionCount_gte: Int
  positionCount_lte: Int
  positionCount_in: [Int!]
  positionCount_not_in: [Int!]
  openPositionCount: Int
  openPositionCount_not: Int
  openPositionCount_gt: Int
  openPositionCount_lt: Int
  openPositionCount_gte: Int
  openPositionCount_lte: Int
  openPositionCount_in: [Int!]
  openPositionCount_not_in: [Int!]
  closedPositionCount: Int
  closedPositionCount_not: Int
  closedPositionCount_gt: Int
  closedPositionCount_lt: Int
  closedPositionCount_gte: Int
  closedPositionCount_lte: Int
  closedPositionCount_in: [Int!]
  closedPositionCount_not_in: [Int!]
  lendingPositionCount: Int
  lendingPositionCount_not: Int
  lendingPositionCount_gt: Int
  lendingPositionCount_lt: Int
  lendingPositionCount_gte: Int
  lendingPositionCount_lte: Int
  lendingPositionCount_in: [Int!]
  lendingPositionCount_not_in: [Int!]
  borrowingPositionCount: Int
  borrowingPositionCount_not: Int
  borrowingPositionCount_gt: Int
  borrowingPositionCount_lt: Int
  borrowingPositionCount_gte: Int
  borrowingPositionCount_lte: Int
  borrowingPositionCount_in: [Int!]
  borrowingPositionCount_not_in: [Int!]
  dailySnapshots_: MarketDailySnapshot_filter
  hourlySnapshots_: MarketHourlySnapshot_filter
  deposits_: Deposit_filter
  withdraws_: Withdraw_filter
  borrows_: Borrow_filter
  repays_: Repay_filter
  liquidates_: Liquidate_filter
  _reserveFactor: BigDecimal
  _reserveFactor_not: BigDecimal
  _reserveFactor_gt: BigDecimal
  _reserveFactor_lt: BigDecimal
  _reserveFactor_gte: BigDecimal
  _reserveFactor_lte: BigDecimal
  _reserveFactor_in: [BigDecimal!]
  _reserveFactor_not_in: [BigDecimal!]
  _vToken: String
  _vToken_not: String
  _vToken_gt: String
  _vToken_lt: String
  _vToken_gte: String
  _vToken_lte: String
  _vToken_in: [String!]
  _vToken_not_in: [String!]
  _vToken_contains: String
  _vToken_contains_nocase: String
  _vToken_not_contains: String
  _vToken_not_contains_nocase: String
  _vToken_starts_with: String
  _vToken_starts_with_nocase: String
  _vToken_not_starts_with: String
  _vToken_not_starts_with_nocase: String
  _vToken_ends_with: String
  _vToken_ends_with_nocase: String
  _vToken_not_ends_with: String
  _vToken_not_ends_with_nocase: String
  _vToken_: Token_filter
  _sToken: String
  _sToken_not: String
  _sToken_gt: String
  _sToken_lt: String
  _sToken_gte: String
  _sToken_lte: String
  _sToken_in: [String!]
  _sToken_not_in: [String!]
  _sToken_contains: String
  _sToken_contains_nocase: String
  _sToken_not_contains: String
  _sToken_not_contains_nocase: String
  _sToken_starts_with: String
  _sToken_starts_with_nocase: String
  _sToken_not_starts_with: String
  _sToken_not_starts_with_nocase: String
  _sToken_ends_with: String
  _sToken_ends_with_nocase: String
  _sToken_not_ends_with: String
  _sToken_not_ends_with_nocase: String
  _sToken_: Token_filter
  _liquidityIndex: BigInt
  _liquidityIndex_not: BigInt
  _liquidityIndex_gt: BigInt
  _liquidityIndex_lt: BigInt
  _liquidityIndex_gte: BigInt
  _liquidityIndex_lte: BigInt
  _liquidityIndex_in: [BigInt!]
  _liquidityIndex_not_in: [BigInt!]
  _prePauseState: [Boolean!]
  _prePauseState_not: [Boolean!]
  _prePauseState_contains: [Boolean!]
  _prePauseState_contains_nocase: [Boolean!]
  _prePauseState_not_contains: [Boolean!]
  _prePauseState_not_contains_nocase: [Boolean!]
  _lastRewardsUpdated: BigInt
  _lastRewardsUpdated_not: BigInt
  _lastRewardsUpdated_gt: BigInt
  _lastRewardsUpdated_lt: BigInt
  _lastRewardsUpdated_gte: BigInt
  _lastRewardsUpdated_lte: BigInt
  _lastRewardsUpdated_in: [BigInt!]
  _lastRewardsUpdated_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Market_filter]
  or: [Market_filter]
}

enum Market_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__lendingType
  protocol__riskType
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueDepositors
  protocol__cumulativeUniqueBorrowers
  protocol__cumulativeUniqueLiquidators
  protocol__cumulativeUniqueLiquidatees
  protocol__totalValueLockedUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__totalDepositBalanceUSD
  protocol__cumulativeDepositUSD
  protocol__totalBorrowBalanceUSD
  protocol__cumulativeBorrowUSD
  protocol__cumulativeLiquidateUSD
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol___priceOracle
  name
  isActive
  canUseAsCollateral
  canBorrowFrom
  maximumLTV
  liquidationThreshold
  liquidationPenalty
  inputToken
  inputToken__id
  inputToken__name
  inputToken__symbol
  inputToken__decimals
  inputToken__lastPriceUSD
  inputToken__lastPriceBlockNumber
  inputToken___type
  outputToken
  outputToken__id
  outputToken__name
  outputToken__symbol
  outputToken__decimals
  outputToken__lastPriceUSD
  outputToken__lastPriceBlockNumber
  outputToken___type
  rewardTokens
  rates
  totalValueLockedUSD
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  totalDepositBalanceUSD
  cumulativeDepositUSD
  totalBorrowBalanceUSD
  cumulativeBorrowUSD
  cumulativeLiquidateUSD
  inputTokenBalance
  inputTokenPriceUSD
  outputTokenSupply
  outputTokenPriceUSD
  exchangeRate
  rewardTokenEmissionsAmount
  rewardTokenEmissionsUSD
  createdTimestamp
  createdBlockNumber
  positions
  positionCount
  openPositionCount
  closedPositionCount
  lendingPositionCount
  borrowingPositionCount
  dailySnapshots
  hourlySnapshots
  deposits
  withdraws
  borrows
  repays
  liquidates
  _reserveFactor
  _vToken
  _vToken__id
  _vToken__name
  _vToken__symbol
  _vToken__decimals
  _vToken__lastPriceUSD
  _vToken__lastPriceBlockNumber
  _vToken___type
  _sToken
  _sToken__id
  _sToken__name
  _sToken__symbol
  _sToken__decimals
  _sToken__lastPriceUSD
  _sToken__lastPriceBlockNumber
  _sToken___type
  _liquidityIndex
  _prePauseState
  _lastRewardsUpdated
}

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC
  CELO
  COSMOS
  CRONOS
  MAINNET
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC
  XDAI
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Position {
  """ { Account address }-{ Market address }-{ Position Side }-{ Counter } """
  id: ID!
  """ Account that owns this position """
  account: Account!
  """ The market in which this position was opened """
  market: Market!
  """ The hash of the transaction that opened this position """
  hashOpened: String!
  """ The hash of the transaction that closed this position """
  hashClosed: String
  """ Block number of when the position was opened """
  blockNumberOpened: BigInt!
  """ Timestamp when the position was opened """
  timestampOpened: BigInt!
  """ Block number of when the position was closed (0 if still open) """
  blockNumberClosed: BigInt
  """ Timestamp when the position was closed (0 if still open) """
  timestampClosed: BigInt
  """ Side of the position (either lender or borrower) """
  side: PositionSide!
  """ Whether this position is being used as a collateral (only applies to LENDER positions) 
  """
  isCollateral: Boolean
  """ Token balance in this position, in native amounts """
  balance: BigInt!
  """ Number of deposits related to this position """
  depositCount: Int!
  """ All deposit events of this position """
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  """ Number of withdrawals related to this position """
  withdrawCount: Int!
  """ All withdraw events of this position """
  withdraws(skip: Int = 0, first: Int = 100, orderBy: Withdraw_orderBy, orderDirection: OrderDirection, where: Withdraw_filter): [Withdraw!]!
  """ Number of borrows related to this position """
  borrowCount: Int!
  """ All borrow events of this position """
  borrows(skip: Int = 0, first: Int = 100, orderBy: Borrow_orderBy, orderDirection: OrderDirection, where: Borrow_filter): [Borrow!]!
  """ Number of repays related to this position """
  repayCount: Int!
  """ All repay events of this position """
  repays(skip: Int = 0, first: Int = 100, orderBy: Repay_orderBy, orderDirection: OrderDirection, where: Repay_filter): [Repay!]!
  """ Number of liquidations related to this position """
  liquidationCount: Int!
  """ Liquidation event related to this position (if exists) """
  liquidations(skip: Int = 0, first: Int = 100, orderBy: Liquidate_orderBy, orderDirection: OrderDirection, where: Liquidate_filter): [Liquidate!]!
  """ Position daily snapshots for open positions """
  snapshots(skip: Int = 0, first: Int = 100, orderBy: PositionSnapshot_orderBy, orderDirection: OrderDirection, where: PositionSnapshot_filter): [PositionSnapshot!]!
}

type PositionCounter {
  """ { Account address }-{ Market address }-{ Position Side } """
  id: ID!
  """ Next count """
  nextCount: Int!
}

input PositionCounter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nextCount: Int
  nextCount_not: Int
  nextCount_gt: Int
  nextCount_lt: Int
  nextCount_gte: Int
  nextCount_lte: Int
  nextCount_in: [Int!]
  nextCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionCounter_filter]
  or: [PositionCounter_filter]
}

enum PositionCounter_orderBy {
  id
  nextCount
}

enum PositionSide {
  """ Position opened as a lender """
  LENDER
  """ Position opened as a borrower """
  BORROWER
}

type PositionSnapshot {
  """ { Position ID }-{ Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that triggered this snapshot """
  hash: String!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Nonce of the transaction that triggered this snapshot """
  nonce: BigInt!
  """ Position of this snapshot """
  position: Position!
  """ Token balance in this position, in native amounts """
  balance: BigInt!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input PositionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PositionSnapshot_filter]
  or: [PositionSnapshot_filter]
}

enum PositionSnapshot_orderBy {
  id
  hash
  logIndex
  nonce
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__side
  position__isCollateral
  position__balance
  position__depositCount
  position__withdrawCount
  position__borrowCount
  position__repayCount
  position__liquidationCount
  balance
  blockNumber
  timestamp
}

input Position_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  hashOpened: String
  hashOpened_not: String
  hashOpened_gt: String
  hashOpened_lt: String
  hashOpened_gte: String
  hashOpened_lte: String
  hashOpened_in: [String!]
  hashOpened_not_in: [String!]
  hashOpened_contains: String
  hashOpened_contains_nocase: String
  hashOpened_not_contains: String
  hashOpened_not_contains_nocase: String
  hashOpened_starts_with: String
  hashOpened_starts_with_nocase: String
  hashOpened_not_starts_with: String
  hashOpened_not_starts_with_nocase: String
  hashOpened_ends_with: String
  hashOpened_ends_with_nocase: String
  hashOpened_not_ends_with: String
  hashOpened_not_ends_with_nocase: String
  hashClosed: String
  hashClosed_not: String
  hashClosed_gt: String
  hashClosed_lt: String
  hashClosed_gte: String
  hashClosed_lte: String
  hashClosed_in: [String!]
  hashClosed_not_in: [String!]
  hashClosed_contains: String
  hashClosed_contains_nocase: String
  hashClosed_not_contains: String
  hashClosed_not_contains_nocase: String
  hashClosed_starts_with: String
  hashClosed_starts_with_nocase: String
  hashClosed_not_starts_with: String
  hashClosed_not_starts_with_nocase: String
  hashClosed_ends_with: String
  hashClosed_ends_with_nocase: String
  hashClosed_not_ends_with: String
  hashClosed_not_ends_with_nocase: String
  blockNumberOpened: BigInt
  blockNumberOpened_not: BigInt
  blockNumberOpened_gt: BigInt
  blockNumberOpened_lt: BigInt
  blockNumberOpened_gte: BigInt
  blockNumberOpened_lte: BigInt
  blockNumberOpened_in: [BigInt!]
  blockNumberOpened_not_in: [BigInt!]
  timestampOpened: BigInt
  timestampOpened_not: BigInt
  timestampOpened_gt: BigInt
  timestampOpened_lt: BigInt
  timestampOpened_gte: BigInt
  timestampOpened_lte: BigInt
  timestampOpened_in: [BigInt!]
  timestampOpened_not_in: [BigInt!]
  blockNumberClosed: BigInt
  blockNumberClosed_not: BigInt
  blockNumberClosed_gt: BigInt
  blockNumberClosed_lt: BigInt
  blockNumberClosed_gte: BigInt
  blockNumberClosed_lte: BigInt
  blockNumberClosed_in: [BigInt!]
  blockNumberClosed_not_in: [BigInt!]
  timestampClosed: BigInt
  timestampClosed_not: BigInt
  timestampClosed_gt: BigInt
  timestampClosed_lt: BigInt
  timestampClosed_gte: BigInt
  timestampClosed_lte: BigInt
  timestampClosed_in: [BigInt!]
  timestampClosed_not_in: [BigInt!]
  side: PositionSide
  side_not: PositionSide
  side_in: [PositionSide!]
  side_not_in: [PositionSide!]
  isCollateral: Boolean
  isCollateral_not: Boolean
  isCollateral_in: [Boolean!]
  isCollateral_not_in: [Boolean!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  depositCount: Int
  depositCount_not: Int
  depositCount_gt: Int
  depositCount_lt: Int
  depositCount_gte: Int
  depositCount_lte: Int
  depositCount_in: [Int!]
  depositCount_not_in: [Int!]
  deposits_: Deposit_filter
  withdrawCount: Int
  withdrawCount_not: Int
  withdrawCount_gt: Int
  withdrawCount_lt: Int
  withdrawCount_gte: Int
  withdrawCount_lte: Int
  withdrawCount_in: [Int!]
  withdrawCount_not_in: [Int!]
  withdraws_: Withdraw_filter
  borrowCount: Int
  borrowCount_not: Int
  borrowCount_gt: Int
  borrowCount_lt: Int
  borrowCount_gte: Int
  borrowCount_lte: Int
  borrowCount_in: [Int!]
  borrowCount_not_in: [Int!]
  borrows_: Borrow_filter
  repayCount: Int
  repayCount_not: Int
  repayCount_gt: Int
  repayCount_lt: Int
  repayCount_gte: Int
  repayCount_lte: Int
  repayCount_in: [Int!]
  repayCount_not_in: [Int!]
  repays_: Repay_filter
  liquidationCount: Int
  liquidationCount_not: Int
  liquidationCount_gt: Int
  liquidationCount_lt: Int
  liquidationCount_gte: Int
  liquidationCount_lte: Int
  liquidationCount_in: [Int!]
  liquidationCount_not_in: [Int!]
  liquidations_: Liquidate_filter
  snapshots_: PositionSnapshot_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Position_filter]
  or: [Position_filter]
}

enum Position_orderBy {
  id
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__borrowCount
  account__repayCount
  account__liquidateCount
  account__liquidationCount
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  hashOpened
  hashClosed
  blockNumberOpened
  timestampOpened
  blockNumberClosed
  timestampClosed
  side
  isCollateral
  balance
  depositCount
  deposits
  withdrawCount
  withdraws
  borrowCount
  borrows
  repayCount
  repays
  liquidationCount
  liquidations
  snapshots
}

interface Protocol {
  """ Smart contract address of the protocol's main contract (Factory, Registry, etc) 
  """
  id: ID!
  """ Name of the protocol, including version. e.g. Uniswap v3 """
  name: String!
  """ Slug of protocol, including version. e.g. uniswap-v3 """
  slug: String!
  """ Version of the subgraph schema, in SemVer format (e.g. 1.0.0) """
  schemaVersion: String!
  """ Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) 
  """
  subgraphVersion: String!
  """ Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) 
  """
  methodologyVersion: String!
  """ The blockchain network this subgraph is indexing on """
  network: Network!
  """ The type of protocol (e.g. DEX, Lending, Yield, etc) """
  type: ProtocolType!
  """ Current TVL (Total Value Locked) of the entire protocol """
  totalValueLockedUSD: BigDecimal!
  """ Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. 
  """
  protocolControlledValueUSD: BigDecimal
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. 
  """
  cumulativeSupplySideRevenueUSD: BigDecimal!
  """ Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. 
  """
  cumulativeProtocolSideRevenueUSD: BigDecimal!
  """ All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. 
  """
  cumulativeTotalRevenueUSD: BigDecimal!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Daily usage metrics for this protocol """
  dailyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsDailySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsDailySnapshot_filter): [UsageMetricsDailySnapshot!]!
  """ Hourly usage metrics for this protocol """
  hourlyUsageMetrics(skip: Int = 0, first: Int = 100, orderBy: UsageMetricsHourlySnapshot_orderBy, orderDirection: OrderDirection, where: UsageMetricsHourlySnapshot_filter): [UsageMetricsHourlySnapshot!]!
  """ Daily financial metrics for this protocol """
  financialMetrics(skip: Int = 0, first: Int = 100, orderBy: FinancialsDailySnapshot_orderBy, orderDirection: OrderDirection, where: FinancialsDailySnapshot_filter): [FinancialsDailySnapshot!]!
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
}

input Protocol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  slug: String
  slug_not: String
  slug_gt: String
  slug_lt: String
  slug_gte: String
  slug_lte: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_contains: String
  slug_contains_nocase: String
  slug_not_contains: String
  slug_not_contains_nocase: String
  slug_starts_with: String
  slug_starts_with_nocase: String
  slug_not_starts_with: String
  slug_not_starts_with_nocase: String
  slug_ends_with: String
  slug_ends_with_nocase: String
  slug_not_ends_with: String
  slug_not_ends_with_nocase: String
  schemaVersion: String
  schemaVersion_not: String
  schemaVersion_gt: String
  schemaVersion_lt: String
  schemaVersion_gte: String
  schemaVersion_lte: String
  schemaVersion_in: [String!]
  schemaVersion_not_in: [String!]
  schemaVersion_contains: String
  schemaVersion_contains_nocase: String
  schemaVersion_not_contains: String
  schemaVersion_not_contains_nocase: String
  schemaVersion_starts_with: String
  schemaVersion_starts_with_nocase: String
  schemaVersion_not_starts_with: String
  schemaVersion_not_starts_with_nocase: String
  schemaVersion_ends_with: String
  schemaVersion_ends_with_nocase: String
  schemaVersion_not_ends_with: String
  schemaVersion_not_ends_with_nocase: String
  subgraphVersion: String
  subgraphVersion_not: String
  subgraphVersion_gt: String
  subgraphVersion_lt: String
  subgraphVersion_gte: String
  subgraphVersion_lte: String
  subgraphVersion_in: [String!]
  subgraphVersion_not_in: [String!]
  subgraphVersion_contains: String
  subgraphVersion_contains_nocase: String
  subgraphVersion_not_contains: String
  subgraphVersion_not_contains_nocase: String
  subgraphVersion_starts_with: String
  subgraphVersion_starts_with_nocase: String
  subgraphVersion_not_starts_with: String
  subgraphVersion_not_starts_with_nocase: String
  subgraphVersion_ends_with: String
  subgraphVersion_ends_with_nocase: String
  subgraphVersion_not_ends_with: String
  subgraphVersion_not_ends_with_nocase: String
  methodologyVersion: String
  methodologyVersion_not: String
  methodologyVersion_gt: String
  methodologyVersion_lt: String
  methodologyVersion_gte: String
  methodologyVersion_lte: String
  methodologyVersion_in: [String!]
  methodologyVersion_not_in: [String!]
  methodologyVersion_contains: String
  methodologyVersion_contains_nocase: String
  methodologyVersion_not_contains: String
  methodologyVersion_not_contains_nocase: String
  methodologyVersion_starts_with: String
  methodologyVersion_starts_with_nocase: String
  methodologyVersion_not_starts_with: String
  methodologyVersion_not_starts_with_nocase: String
  methodologyVersion_ends_with: String
  methodologyVersion_ends_with_nocase: String
  methodologyVersion_not_ends_with: String
  methodologyVersion_not_ends_with_nocase: String
  network: Network
  network_not: Network
  network_in: [Network!]
  network_not_in: [Network!]
  type: ProtocolType
  type_not: ProtocolType
  type_in: [ProtocolType!]
  type_not_in: [ProtocolType!]
  totalValueLockedUSD: BigDecimal
  totalValueLockedUSD_not: BigDecimal
  totalValueLockedUSD_gt: BigDecimal
  totalValueLockedUSD_lt: BigDecimal
  totalValueLockedUSD_gte: BigDecimal
  totalValueLockedUSD_lte: BigDecimal
  totalValueLockedUSD_in: [BigDecimal!]
  totalValueLockedUSD_not_in: [BigDecimal!]
  protocolControlledValueUSD: BigDecimal
  protocolControlledValueUSD_not: BigDecimal
  protocolControlledValueUSD_gt: BigDecimal
  protocolControlledValueUSD_lt: BigDecimal
  protocolControlledValueUSD_gte: BigDecimal
  protocolControlledValueUSD_lte: BigDecimal
  protocolControlledValueUSD_in: [BigDecimal!]
  protocolControlledValueUSD_not_in: [BigDecimal!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  cumulativeSupplySideRevenueUSD: BigDecimal
  cumulativeSupplySideRevenueUSD_not: BigDecimal
  cumulativeSupplySideRevenueUSD_gt: BigDecimal
  cumulativeSupplySideRevenueUSD_lt: BigDecimal
  cumulativeSupplySideRevenueUSD_gte: BigDecimal
  cumulativeSupplySideRevenueUSD_lte: BigDecimal
  cumulativeSupplySideRevenueUSD_in: [BigDecimal!]
  cumulativeSupplySideRevenueUSD_not_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD: BigDecimal
  cumulativeProtocolSideRevenueUSD_not: BigDecimal
  cumulativeProtocolSideRevenueUSD_gt: BigDecimal
  cumulativeProtocolSideRevenueUSD_lt: BigDecimal
  cumulativeProtocolSideRevenueUSD_gte: BigDecimal
  cumulativeProtocolSideRevenueUSD_lte: BigDecimal
  cumulativeProtocolSideRevenueUSD_in: [BigDecimal!]
  cumulativeProtocolSideRevenueUSD_not_in: [BigDecimal!]
  cumulativeTotalRevenueUSD: BigDecimal
  cumulativeTotalRevenueUSD_not: BigDecimal
  cumulativeTotalRevenueUSD_gt: BigDecimal
  cumulativeTotalRevenueUSD_lt: BigDecimal
  cumulativeTotalRevenueUSD_gte: BigDecimal
  cumulativeTotalRevenueUSD_lte: BigDecimal
  cumulativeTotalRevenueUSD_in: [BigDecimal!]
  cumulativeTotalRevenueUSD_not_in: [BigDecimal!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  dailyUsageMetrics_: UsageMetricsDailySnapshot_filter
  hourlyUsageMetrics_: UsageMetricsHourlySnapshot_filter
  financialMetrics_: FinancialsDailySnapshot_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Protocol_filter]
  or: [Protocol_filter]
}

enum Protocol_orderBy {
  id
  name
  slug
  schemaVersion
  subgraphVersion
  methodologyVersion
  network
  type
  totalValueLockedUSD
  protocolControlledValueUSD
  cumulativeUniqueUsers
  cumulativeSupplySideRevenueUSD
  cumulativeProtocolSideRevenueUSD
  cumulativeTotalRevenueUSD
  totalPoolCount
  dailyUsageMetrics
  hourlyUsageMetrics
  financialMetrics
}

type Query {
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardToken
  rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardToken_orderBy
    orderDirection: OrderDirection
    where: RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardToken!]!
  interestRate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InterestRate
  interestRates(
    skip: Int = 0
    first: Int = 100
    orderBy: InterestRate_orderBy
    orderDirection: OrderDirection
    where: InterestRate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InterestRate!]!
  lendingProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LendingProtocol
  lendingProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: LendingProtocol_orderBy
    orderDirection: OrderDirection
    where: LendingProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LendingProtocol!]!
  usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsDailySnapshot
  usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsDailySnapshot!]!
  usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsHourlySnapshot
  usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsHourlySnapshot!]!
  financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FinancialsDailySnapshot
  financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FinancialsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FinancialsDailySnapshot!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  marketDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDailySnapshot
  marketDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketDailySnapshot!]!
  marketHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourlySnapshot
  marketHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketHourlySnapshot!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  borrow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Borrow!]!
  repay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Repay!]!
  liquidate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  liquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActiveAccount!]!
  positionCounter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionCounter
  positionCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionCounter_orderBy
    orderDirection: OrderDirection
    where: PositionCounter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionCounter!]!
  actorAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActorAccount
  actorAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActorAccount_orderBy
    orderDirection: OrderDirection
    where: ActorAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActorAccount!]!
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Repay {
  """ { Transaction hash }-{ Log index } """
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Account that repaid/burned tokens """
  account: Account!
  """ The market tokens are repaid/burned to """
  market: Market!
  """ The user position changed by this event """
  position: Position!
  """ Token repaid/burned """
  asset: Token!
  """ Amount of token repaid/burned in native units """
  amount: BigInt!
  """ Amount of token repaid/burned in USD """
  amountUSD: BigDecimal!
}

input Repay_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Repay_filter]
  or: [Repay_filter]
}

enum Repay_orderBy {
  id
  hash
  nonce
  logIndex
  blockNumber
  timestamp
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__borrowCount
  account__repayCount
  account__liquidateCount
  account__liquidationCount
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__side
  position__isCollateral
  position__balance
  position__depositCount
  position__withdrawCount
  position__borrowCount
  position__repayCount
  position__liquidationCount
  asset
  asset__id
  asset__name
  asset__symbol
  asset__decimals
  asset__lastPriceUSD
  asset__lastPriceBlockNumber
  asset___type
  amount
  amountUSD
}

type RewardToken {
  """ { Reward token type }-{ Smart contract address of the reward token } """
  id: ID!
  """ Reference to the actual token """
  token: Token!
  """ The type of the reward token """
  type: RewardTokenType!
  _distributionEnd: BigInt
}

enum RewardTokenType {
  """ For reward tokens awarded to LPs/lenders """
  DEPOSIT
  """ For reward tokens awarded to borrowers """
  BORROW
}

input RewardToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  type: RewardTokenType
  type_not: RewardTokenType
  type_in: [RewardTokenType!]
  type_not_in: [RewardTokenType!]
  _distributionEnd: BigInt
  _distributionEnd_not: BigInt
  _distributionEnd_gt: BigInt
  _distributionEnd_lt: BigInt
  _distributionEnd_gte: BigInt
  _distributionEnd_lte: BigInt
  _distributionEnd_in: [BigInt!]
  _distributionEnd_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RewardToken_filter]
  or: [RewardToken_filter]
}

enum RewardToken_orderBy {
  id
  token
  token__id
  token__name
  token__symbol
  token__decimals
  token__lastPriceUSD
  token__lastPriceBlockNumber
  token___type
  type
  _distributionEnd
}

enum RiskType {
  """ Global risk means each users position in a market is combined for one score to determine if they can be liquidated 
  """
  GLOBAL
  """ Isolated risk means each users position in a market or CDP is isolated for risk of liquidation 
  """
  ISOLATED
}

type Subscription {
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  rewardToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardToken
  rewardTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardToken_orderBy
    orderDirection: OrderDirection
    where: RewardToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardToken!]!
  interestRate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InterestRate
  interestRates(
    skip: Int = 0
    first: Int = 100
    orderBy: InterestRate_orderBy
    orderDirection: OrderDirection
    where: InterestRate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InterestRate!]!
  lendingProtocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LendingProtocol
  lendingProtocols(
    skip: Int = 0
    first: Int = 100
    orderBy: LendingProtocol_orderBy
    orderDirection: OrderDirection
    where: LendingProtocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LendingProtocol!]!
  usageMetricsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsDailySnapshot
  usageMetricsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsDailySnapshot!]!
  usageMetricsHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageMetricsHourlySnapshot
  usageMetricsHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageMetricsHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: UsageMetricsHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageMetricsHourlySnapshot!]!
  financialsDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FinancialsDailySnapshot
  financialsDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: FinancialsDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: FinancialsDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FinancialsDailySnapshot!]!
  market(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Market
  markets(
    skip: Int = 0
    first: Int = 100
    orderBy: Market_orderBy
    orderDirection: OrderDirection
    where: Market_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Market!]!
  marketDailySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketDailySnapshot
  marketDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketDailySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketDailySnapshot!]!
  marketHourlySnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketHourlySnapshot
  marketHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: MarketHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: MarketHourlySnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MarketHourlySnapshot!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  position(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    skip: Int = 0
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    where: Position_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Position!]!
  positionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionSnapshot
  positionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionSnapshot_orderBy
    orderDirection: OrderDirection
    where: PositionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionSnapshot!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  withdraw(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdraw
  withdraws(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdraw_orderBy
    orderDirection: OrderDirection
    where: Withdraw_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdraw!]!
  borrow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Borrow!]!
  repay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Repay!]!
  liquidate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  liquidates(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    where: Liquidate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidate!]!
  activeAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActiveAccount
  activeAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActiveAccount_orderBy
    orderDirection: OrderDirection
    where: ActiveAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActiveAccount!]!
  positionCounter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PositionCounter
  positionCounters(
    skip: Int = 0
    first: Int = 100
    orderBy: PositionCounter_orderBy
    orderDirection: OrderDirection
    where: PositionCounter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PositionCounter!]!
  actorAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ActorAccount
  actorAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: ActorAccount_orderBy
    orderDirection: OrderDirection
    where: ActorAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ActorAccount!]!
  protocol(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  """ Smart contract address of the token """
  id: ID!
  """ Name of the token, mirrored from the smart contract """
  name: String!
  """ Symbol of the token, mirrored from the smart contract """
  symbol: String!
  """ The number of decimal places this token uses, default to 18 """
  decimals: Int!
  """ Optional field to track the price of a token, mostly for caching purposes 
  """
  lastPriceUSD: BigDecimal
  """ Optional field to track the block number of the last token price """
  lastPriceBlockNumber: BigInt
  """ the market ID for underlying/asset token, aToken, vToken and sToken"""
  _market: Market
  """ type of token: aToken, inputToken, sToken, or vToken """
  _type: String
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  lastPriceUSD: BigDecimal
  lastPriceUSD_not: BigDecimal
  lastPriceUSD_gt: BigDecimal
  lastPriceUSD_lt: BigDecimal
  lastPriceUSD_gte: BigDecimal
  lastPriceUSD_lte: BigDecimal
  lastPriceUSD_in: [BigDecimal!]
  lastPriceUSD_not_in: [BigDecimal!]
  lastPriceBlockNumber: BigInt
  lastPriceBlockNumber_not: BigInt
  lastPriceBlockNumber_gt: BigInt
  lastPriceBlockNumber_lt: BigInt
  lastPriceBlockNumber_gte: BigInt
  lastPriceBlockNumber_lte: BigInt
  lastPriceBlockNumber_in: [BigInt!]
  lastPriceBlockNumber_not_in: [BigInt!]
  _market: String
  _market_not: String
  _market_gt: String
  _market_lt: String
  _market_gte: String
  _market_lte: String
  _market_in: [String!]
  _market_not_in: [String!]
  _market_contains: String
  _market_contains_nocase: String
  _market_not_contains: String
  _market_not_contains_nocase: String
  _market_starts_with: String
  _market_starts_with_nocase: String
  _market_not_starts_with: String
  _market_not_starts_with_nocase: String
  _market_ends_with: String
  _market_ends_with_nocase: String
  _market_not_ends_with: String
  _market_not_ends_with_nocase: String
  _market_: Market_filter
  _type: String
  _type_not: String
  _type_gt: String
  _type_lt: String
  _type_gte: String
  _type_lte: String
  _type_in: [String!]
  _type_not_in: [String!]
  _type_contains: String
  _type_contains_nocase: String
  _type_not_contains: String
  _type_not_contains_nocase: String
  _type_starts_with: String
  _type_starts_with_nocase: String
  _type_not_starts_with: String
  _type_not_starts_with_nocase: String
  _type_ends_with: String
  _type_ends_with_nocase: String
  _type_not_ends_with: String
  _type_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  name
  symbol
  decimals
  lastPriceUSD
  lastPriceBlockNumber
  _market
  _market__id
  _market__name
  _market__isActive
  _market__canUseAsCollateral
  _market__canBorrowFrom
  _market__maximumLTV
  _market__liquidationThreshold
  _market__liquidationPenalty
  _market__totalValueLockedUSD
  _market__cumulativeSupplySideRevenueUSD
  _market__cumulativeProtocolSideRevenueUSD
  _market__cumulativeTotalRevenueUSD
  _market__totalDepositBalanceUSD
  _market__cumulativeDepositUSD
  _market__totalBorrowBalanceUSD
  _market__cumulativeBorrowUSD
  _market__cumulativeLiquidateUSD
  _market__inputTokenBalance
  _market__inputTokenPriceUSD
  _market__outputTokenSupply
  _market__outputTokenPriceUSD
  _market__exchangeRate
  _market__createdTimestamp
  _market__createdBlockNumber
  _market__positionCount
  _market__openPositionCount
  _market__closedPositionCount
  _market__lendingPositionCount
  _market__borrowingPositionCount
  _market___reserveFactor
  _market___liquidityIndex
  _market___lastRewardsUpdated
  _type
}

type UsageMetricsDailySnapshot {
  """ ID is # of days since Unix epoch time """
  id: ID!
  """ Protocol this snapshot is associated with """
  protocol: LendingProtocol!
  """ Number of unique daily active users """
  dailyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Number of unique daily depositors """
  dailyActiveDepositors: Int!
  """ Number of cumulative depositors """
  cumulativeUniqueDepositors: Int!
  """ Number of unique daily borrowers """
  dailyActiveBorrowers: Int!
  """ Number of cumulative borrowers """
  cumulativeUniqueBorrowers: Int!
  """ Number of unique daily liquidators (accounts that performed liquidation) 
  """
  dailyActiveLiquidators: Int!
  """ Number of cumulative liquidators (accounts that performed liquidation) 
  """
  cumulativeUniqueLiquidators: Int!
  """ Number of unique daily liquidatees (accounts that got liquidated) """
  dailyActiveLiquidatees: Int!
  """ Number of cumulative liquidatees (accounts that got liquidated) """
  cumulativeUniqueLiquidatees: Int!
  """ Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. 
  """
  dailyTransactionCount: Int!
  """ Total number of deposits in a day """
  dailyDepositCount: Int!
  """ Total number of withdrawals in a day """
  dailyWithdrawCount: Int!
  """ Total number of borrows/mints in a day """
  dailyBorrowCount: Int!
  """ Total number of repayments/burns in a day """
  dailyRepayCount: Int!
  """ Total number of liquidations in a day """
  dailyLiquidateCount: Int!
  """ Total number of pools """
  totalPoolCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input UsageMetricsDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: LendingProtocol_filter
  dailyActiveUsers: Int
  dailyActiveUsers_not: Int
  dailyActiveUsers_gt: Int
  dailyActiveUsers_lt: Int
  dailyActiveUsers_gte: Int
  dailyActiveUsers_lte: Int
  dailyActiveUsers_in: [Int!]
  dailyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  dailyActiveDepositors: Int
  dailyActiveDepositors_not: Int
  dailyActiveDepositors_gt: Int
  dailyActiveDepositors_lt: Int
  dailyActiveDepositors_gte: Int
  dailyActiveDepositors_lte: Int
  dailyActiveDepositors_in: [Int!]
  dailyActiveDepositors_not_in: [Int!]
  cumulativeUniqueDepositors: Int
  cumulativeUniqueDepositors_not: Int
  cumulativeUniqueDepositors_gt: Int
  cumulativeUniqueDepositors_lt: Int
  cumulativeUniqueDepositors_gte: Int
  cumulativeUniqueDepositors_lte: Int
  cumulativeUniqueDepositors_in: [Int!]
  cumulativeUniqueDepositors_not_in: [Int!]
  dailyActiveBorrowers: Int
  dailyActiveBorrowers_not: Int
  dailyActiveBorrowers_gt: Int
  dailyActiveBorrowers_lt: Int
  dailyActiveBorrowers_gte: Int
  dailyActiveBorrowers_lte: Int
  dailyActiveBorrowers_in: [Int!]
  dailyActiveBorrowers_not_in: [Int!]
  cumulativeUniqueBorrowers: Int
  cumulativeUniqueBorrowers_not: Int
  cumulativeUniqueBorrowers_gt: Int
  cumulativeUniqueBorrowers_lt: Int
  cumulativeUniqueBorrowers_gte: Int
  cumulativeUniqueBorrowers_lte: Int
  cumulativeUniqueBorrowers_in: [Int!]
  cumulativeUniqueBorrowers_not_in: [Int!]
  dailyActiveLiquidators: Int
  dailyActiveLiquidators_not: Int
  dailyActiveLiquidators_gt: Int
  dailyActiveLiquidators_lt: Int
  dailyActiveLiquidators_gte: Int
  dailyActiveLiquidators_lte: Int
  dailyActiveLiquidators_in: [Int!]
  dailyActiveLiquidators_not_in: [Int!]
  cumulativeUniqueLiquidators: Int
  cumulativeUniqueLiquidators_not: Int
  cumulativeUniqueLiquidators_gt: Int
  cumulativeUniqueLiquidators_lt: Int
  cumulativeUniqueLiquidators_gte: Int
  cumulativeUniqueLiquidators_lte: Int
  cumulativeUniqueLiquidators_in: [Int!]
  cumulativeUniqueLiquidators_not_in: [Int!]
  dailyActiveLiquidatees: Int
  dailyActiveLiquidatees_not: Int
  dailyActiveLiquidatees_gt: Int
  dailyActiveLiquidatees_lt: Int
  dailyActiveLiquidatees_gte: Int
  dailyActiveLiquidatees_lte: Int
  dailyActiveLiquidatees_in: [Int!]
  dailyActiveLiquidatees_not_in: [Int!]
  cumulativeUniqueLiquidatees: Int
  cumulativeUniqueLiquidatees_not: Int
  cumulativeUniqueLiquidatees_gt: Int
  cumulativeUniqueLiquidatees_lt: Int
  cumulativeUniqueLiquidatees_gte: Int
  cumulativeUniqueLiquidatees_lte: Int
  cumulativeUniqueLiquidatees_in: [Int!]
  cumulativeUniqueLiquidatees_not_in: [Int!]
  dailyTransactionCount: Int
  dailyTransactionCount_not: Int
  dailyTransactionCount_gt: Int
  dailyTransactionCount_lt: Int
  dailyTransactionCount_gte: Int
  dailyTransactionCount_lte: Int
  dailyTransactionCount_in: [Int!]
  dailyTransactionCount_not_in: [Int!]
  dailyDepositCount: Int
  dailyDepositCount_not: Int
  dailyDepositCount_gt: Int
  dailyDepositCount_lt: Int
  dailyDepositCount_gte: Int
  dailyDepositCount_lte: Int
  dailyDepositCount_in: [Int!]
  dailyDepositCount_not_in: [Int!]
  dailyWithdrawCount: Int
  dailyWithdrawCount_not: Int
  dailyWithdrawCount_gt: Int
  dailyWithdrawCount_lt: Int
  dailyWithdrawCount_gte: Int
  dailyWithdrawCount_lte: Int
  dailyWithdrawCount_in: [Int!]
  dailyWithdrawCount_not_in: [Int!]
  dailyBorrowCount: Int
  dailyBorrowCount_not: Int
  dailyBorrowCount_gt: Int
  dailyBorrowCount_lt: Int
  dailyBorrowCount_gte: Int
  dailyBorrowCount_lte: Int
  dailyBorrowCount_in: [Int!]
  dailyBorrowCount_not_in: [Int!]
  dailyRepayCount: Int
  dailyRepayCount_not: Int
  dailyRepayCount_gt: Int
  dailyRepayCount_lt: Int
  dailyRepayCount_gte: Int
  dailyRepayCount_lte: Int
  dailyRepayCount_in: [Int!]
  dailyRepayCount_not_in: [Int!]
  dailyLiquidateCount: Int
  dailyLiquidateCount_not: Int
  dailyLiquidateCount_gt: Int
  dailyLiquidateCount_lt: Int
  dailyLiquidateCount_gte: Int
  dailyLiquidateCount_lte: Int
  dailyLiquidateCount_in: [Int!]
  dailyLiquidateCount_not_in: [Int!]
  totalPoolCount: Int
  totalPoolCount_not: Int
  totalPoolCount_gt: Int
  totalPoolCount_lt: Int
  totalPoolCount_gte: Int
  totalPoolCount_lte: Int
  totalPoolCount_in: [Int!]
  totalPoolCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UsageMetricsDailySnapshot_filter]
  or: [UsageMetricsDailySnapshot_filter]
}

enum UsageMetricsDailySnapshot_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__lendingType
  protocol__riskType
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueDepositors
  protocol__cumulativeUniqueBorrowers
  protocol__cumulativeUniqueLiquidators
  protocol__cumulativeUniqueLiquidatees
  protocol__totalValueLockedUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__totalDepositBalanceUSD
  protocol__cumulativeDepositUSD
  protocol__totalBorrowBalanceUSD
  protocol__cumulativeBorrowUSD
  protocol__cumulativeLiquidateUSD
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol___priceOracle
  dailyActiveUsers
  cumulativeUniqueUsers
  dailyActiveDepositors
  cumulativeUniqueDepositors
  dailyActiveBorrowers
  cumulativeUniqueBorrowers
  dailyActiveLiquidators
  cumulativeUniqueLiquidators
  dailyActiveLiquidatees
  cumulativeUniqueLiquidatees
  dailyTransactionCount
  dailyDepositCount
  dailyWithdrawCount
  dailyBorrowCount
  dailyRepayCount
  dailyLiquidateCount
  totalPoolCount
  blockNumber
  timestamp
}

type UsageMetricsHourlySnapshot {
  """ { # of hours since Unix epoch time } """
  id: ID!
  """ Protocol this snapshot is associated with """
  protocol: LendingProtocol!
  """ Number of unique hourly active users """
  hourlyActiveUsers: Int!
  """ Number of cumulative unique users """
  cumulativeUniqueUsers: Int!
  """ Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. 
  """
  hourlyTransactionCount: Int!
  """ Total number of deposits in an hour """
  hourlyDepositCount: Int!
  """ Total number of withdrawals in an hour """
  hourlyWithdrawCount: Int!
  """ Total number of borrows/mints in an hour """
  hourlyBorrowCount: Int!
  """ Total number of repayments/burns in an hour """
  hourlyRepayCount: Int!
  """ Total number of liquidations in an hour """
  hourlyLiquidateCount: Int!
  """ Block number of this snapshot """
  blockNumber: BigInt!
  """ Timestamp of this snapshot """
  timestamp: BigInt!
}

input UsageMetricsHourlySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: LendingProtocol_filter
  hourlyActiveUsers: Int
  hourlyActiveUsers_not: Int
  hourlyActiveUsers_gt: Int
  hourlyActiveUsers_lt: Int
  hourlyActiveUsers_gte: Int
  hourlyActiveUsers_lte: Int
  hourlyActiveUsers_in: [Int!]
  hourlyActiveUsers_not_in: [Int!]
  cumulativeUniqueUsers: Int
  cumulativeUniqueUsers_not: Int
  cumulativeUniqueUsers_gt: Int
  cumulativeUniqueUsers_lt: Int
  cumulativeUniqueUsers_gte: Int
  cumulativeUniqueUsers_lte: Int
  cumulativeUniqueUsers_in: [Int!]
  cumulativeUniqueUsers_not_in: [Int!]
  hourlyTransactionCount: Int
  hourlyTransactionCount_not: Int
  hourlyTransactionCount_gt: Int
  hourlyTransactionCount_lt: Int
  hourlyTransactionCount_gte: Int
  hourlyTransactionCount_lte: Int
  hourlyTransactionCount_in: [Int!]
  hourlyTransactionCount_not_in: [Int!]
  hourlyDepositCount: Int
  hourlyDepositCount_not: Int
  hourlyDepositCount_gt: Int
  hourlyDepositCount_lt: Int
  hourlyDepositCount_gte: Int
  hourlyDepositCount_lte: Int
  hourlyDepositCount_in: [Int!]
  hourlyDepositCount_not_in: [Int!]
  hourlyWithdrawCount: Int
  hourlyWithdrawCount_not: Int
  hourlyWithdrawCount_gt: Int
  hourlyWithdrawCount_lt: Int
  hourlyWithdrawCount_gte: Int
  hourlyWithdrawCount_lte: Int
  hourlyWithdrawCount_in: [Int!]
  hourlyWithdrawCount_not_in: [Int!]
  hourlyBorrowCount: Int
  hourlyBorrowCount_not: Int
  hourlyBorrowCount_gt: Int
  hourlyBorrowCount_lt: Int
  hourlyBorrowCount_gte: Int
  hourlyBorrowCount_lte: Int
  hourlyBorrowCount_in: [Int!]
  hourlyBorrowCount_not_in: [Int!]
  hourlyRepayCount: Int
  hourlyRepayCount_not: Int
  hourlyRepayCount_gt: Int
  hourlyRepayCount_lt: Int
  hourlyRepayCount_gte: Int
  hourlyRepayCount_lte: Int
  hourlyRepayCount_in: [Int!]
  hourlyRepayCount_not_in: [Int!]
  hourlyLiquidateCount: Int
  hourlyLiquidateCount_not: Int
  hourlyLiquidateCount_gt: Int
  hourlyLiquidateCount_lt: Int
  hourlyLiquidateCount_gte: Int
  hourlyLiquidateCount_lte: Int
  hourlyLiquidateCount_in: [Int!]
  hourlyLiquidateCount_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UsageMetricsHourlySnapshot_filter]
  or: [UsageMetricsHourlySnapshot_filter]
}

enum UsageMetricsHourlySnapshot_orderBy {
  id
  protocol
  protocol__id
  protocol__name
  protocol__slug
  protocol__schemaVersion
  protocol__subgraphVersion
  protocol__methodologyVersion
  protocol__network
  protocol__type
  protocol__lendingType
  protocol__riskType
  protocol__cumulativeUniqueUsers
  protocol__cumulativeUniqueDepositors
  protocol__cumulativeUniqueBorrowers
  protocol__cumulativeUniqueLiquidators
  protocol__cumulativeUniqueLiquidatees
  protocol__totalValueLockedUSD
  protocol__protocolControlledValueUSD
  protocol__cumulativeSupplySideRevenueUSD
  protocol__cumulativeProtocolSideRevenueUSD
  protocol__cumulativeTotalRevenueUSD
  protocol__totalDepositBalanceUSD
  protocol__cumulativeDepositUSD
  protocol__totalBorrowBalanceUSD
  protocol__cumulativeBorrowUSD
  protocol__cumulativeLiquidateUSD
  protocol__totalPoolCount
  protocol__openPositionCount
  protocol__cumulativePositionCount
  protocol___priceOracle
  hourlyActiveUsers
  cumulativeUniqueUsers
  hourlyTransactionCount
  hourlyDepositCount
  hourlyWithdrawCount
  hourlyBorrowCount
  hourlyRepayCount
  hourlyLiquidateCount
  blockNumber
  timestamp
}

type Withdraw {
  """ { Transaction hash }-{ Log index }"""
  id: ID!
  """ Transaction hash of the transaction that emitted this event """
  hash: String!
  """ Nonce of the transaction that emitted this event """
  nonce: BigInt!
  """ Event log index. For transactions that don't emit event, create arbitrary index starting from 0 
  """
  logIndex: Int!
  """ Block number of this event """
  blockNumber: BigInt!
  """ Timestamp of this event """
  timestamp: BigInt!
  """ Account that withdrew tokens """
  account: Account!
  """ The market tokens are withdrew from """
  market: Market!
  """ The user position changed by this event """
  position: Position!
  """ Token withdrawn """
  asset: Token!
  """ Amount of token withdrawn in native units """
  amount: BigInt!
  """ Amount of token withdrawn in USD """
  amountUSD: BigDecimal!
}

input Withdraw_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: String
  hash_not: String
  hash_gt: String
  hash_lt: String
  hash_gte: String
  hash_lte: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_contains: String
  hash_contains_nocase: String
  hash_not_contains: String
  hash_not_contains_nocase: String
  hash_starts_with: String
  hash_starts_with_nocase: String
  hash_not_starts_with: String
  hash_not_starts_with_nocase: String
  hash_ends_with: String
  hash_ends_with_nocase: String
  hash_not_ends_with: String
  hash_not_ends_with_nocase: String
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  logIndex: Int
  logIndex_not: Int
  logIndex_gt: Int
  logIndex_lt: Int
  logIndex_gte: Int
  logIndex_lte: Int
  logIndex_in: [Int!]
  logIndex_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  market: String
  market_not: String
  market_gt: String
  market_lt: String
  market_gte: String
  market_lte: String
  market_in: [String!]
  market_not_in: [String!]
  market_contains: String
  market_contains_nocase: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_: Market_filter
  position: String
  position_not: String
  position_gt: String
  position_lt: String
  position_gte: String
  position_lte: String
  position_in: [String!]
  position_not_in: [String!]
  position_contains: String
  position_contains_nocase: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_: Position_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Token_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  amountUSD: BigDecimal
  amountUSD_not: BigDecimal
  amountUSD_gt: BigDecimal
  amountUSD_lt: BigDecimal
  amountUSD_gte: BigDecimal
  amountUSD_lte: BigDecimal
  amountUSD_in: [BigDecimal!]
  amountUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Withdraw_filter]
  or: [Withdraw_filter]
}

enum Withdraw_orderBy {
  id
  hash
  nonce
  logIndex
  blockNumber
  timestamp
  account
  account__id
  account__positionCount
  account__openPositionCount
  account__closedPositionCount
  account__depositCount
  account__withdrawCount
  account__borrowCount
  account__repayCount
  account__liquidateCount
  account__liquidationCount
  market
  market__id
  market__name
  market__isActive
  market__canUseAsCollateral
  market__canBorrowFrom
  market__maximumLTV
  market__liquidationThreshold
  market__liquidationPenalty
  market__totalValueLockedUSD
  market__cumulativeSupplySideRevenueUSD
  market__cumulativeProtocolSideRevenueUSD
  market__cumulativeTotalRevenueUSD
  market__totalDepositBalanceUSD
  market__cumulativeDepositUSD
  market__totalBorrowBalanceUSD
  market__cumulativeBorrowUSD
  market__cumulativeLiquidateUSD
  market__inputTokenBalance
  market__inputTokenPriceUSD
  market__outputTokenSupply
  market__outputTokenPriceUSD
  market__exchangeRate
  market__createdTimestamp
  market__createdBlockNumber
  market__positionCount
  market__openPositionCount
  market__closedPositionCount
  market__lendingPositionCount
  market__borrowingPositionCount
  market___reserveFactor
  market___liquidityIndex
  market___lastRewardsUpdated
  position
  position__id
  position__hashOpened
  position__hashClosed
  position__blockNumberOpened
  position__timestampOpened
  position__blockNumberClosed
  position__timestampClosed
  position__side
  position__isCollateral
  position__balance
  position__depositCount
  position__withdrawCount
  position__borrowCount
  position__repayCount
  position__liquidationCount
  asset
  asset__id
  asset__name
  asset__symbol
  asset__decimals
  asset__lastPriceUSD
  asset__lastPriceBlockNumber
  asset___type
  amount
  amountUSD
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}