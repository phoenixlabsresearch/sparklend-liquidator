import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import type { GetMeshOptions } from '@graphql-mesh/runtime';
import type { YamlConfig } from '@graphql-mesh/types';
import { MeshHTTPHandler } from '@graphql-mesh/http';
import { ExecuteMeshFn, SubscribeMeshFn, MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import type { GnosisPrimaryTypes } from './sources/gnosisPrimary/types';
import type { EthereumPrimaryTypes } from './sources/ethereumPrimary/types';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export type RequireFields<T, K extends keyof T> = Omit<T, K> & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    gnosisPrimaryBigDecimal: any;
    BigInt: any;
    gnosisPrimaryBytes: any;
    gnosisPrimaryInt8: any;
    ethereumPrimaryBigDecimal: any;
    ethereumPrimaryBytes: any;
    ethereumPrimaryInt8: any;
};
export type Query = {
    gnosisPrimarytoken?: Maybe<gnosisPrimaryToken>;
    gnosisPrimarytokens: Array<gnosisPrimaryToken>;
    gnosisPrimaryrewardToken?: Maybe<gnosisPrimaryRewardToken>;
    gnosisPrimaryrewardTokens: Array<gnosisPrimaryRewardToken>;
    gnosisPrimaryinterestRate?: Maybe<gnosisPrimaryInterestRate>;
    gnosisPrimaryinterestRates: Array<gnosisPrimaryInterestRate>;
    gnosisPrimaryfee?: Maybe<gnosisPrimaryFee>;
    gnosisPrimaryfees: Array<gnosisPrimaryFee>;
    gnosisPrimaryrevenueDetail?: Maybe<gnosisPrimaryRevenueDetail>;
    gnosisPrimaryrevenueDetails: Array<gnosisPrimaryRevenueDetail>;
    gnosisPrimaryoracle?: Maybe<gnosisPrimaryOracle>;
    gnosisPrimaryoracles: Array<gnosisPrimaryOracle>;
    gnosisPrimarylendingProtocol?: Maybe<gnosisPrimaryLendingProtocol>;
    gnosisPrimarylendingProtocols: Array<gnosisPrimaryLendingProtocol>;
    gnosisPrimarymarketList?: Maybe<gnosisPrimary_MarketList>;
    gnosisPrimarymarketLists: Array<gnosisPrimary_MarketList>;
    gnosisPrimaryusageMetricsDailySnapshot?: Maybe<gnosisPrimaryUsageMetricsDailySnapshot>;
    gnosisPrimaryusageMetricsDailySnapshots: Array<gnosisPrimaryUsageMetricsDailySnapshot>;
    gnosisPrimaryusageMetricsHourlySnapshot?: Maybe<gnosisPrimaryUsageMetricsHourlySnapshot>;
    gnosisPrimaryusageMetricsHourlySnapshots: Array<gnosisPrimaryUsageMetricsHourlySnapshot>;
    gnosisPrimaryfinancialsDailySnapshot?: Maybe<gnosisPrimaryFinancialsDailySnapshot>;
    gnosisPrimaryfinancialsDailySnapshots: Array<gnosisPrimaryFinancialsDailySnapshot>;
    gnosisPrimarymarket?: Maybe<gnosisPrimaryMarket>;
    gnosisPrimarymarkets: Array<gnosisPrimaryMarket>;
    gnosisPrimarymarketDailySnapshot?: Maybe<gnosisPrimaryMarketDailySnapshot>;
    gnosisPrimarymarketDailySnapshots: Array<gnosisPrimaryMarketDailySnapshot>;
    gnosisPrimarymarketHourlySnapshot?: Maybe<gnosisPrimaryMarketHourlySnapshot>;
    gnosisPrimarymarketHourlySnapshots: Array<gnosisPrimaryMarketHourlySnapshot>;
    gnosisPrimaryaccount?: Maybe<gnosisPrimaryAccount>;
    gnosisPrimaryaccounts: Array<gnosisPrimaryAccount>;
    gnosisPrimaryposition?: Maybe<gnosisPrimaryPosition>;
    gnosisPrimarypositions: Array<gnosisPrimaryPosition>;
    gnosisPrimarypositionSnapshot?: Maybe<gnosisPrimaryPositionSnapshot>;
    gnosisPrimarypositionSnapshots: Array<gnosisPrimaryPositionSnapshot>;
    gnosisPrimaryactiveAccount?: Maybe<gnosisPrimary_ActiveAccount>;
    gnosisPrimaryactiveAccounts: Array<gnosisPrimary_ActiveAccount>;
    gnosisPrimarypositionCounter?: Maybe<gnosisPrimary_PositionCounter>;
    gnosisPrimarypositionCounters: Array<gnosisPrimary_PositionCounter>;
    gnosisPrimarydeposit?: Maybe<gnosisPrimaryDeposit>;
    gnosisPrimarydeposits: Array<gnosisPrimaryDeposit>;
    gnosisPrimarywithdraw?: Maybe<gnosisPrimaryWithdraw>;
    gnosisPrimarywithdraws: Array<gnosisPrimaryWithdraw>;
    gnosisPrimaryborrow?: Maybe<gnosisPrimaryBorrow>;
    gnosisPrimaryborrows: Array<gnosisPrimaryBorrow>;
    gnosisPrimaryrepay?: Maybe<gnosisPrimaryRepay>;
    gnosisPrimaryrepays: Array<gnosisPrimaryRepay>;
    gnosisPrimaryliquidate?: Maybe<gnosisPrimaryLiquidate>;
    gnosisPrimaryliquidates: Array<gnosisPrimaryLiquidate>;
    gnosisPrimarytransfer?: Maybe<gnosisPrimaryTransfer>;
    gnosisPrimarytransfers: Array<gnosisPrimaryTransfer>;
    gnosisPrimaryflashloan?: Maybe<gnosisPrimaryFlashloan>;
    gnosisPrimaryflashloans: Array<gnosisPrimaryFlashloan>;
    gnosisPrimarydefaultOracle?: Maybe<gnosisPrimary_DefaultOracle>;
    gnosisPrimarydefaultOracles: Array<gnosisPrimary_DefaultOracle>;
    gnosisPrimaryflashLoanPremium?: Maybe<gnosisPrimary_FlashLoanPremium>;
    gnosisPrimaryflashLoanPremiums: Array<gnosisPrimary_FlashLoanPremium>;
    gnosisPrimaryprotocol?: Maybe<gnosisPrimaryProtocol>;
    gnosisPrimaryprotocols: Array<gnosisPrimaryProtocol>;
    gnosisPrimaryevent?: Maybe<gnosisPrimaryEvent>;
    gnosisPrimaryevents: Array<gnosisPrimaryEvent>;
    /** Access to subgraph metadata */
    gnosisPrimary_meta?: Maybe<gnosisPrimary_Meta_>;
    ethereumPrimarytoken?: Maybe<ethereumPrimaryToken>;
    ethereumPrimarytokens: Array<ethereumPrimaryToken>;
    ethereumPrimaryrewardToken?: Maybe<ethereumPrimaryRewardToken>;
    ethereumPrimaryrewardTokens: Array<ethereumPrimaryRewardToken>;
    ethereumPrimaryinterestRate?: Maybe<ethereumPrimaryInterestRate>;
    ethereumPrimaryinterestRates: Array<ethereumPrimaryInterestRate>;
    ethereumPrimaryfee?: Maybe<ethereumPrimaryFee>;
    ethereumPrimaryfees: Array<ethereumPrimaryFee>;
    ethereumPrimaryrevenueDetail?: Maybe<ethereumPrimaryRevenueDetail>;
    ethereumPrimaryrevenueDetails: Array<ethereumPrimaryRevenueDetail>;
    ethereumPrimaryoracle?: Maybe<ethereumPrimaryOracle>;
    ethereumPrimaryoracles: Array<ethereumPrimaryOracle>;
    ethereumPrimarylendingProtocol?: Maybe<ethereumPrimaryLendingProtocol>;
    ethereumPrimarylendingProtocols: Array<ethereumPrimaryLendingProtocol>;
    ethereumPrimarymarketList?: Maybe<ethereumPrimary_MarketList>;
    ethereumPrimarymarketLists: Array<ethereumPrimary_MarketList>;
    ethereumPrimaryusageMetricsDailySnapshot?: Maybe<ethereumPrimaryUsageMetricsDailySnapshot>;
    ethereumPrimaryusageMetricsDailySnapshots: Array<ethereumPrimaryUsageMetricsDailySnapshot>;
    ethereumPrimaryusageMetricsHourlySnapshot?: Maybe<ethereumPrimaryUsageMetricsHourlySnapshot>;
    ethereumPrimaryusageMetricsHourlySnapshots: Array<ethereumPrimaryUsageMetricsHourlySnapshot>;
    ethereumPrimaryfinancialsDailySnapshot?: Maybe<ethereumPrimaryFinancialsDailySnapshot>;
    ethereumPrimaryfinancialsDailySnapshots: Array<ethereumPrimaryFinancialsDailySnapshot>;
    ethereumPrimarymarket?: Maybe<ethereumPrimaryMarket>;
    ethereumPrimarymarkets: Array<ethereumPrimaryMarket>;
    ethereumPrimarymarketDailySnapshot?: Maybe<ethereumPrimaryMarketDailySnapshot>;
    ethereumPrimarymarketDailySnapshots: Array<ethereumPrimaryMarketDailySnapshot>;
    ethereumPrimarymarketHourlySnapshot?: Maybe<ethereumPrimaryMarketHourlySnapshot>;
    ethereumPrimarymarketHourlySnapshots: Array<ethereumPrimaryMarketHourlySnapshot>;
    ethereumPrimaryaccount?: Maybe<ethereumPrimaryAccount>;
    ethereumPrimaryaccounts: Array<ethereumPrimaryAccount>;
    ethereumPrimaryposition?: Maybe<ethereumPrimaryPosition>;
    ethereumPrimarypositions: Array<ethereumPrimaryPosition>;
    ethereumPrimarypositionSnapshot?: Maybe<ethereumPrimaryPositionSnapshot>;
    ethereumPrimarypositionSnapshots: Array<ethereumPrimaryPositionSnapshot>;
    ethereumPrimaryactiveAccount?: Maybe<ethereumPrimary_ActiveAccount>;
    ethereumPrimaryactiveAccounts: Array<ethereumPrimary_ActiveAccount>;
    ethereumPrimarypositionCounter?: Maybe<ethereumPrimary_PositionCounter>;
    ethereumPrimarypositionCounters: Array<ethereumPrimary_PositionCounter>;
    ethereumPrimarydeposit?: Maybe<ethereumPrimaryDeposit>;
    ethereumPrimarydeposits: Array<ethereumPrimaryDeposit>;
    ethereumPrimarywithdraw?: Maybe<ethereumPrimaryWithdraw>;
    ethereumPrimarywithdraws: Array<ethereumPrimaryWithdraw>;
    ethereumPrimaryborrow?: Maybe<ethereumPrimaryBorrow>;
    ethereumPrimaryborrows: Array<ethereumPrimaryBorrow>;
    ethereumPrimaryrepay?: Maybe<ethereumPrimaryRepay>;
    ethereumPrimaryrepays: Array<ethereumPrimaryRepay>;
    ethereumPrimaryliquidate?: Maybe<ethereumPrimaryLiquidate>;
    ethereumPrimaryliquidates: Array<ethereumPrimaryLiquidate>;
    ethereumPrimarytransfer?: Maybe<ethereumPrimaryTransfer>;
    ethereumPrimarytransfers: Array<ethereumPrimaryTransfer>;
    ethereumPrimaryflashloan?: Maybe<ethereumPrimaryFlashloan>;
    ethereumPrimaryflashloans: Array<ethereumPrimaryFlashloan>;
    ethereumPrimarydefaultOracle?: Maybe<ethereumPrimary_DefaultOracle>;
    ethereumPrimarydefaultOracles: Array<ethereumPrimary_DefaultOracle>;
    ethereumPrimaryflashLoanPremium?: Maybe<ethereumPrimary_FlashLoanPremium>;
    ethereumPrimaryflashLoanPremiums: Array<ethereumPrimary_FlashLoanPremium>;
    ethereumPrimaryprotocol?: Maybe<ethereumPrimaryProtocol>;
    ethereumPrimaryprotocols: Array<ethereumPrimaryProtocol>;
    ethereumPrimaryevent?: Maybe<ethereumPrimaryEvent>;
    ethereumPrimaryevents: Array<ethereumPrimaryEvent>;
    /** Access to subgraph metadata */
    ethereumPrimary_meta?: Maybe<ethereumPrimary_Meta_>;
};
export type QuerygnosisPrimarytokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarytokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryToken_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryrewardTokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRewardToken_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryinterestRateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryinterestRatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryInterestRate_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryfeeArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryfeesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFee_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryrevenueDetailArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryrevenueDetailsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRevenueDetail_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRevenueDetail_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryoracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryoraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryOracle_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryOracle_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarylendingProtocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarylendingProtocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLendingProtocol_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketListArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketListsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_MarketList_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_MarketList_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryusageMetricsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryusageMetricsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryusageMetricsHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryusageMetricsHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryfinancialsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryfinancialsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarket_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarketDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarketDailySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarymarketHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarketHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarketHourlySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryaccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryaccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryAccount_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryAccount_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarypositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarypositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPosition_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarypositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarypositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPositionSnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryactiveAccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryactiveAccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_ActiveAccount_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_ActiveAccount_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarypositionCounterArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarypositionCountersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_PositionCounter_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_PositionCounter_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarydepositArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarydepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryDeposit_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarywithdrawArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarywithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryWithdraw_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryborrowArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryBorrow_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryrepayArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRepay_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryliquidateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLiquidate_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarytransferArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarytransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryTransfer_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryflashloanArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFlashloan_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarydefaultOracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimarydefaultOraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_DefaultOracle_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_DefaultOracle_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryflashLoanPremiumArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryflashLoanPremiumsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_FlashLoanPremium_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_FlashLoanPremium_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryprotocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryprotocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryProtocol_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryProtocol_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryeventArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimaryeventsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryEvent_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryEvent_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type QuerygnosisPrimary_metaArgs = {
    block?: InputMaybe<gnosisPrimaryBlock_height>;
};
export type QueryethereumPrimarytokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarytokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryToken_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryrewardTokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRewardToken_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryinterestRateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryinterestRatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryInterestRate_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryfeeArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryfeesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFee_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryrevenueDetailArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryrevenueDetailsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRevenueDetail_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRevenueDetail_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryoracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryoraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryOracle_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryOracle_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarylendingProtocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarylendingProtocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLendingProtocol_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketListArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketListsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_MarketList_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_MarketList_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryusageMetricsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryusageMetricsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryusageMetricsHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryusageMetricsHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryfinancialsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryfinancialsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarket_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarketDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarketDailySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarymarketHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarketHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarketHourlySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryaccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryaccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryAccount_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryAccount_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarypositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarypositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPosition_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarypositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarypositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPositionSnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryactiveAccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryactiveAccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_ActiveAccount_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_ActiveAccount_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarypositionCounterArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarypositionCountersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_PositionCounter_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_PositionCounter_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarydepositArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarydepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryDeposit_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarywithdrawArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarywithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryWithdraw_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryborrowArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryBorrow_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryrepayArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRepay_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryliquidateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLiquidate_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarytransferArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarytransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryTransfer_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryflashloanArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFlashloan_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarydefaultOracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimarydefaultOraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_DefaultOracle_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_DefaultOracle_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryflashLoanPremiumArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryflashLoanPremiumsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_FlashLoanPremium_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_FlashLoanPremium_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryprotocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryprotocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryProtocol_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryProtocol_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryeventArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimaryeventsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryEvent_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryEvent_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type QueryethereumPrimary_metaArgs = {
    block?: InputMaybe<ethereumPrimaryBlock_height>;
};
export type Subscription = {
    gnosisPrimarytoken?: Maybe<gnosisPrimaryToken>;
    gnosisPrimarytokens: Array<gnosisPrimaryToken>;
    gnosisPrimaryrewardToken?: Maybe<gnosisPrimaryRewardToken>;
    gnosisPrimaryrewardTokens: Array<gnosisPrimaryRewardToken>;
    gnosisPrimaryinterestRate?: Maybe<gnosisPrimaryInterestRate>;
    gnosisPrimaryinterestRates: Array<gnosisPrimaryInterestRate>;
    gnosisPrimaryfee?: Maybe<gnosisPrimaryFee>;
    gnosisPrimaryfees: Array<gnosisPrimaryFee>;
    gnosisPrimaryrevenueDetail?: Maybe<gnosisPrimaryRevenueDetail>;
    gnosisPrimaryrevenueDetails: Array<gnosisPrimaryRevenueDetail>;
    gnosisPrimaryoracle?: Maybe<gnosisPrimaryOracle>;
    gnosisPrimaryoracles: Array<gnosisPrimaryOracle>;
    gnosisPrimarylendingProtocol?: Maybe<gnosisPrimaryLendingProtocol>;
    gnosisPrimarylendingProtocols: Array<gnosisPrimaryLendingProtocol>;
    gnosisPrimarymarketList?: Maybe<gnosisPrimary_MarketList>;
    gnosisPrimarymarketLists: Array<gnosisPrimary_MarketList>;
    gnosisPrimaryusageMetricsDailySnapshot?: Maybe<gnosisPrimaryUsageMetricsDailySnapshot>;
    gnosisPrimaryusageMetricsDailySnapshots: Array<gnosisPrimaryUsageMetricsDailySnapshot>;
    gnosisPrimaryusageMetricsHourlySnapshot?: Maybe<gnosisPrimaryUsageMetricsHourlySnapshot>;
    gnosisPrimaryusageMetricsHourlySnapshots: Array<gnosisPrimaryUsageMetricsHourlySnapshot>;
    gnosisPrimaryfinancialsDailySnapshot?: Maybe<gnosisPrimaryFinancialsDailySnapshot>;
    gnosisPrimaryfinancialsDailySnapshots: Array<gnosisPrimaryFinancialsDailySnapshot>;
    gnosisPrimarymarket?: Maybe<gnosisPrimaryMarket>;
    gnosisPrimarymarkets: Array<gnosisPrimaryMarket>;
    gnosisPrimarymarketDailySnapshot?: Maybe<gnosisPrimaryMarketDailySnapshot>;
    gnosisPrimarymarketDailySnapshots: Array<gnosisPrimaryMarketDailySnapshot>;
    gnosisPrimarymarketHourlySnapshot?: Maybe<gnosisPrimaryMarketHourlySnapshot>;
    gnosisPrimarymarketHourlySnapshots: Array<gnosisPrimaryMarketHourlySnapshot>;
    gnosisPrimaryaccount?: Maybe<gnosisPrimaryAccount>;
    gnosisPrimaryaccounts: Array<gnosisPrimaryAccount>;
    gnosisPrimaryposition?: Maybe<gnosisPrimaryPosition>;
    gnosisPrimarypositions: Array<gnosisPrimaryPosition>;
    gnosisPrimarypositionSnapshot?: Maybe<gnosisPrimaryPositionSnapshot>;
    gnosisPrimarypositionSnapshots: Array<gnosisPrimaryPositionSnapshot>;
    gnosisPrimaryactiveAccount?: Maybe<gnosisPrimary_ActiveAccount>;
    gnosisPrimaryactiveAccounts: Array<gnosisPrimary_ActiveAccount>;
    gnosisPrimarypositionCounter?: Maybe<gnosisPrimary_PositionCounter>;
    gnosisPrimarypositionCounters: Array<gnosisPrimary_PositionCounter>;
    gnosisPrimarydeposit?: Maybe<gnosisPrimaryDeposit>;
    gnosisPrimarydeposits: Array<gnosisPrimaryDeposit>;
    gnosisPrimarywithdraw?: Maybe<gnosisPrimaryWithdraw>;
    gnosisPrimarywithdraws: Array<gnosisPrimaryWithdraw>;
    gnosisPrimaryborrow?: Maybe<gnosisPrimaryBorrow>;
    gnosisPrimaryborrows: Array<gnosisPrimaryBorrow>;
    gnosisPrimaryrepay?: Maybe<gnosisPrimaryRepay>;
    gnosisPrimaryrepays: Array<gnosisPrimaryRepay>;
    gnosisPrimaryliquidate?: Maybe<gnosisPrimaryLiquidate>;
    gnosisPrimaryliquidates: Array<gnosisPrimaryLiquidate>;
    gnosisPrimarytransfer?: Maybe<gnosisPrimaryTransfer>;
    gnosisPrimarytransfers: Array<gnosisPrimaryTransfer>;
    gnosisPrimaryflashloan?: Maybe<gnosisPrimaryFlashloan>;
    gnosisPrimaryflashloans: Array<gnosisPrimaryFlashloan>;
    gnosisPrimarydefaultOracle?: Maybe<gnosisPrimary_DefaultOracle>;
    gnosisPrimarydefaultOracles: Array<gnosisPrimary_DefaultOracle>;
    gnosisPrimaryflashLoanPremium?: Maybe<gnosisPrimary_FlashLoanPremium>;
    gnosisPrimaryflashLoanPremiums: Array<gnosisPrimary_FlashLoanPremium>;
    gnosisPrimaryprotocol?: Maybe<gnosisPrimaryProtocol>;
    gnosisPrimaryprotocols: Array<gnosisPrimaryProtocol>;
    gnosisPrimaryevent?: Maybe<gnosisPrimaryEvent>;
    gnosisPrimaryevents: Array<gnosisPrimaryEvent>;
    /** Access to subgraph metadata */
    gnosisPrimary_meta?: Maybe<gnosisPrimary_Meta_>;
    ethereumPrimarytoken?: Maybe<ethereumPrimaryToken>;
    ethereumPrimarytokens: Array<ethereumPrimaryToken>;
    ethereumPrimaryrewardToken?: Maybe<ethereumPrimaryRewardToken>;
    ethereumPrimaryrewardTokens: Array<ethereumPrimaryRewardToken>;
    ethereumPrimaryinterestRate?: Maybe<ethereumPrimaryInterestRate>;
    ethereumPrimaryinterestRates: Array<ethereumPrimaryInterestRate>;
    ethereumPrimaryfee?: Maybe<ethereumPrimaryFee>;
    ethereumPrimaryfees: Array<ethereumPrimaryFee>;
    ethereumPrimaryrevenueDetail?: Maybe<ethereumPrimaryRevenueDetail>;
    ethereumPrimaryrevenueDetails: Array<ethereumPrimaryRevenueDetail>;
    ethereumPrimaryoracle?: Maybe<ethereumPrimaryOracle>;
    ethereumPrimaryoracles: Array<ethereumPrimaryOracle>;
    ethereumPrimarylendingProtocol?: Maybe<ethereumPrimaryLendingProtocol>;
    ethereumPrimarylendingProtocols: Array<ethereumPrimaryLendingProtocol>;
    ethereumPrimarymarketList?: Maybe<ethereumPrimary_MarketList>;
    ethereumPrimarymarketLists: Array<ethereumPrimary_MarketList>;
    ethereumPrimaryusageMetricsDailySnapshot?: Maybe<ethereumPrimaryUsageMetricsDailySnapshot>;
    ethereumPrimaryusageMetricsDailySnapshots: Array<ethereumPrimaryUsageMetricsDailySnapshot>;
    ethereumPrimaryusageMetricsHourlySnapshot?: Maybe<ethereumPrimaryUsageMetricsHourlySnapshot>;
    ethereumPrimaryusageMetricsHourlySnapshots: Array<ethereumPrimaryUsageMetricsHourlySnapshot>;
    ethereumPrimaryfinancialsDailySnapshot?: Maybe<ethereumPrimaryFinancialsDailySnapshot>;
    ethereumPrimaryfinancialsDailySnapshots: Array<ethereumPrimaryFinancialsDailySnapshot>;
    ethereumPrimarymarket?: Maybe<ethereumPrimaryMarket>;
    ethereumPrimarymarkets: Array<ethereumPrimaryMarket>;
    ethereumPrimarymarketDailySnapshot?: Maybe<ethereumPrimaryMarketDailySnapshot>;
    ethereumPrimarymarketDailySnapshots: Array<ethereumPrimaryMarketDailySnapshot>;
    ethereumPrimarymarketHourlySnapshot?: Maybe<ethereumPrimaryMarketHourlySnapshot>;
    ethereumPrimarymarketHourlySnapshots: Array<ethereumPrimaryMarketHourlySnapshot>;
    ethereumPrimaryaccount?: Maybe<ethereumPrimaryAccount>;
    ethereumPrimaryaccounts: Array<ethereumPrimaryAccount>;
    ethereumPrimaryposition?: Maybe<ethereumPrimaryPosition>;
    ethereumPrimarypositions: Array<ethereumPrimaryPosition>;
    ethereumPrimarypositionSnapshot?: Maybe<ethereumPrimaryPositionSnapshot>;
    ethereumPrimarypositionSnapshots: Array<ethereumPrimaryPositionSnapshot>;
    ethereumPrimaryactiveAccount?: Maybe<ethereumPrimary_ActiveAccount>;
    ethereumPrimaryactiveAccounts: Array<ethereumPrimary_ActiveAccount>;
    ethereumPrimarypositionCounter?: Maybe<ethereumPrimary_PositionCounter>;
    ethereumPrimarypositionCounters: Array<ethereumPrimary_PositionCounter>;
    ethereumPrimarydeposit?: Maybe<ethereumPrimaryDeposit>;
    ethereumPrimarydeposits: Array<ethereumPrimaryDeposit>;
    ethereumPrimarywithdraw?: Maybe<ethereumPrimaryWithdraw>;
    ethereumPrimarywithdraws: Array<ethereumPrimaryWithdraw>;
    ethereumPrimaryborrow?: Maybe<ethereumPrimaryBorrow>;
    ethereumPrimaryborrows: Array<ethereumPrimaryBorrow>;
    ethereumPrimaryrepay?: Maybe<ethereumPrimaryRepay>;
    ethereumPrimaryrepays: Array<ethereumPrimaryRepay>;
    ethereumPrimaryliquidate?: Maybe<ethereumPrimaryLiquidate>;
    ethereumPrimaryliquidates: Array<ethereumPrimaryLiquidate>;
    ethereumPrimarytransfer?: Maybe<ethereumPrimaryTransfer>;
    ethereumPrimarytransfers: Array<ethereumPrimaryTransfer>;
    ethereumPrimaryflashloan?: Maybe<ethereumPrimaryFlashloan>;
    ethereumPrimaryflashloans: Array<ethereumPrimaryFlashloan>;
    ethereumPrimarydefaultOracle?: Maybe<ethereumPrimary_DefaultOracle>;
    ethereumPrimarydefaultOracles: Array<ethereumPrimary_DefaultOracle>;
    ethereumPrimaryflashLoanPremium?: Maybe<ethereumPrimary_FlashLoanPremium>;
    ethereumPrimaryflashLoanPremiums: Array<ethereumPrimary_FlashLoanPremium>;
    ethereumPrimaryprotocol?: Maybe<ethereumPrimaryProtocol>;
    ethereumPrimaryprotocols: Array<ethereumPrimaryProtocol>;
    ethereumPrimaryevent?: Maybe<ethereumPrimaryEvent>;
    ethereumPrimaryevents: Array<ethereumPrimaryEvent>;
    /** Access to subgraph metadata */
    ethereumPrimary_meta?: Maybe<ethereumPrimary_Meta_>;
};
export type SubscriptiongnosisPrimarytokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarytokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryToken_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryrewardTokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRewardToken_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryinterestRateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryinterestRatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryInterestRate_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryfeeArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryfeesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFee_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryrevenueDetailArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryrevenueDetailsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRevenueDetail_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRevenueDetail_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryoracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryoraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryOracle_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryOracle_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarylendingProtocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarylendingProtocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLendingProtocol_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketListArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketListsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_MarketList_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_MarketList_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryusageMetricsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryusageMetricsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryusageMetricsHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryusageMetricsHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryfinancialsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryfinancialsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarket_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarketDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarketDailySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarymarketHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarketHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarketHourlySnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryaccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryaccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryAccount_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryAccount_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarypositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarypositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPosition_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarypositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarypositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPositionSnapshot_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryactiveAccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryactiveAccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_ActiveAccount_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_ActiveAccount_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarypositionCounterArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarypositionCountersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_PositionCounter_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_PositionCounter_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarydepositArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarydepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryDeposit_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarywithdrawArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarywithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryWithdraw_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryborrowArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryBorrow_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryrepayArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRepay_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryliquidateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLiquidate_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarytransferArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarytransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryTransfer_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryflashloanArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFlashloan_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarydefaultOracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimarydefaultOraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_DefaultOracle_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_DefaultOracle_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryflashLoanPremiumArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryflashLoanPremiumsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimary_FlashLoanPremium_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimary_FlashLoanPremium_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryprotocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryprotocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryProtocol_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryProtocol_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryeventArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimaryeventsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryEvent_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryEvent_filter>;
    block?: InputMaybe<gnosisPrimaryBlock_height>;
    subgraphError?: gnosisPrimary_SubgraphErrorPolicy_;
};
export type SubscriptiongnosisPrimary_metaArgs = {
    block?: InputMaybe<gnosisPrimaryBlock_height>;
};
export type SubscriptionethereumPrimarytokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarytokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryToken_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryrewardTokenArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRewardToken_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryinterestRateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryinterestRatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryInterestRate_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryfeeArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryfeesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFee_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryrevenueDetailArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryrevenueDetailsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRevenueDetail_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRevenueDetail_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryoracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryoraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryOracle_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryOracle_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarylendingProtocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarylendingProtocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLendingProtocol_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketListArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketListsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_MarketList_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_MarketList_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryusageMetricsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryusageMetricsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryusageMetricsHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryusageMetricsHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryfinancialsDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryfinancialsDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarket_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketDailySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketDailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarketDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarketDailySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketHourlySnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarymarketHourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarketHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarketHourlySnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryaccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryaccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryAccount_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryAccount_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarypositionArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarypositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPosition_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarypositionSnapshotArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarypositionSnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPositionSnapshot_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryactiveAccountArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryactiveAccountsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_ActiveAccount_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_ActiveAccount_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarypositionCounterArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarypositionCountersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_PositionCounter_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_PositionCounter_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarydepositArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarydepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryDeposit_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarywithdrawArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarywithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryWithdraw_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryborrowArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryBorrow_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryrepayArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRepay_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryliquidateArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLiquidate_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarytransferArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarytransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryTransfer_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryflashloanArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFlashloan_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarydefaultOracleArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimarydefaultOraclesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_DefaultOracle_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_DefaultOracle_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryflashLoanPremiumArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryflashLoanPremiumsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimary_FlashLoanPremium_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimary_FlashLoanPremium_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryprotocolArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryprotocolsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryProtocol_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryProtocol_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryeventArgs = {
    id: Scalars['ID'];
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimaryeventsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryEvent_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryEvent_filter>;
    block?: InputMaybe<ethereumPrimaryBlock_height>;
    subgraphError?: ethereumPrimary_SubgraphErrorPolicy_;
};
export type SubscriptionethereumPrimary_metaArgs = {
    block?: InputMaybe<ethereumPrimaryBlock_height>;
};
export type gnosisPrimaryAccount = {
    /**  { Account address }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Number of positions this account has  */
    positionCount: Scalars['Int'];
    /**  All positions that belong to this account  */
    positions: Array<gnosisPrimaryPosition>;
    /**  Number of open positions this account has  */
    openPositionCount: Scalars['Int'];
    /**  Number of closed positions this account has  */
    closedPositionCount: Scalars['Int'];
    /**  Number of deposits this account made  */
    depositCount: Scalars['Int'];
    /**  All deposit events of this account  */
    deposits: Array<gnosisPrimaryDeposit>;
    /**  Number of withdrawals this account made  */
    withdrawCount: Scalars['Int'];
    /**  All withdraw events of this account  */
    withdraws: Array<gnosisPrimaryWithdraw>;
    /**  Number of borrows this account made  */
    borrowCount: Scalars['Int'];
    /**  All borrow events of this account  */
    borrows: Array<gnosisPrimaryBorrow>;
    /**  Number of repays this account made  */
    repayCount: Scalars['Int'];
    /**  All repay events of this account  */
    repays: Array<gnosisPrimaryRepay>;
    /**  Number of times this account liquidated a position  */
    liquidateCount: Scalars['Int'];
    /**  All liquidation events where this account was the liquidator  */
    liquidates: Array<gnosisPrimaryLiquidate>;
    /**  Number of times this account has been liquidated  */
    liquidationCount: Scalars['Int'];
    /**  All liquidation events where this account got liquidated  */
    liquidations: Array<gnosisPrimaryLiquidate>;
    /**  Number of times this account has transferred  */
    transferredCount: Scalars['Int'];
    /**  All transfer events where this account was the sender  */
    transfers: Array<gnosisPrimaryTransfer>;
    /**  Number of times this account has received a transfer  */
    receivedCount: Scalars['Int'];
    /**  All transfer events where this account was the receiver  */
    receives: Array<gnosisPrimaryTransfer>;
    /**  Number of times this account has executed a flashloan  */
    flashloanCount: Scalars['Int'];
    /**  All flashloan events where this account executed it  */
    flashloans: Array<gnosisPrimaryFlashloan>;
    /**  The amount of rewards claimed by this account in USD (use the USD value at the time of claiming)  */
    rewardsClaimedUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Markets that the account is using as collateral  */
    _enabledCollaterals?: Maybe<Array<gnosisPrimaryMarket>>;
    /**  efficient mode flag  */
    _eMode?: Maybe<Scalars['Boolean']>;
};
export type gnosisPrimaryAccountpositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPosition_filter>;
};
export type gnosisPrimaryAccountdepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryDeposit_filter>;
};
export type gnosisPrimaryAccountwithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryWithdraw_filter>;
};
export type gnosisPrimaryAccountborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryBorrow_filter>;
};
export type gnosisPrimaryAccountrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRepay_filter>;
};
export type gnosisPrimaryAccountliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLiquidate_filter>;
};
export type gnosisPrimaryAccountliquidationsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLiquidate_filter>;
};
export type gnosisPrimaryAccounttransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryTransfer_filter>;
};
export type gnosisPrimaryAccountreceivesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryTransfer_filter>;
};
export type gnosisPrimaryAccountflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFlashloan_filter>;
};
export type gnosisPrimaryAccount_enabledCollateralsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarket_filter>;
};
export type gnosisPrimaryAccount_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    positionCount?: InputMaybe<Scalars['Int']>;
    positionCount_not?: InputMaybe<Scalars['Int']>;
    positionCount_gt?: InputMaybe<Scalars['Int']>;
    positionCount_lt?: InputMaybe<Scalars['Int']>;
    positionCount_gte?: InputMaybe<Scalars['Int']>;
    positionCount_lte?: InputMaybe<Scalars['Int']>;
    positionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    positions_?: InputMaybe<gnosisPrimaryPosition_filter>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount?: InputMaybe<Scalars['Int']>;
    closedPositionCount_not?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    deposits_?: InputMaybe<gnosisPrimaryDeposit_filter>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdraws_?: InputMaybe<gnosisPrimaryWithdraw_filter>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrows_?: InputMaybe<gnosisPrimaryBorrow_filter>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repays_?: InputMaybe<gnosisPrimaryRepay_filter>;
    liquidateCount?: InputMaybe<Scalars['Int']>;
    liquidateCount_not?: InputMaybe<Scalars['Int']>;
    liquidateCount_gt?: InputMaybe<Scalars['Int']>;
    liquidateCount_lt?: InputMaybe<Scalars['Int']>;
    liquidateCount_gte?: InputMaybe<Scalars['Int']>;
    liquidateCount_lte?: InputMaybe<Scalars['Int']>;
    liquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidates_?: InputMaybe<gnosisPrimaryLiquidate_filter>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidations_?: InputMaybe<gnosisPrimaryLiquidate_filter>;
    transferredCount?: InputMaybe<Scalars['Int']>;
    transferredCount_not?: InputMaybe<Scalars['Int']>;
    transferredCount_gt?: InputMaybe<Scalars['Int']>;
    transferredCount_lt?: InputMaybe<Scalars['Int']>;
    transferredCount_gte?: InputMaybe<Scalars['Int']>;
    transferredCount_lte?: InputMaybe<Scalars['Int']>;
    transferredCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferredCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transfers_?: InputMaybe<gnosisPrimaryTransfer_filter>;
    receivedCount?: InputMaybe<Scalars['Int']>;
    receivedCount_not?: InputMaybe<Scalars['Int']>;
    receivedCount_gt?: InputMaybe<Scalars['Int']>;
    receivedCount_lt?: InputMaybe<Scalars['Int']>;
    receivedCount_gte?: InputMaybe<Scalars['Int']>;
    receivedCount_lte?: InputMaybe<Scalars['Int']>;
    receivedCount_in?: InputMaybe<Array<Scalars['Int']>>;
    receivedCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    receives_?: InputMaybe<gnosisPrimaryTransfer_filter>;
    flashloanCount?: InputMaybe<Scalars['Int']>;
    flashloanCount_not?: InputMaybe<Scalars['Int']>;
    flashloanCount_gt?: InputMaybe<Scalars['Int']>;
    flashloanCount_lt?: InputMaybe<Scalars['Int']>;
    flashloanCount_gte?: InputMaybe<Scalars['Int']>;
    flashloanCount_lte?: InputMaybe<Scalars['Int']>;
    flashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloans_?: InputMaybe<gnosisPrimaryFlashloan_filter>;
    rewardsClaimedUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rewardsClaimedUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rewardsClaimedUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rewardsClaimedUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rewardsClaimedUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rewardsClaimedUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rewardsClaimedUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardsClaimedUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    _enabledCollaterals?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_not?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_contains?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_not_contains?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_?: InputMaybe<gnosisPrimaryMarket_filter>;
    _eMode?: InputMaybe<Scalars['Boolean']>;
    _eMode_not?: InputMaybe<Scalars['Boolean']>;
    _eMode_in?: InputMaybe<Array<Scalars['Boolean']>>;
    _eMode_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryAccount_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryAccount_filter>>>;
};
export type gnosisPrimaryAccount_orderBy = 'id' | 'positionCount' | 'positions' | 'openPositionCount' | 'closedPositionCount' | 'depositCount' | 'deposits' | 'withdrawCount' | 'withdraws' | 'borrowCount' | 'borrows' | 'repayCount' | 'repays' | 'liquidateCount' | 'liquidates' | 'liquidationCount' | 'liquidations' | 'transferredCount' | 'transfers' | 'receivedCount' | 'receives' | 'flashloanCount' | 'flashloans' | 'rewardsClaimedUSD' | '_enabledCollaterals' | '_eMode';
export type gnosisPrimaryBlockChangedFilter = {
    number_gte: Scalars['Int'];
};
export type gnosisPrimaryBlock_height = {
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    number?: InputMaybe<Scalars['Int']>;
    number_gte?: InputMaybe<Scalars['Int']>;
};
export type gnosisPrimaryBorrow = gnosisPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that controls incurs debt in this transaction  */
    account: gnosisPrimaryAccount;
    /**  Account that receives the funds from the new debt  */
    accountActor?: Maybe<gnosisPrimaryAccount>;
    /**  The market tokens are borrowed/minted from  */
    market: gnosisPrimaryMarket;
    /**  The user position changed by this event  */
    position: gnosisPrimaryPosition;
    /**  Token borrowed  */
    asset: gnosisPrimaryToken;
    /**  Amount of token borrowed in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token borrowed in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryBorrow_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<gnosisPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<gnosisPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<gnosisPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryBorrow_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryBorrow_filter>>>;
};
export type gnosisPrimaryBorrow_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type gnosisPrimaryCollateralizationType = 
/**  Over collateralized protocols require users to put up more collateral than the amount borrowed.  */
'OVER_COLLATERALIZED'
/**  Protocols that allow users to borrow more than their collateral locked.   */
 | 'UNDER_COLLATERALIZED'
/**  Protocols that allow users to borrow without any collateral. Generally this protocol is KYC'd and only whitelist users can do this  */
 | 'UNCOLLATERALIZED';
export type gnosisPrimaryDeposit = gnosisPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /** Account where deposit was executed (e.g. a deposit on behalf of account) */
    account: gnosisPrimaryAccount;
    /**  Account that executed the deposit (e.g. a deposit on behalf of account)  */
    accountActor?: Maybe<gnosisPrimaryAccount>;
    /**  The market tokens are deposited to  */
    market: gnosisPrimaryMarket;
    /**  The user position changed by this event  */
    position: gnosisPrimaryPosition;
    /**  Token deposited  */
    asset: gnosisPrimaryToken;
    /**  Amount of token deposited in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token deposited in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryDeposit_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<gnosisPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<gnosisPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<gnosisPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryDeposit_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryDeposit_filter>>>;
};
export type gnosisPrimaryDeposit_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type gnosisPrimaryEvent = {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  The market tokens are deposited to  */
    market: gnosisPrimaryMarket;
    /**  Token deposited  */
    asset: gnosisPrimaryToken;
    /**  Amount of token deposited in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token deposited in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryEvent_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryEvent_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryEvent_filter>>>;
};
export type gnosisPrimaryEvent_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type gnosisPrimaryFee = {
    /**  { Fee type }  */
    id: Scalars['ID'];
    /**  Fee in percentage. E.g. 5.21% should be stored as 5.21  */
    rate?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  A flat fee in the native token. This may be a base fee in addition to the rate, or the only fee.  */
    flatFee?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  The type of fee (e.g. liquidation, admin, etc.)  */
    type: gnosisPrimaryFeeType;
};
export type gnosisPrimaryFeeType = 
/**  Fees from liquidations  */
'LIQUIDATION_FEE'
/**  Fees given to an admin  */
 | 'ADMIN_FEE'
/**  Fees that are taken by the protocol  */
 | 'PROTOCOL_FEE'
/**  Fee to mint an asset. Found mostly in CDPs  */
 | 'MINT_FEE'
/**  Fee taken on withdrawal. e.g. found in Euler  */
 | 'WITHDRAW_FEE'
/**  Flashloan Fees taken by the protocol  */
 | 'FLASHLOAN_PROTOCOL_FEE'
/**  Flashloan Fees taken by LP  */
 | 'FLASHLOAN_LP_FEE'
/**  Any fee not represented here. Please make a github issue for this to be added: https://github.com/messari/subgraphs/issues/new  */
 | 'OTHER';
export type gnosisPrimaryFee_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    rate?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rate_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    flatFee?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    flatFee_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    flatFee_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    flatFee_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    flatFee_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    flatFee_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    flatFee_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    flatFee_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    type?: InputMaybe<gnosisPrimaryFeeType>;
    type_not?: InputMaybe<gnosisPrimaryFeeType>;
    type_in?: InputMaybe<Array<gnosisPrimaryFeeType>>;
    type_not_in?: InputMaybe<Array<gnosisPrimaryFeeType>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryFee_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryFee_filter>>>;
};
export type gnosisPrimaryFee_orderBy = 'id' | 'rate' | 'flatFee' | 'type';
export type gnosisPrimaryFinancialsDailySnapshot = {
    /**  ID is # of days since Unix epoch time  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Number of days since Unix epoch time  */
    days: Scalars['Int'];
    /**  Protocol this snapshot is associated with  */
    protocol: gnosisPrimaryLendingProtocol;
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  Current TVL (Total Value Locked) of the entire protocol  */
    totalValueLockedUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
    protocolControlledValueUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP  */
    mintedTokenSupplies?: Maybe<Array<Scalars['BigInt']>>;
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    dailySupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    cumulativeSupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    dailyProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    cumulativeProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    dailyTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    cumulativeTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<gnosisPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets, in USD. Note this metric should be the same as TVL.  */
    totalDepositBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets deposited on a given day, in USD  */
    dailyDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets, in USD.  */
    totalBorrowBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets borrowed/minted on a given day, in USD.  */
    dailyBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination).  */
    cumulativeBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets liquidated on a given day, in USD.  */
    dailyLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given day, in USD.  */
    dailyWithdrawUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets repaid on a given day, in USD.  */
    dailyRepayUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets transferred on a given day, in USD.  */
    dailyTransferUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total flashloans executed on a given day, in USD.  */
    dailyFlashloanUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryFinancialsDailySnapshot_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    days?: InputMaybe<Scalars['Int']>;
    days_not?: InputMaybe<Scalars['Int']>;
    days_gt?: InputMaybe<Scalars['Int']>;
    days_lt?: InputMaybe<Scalars['Int']>;
    days_gte?: InputMaybe<Scalars['Int']>;
    days_lte?: InputMaybe<Scalars['Int']>;
    days_in?: InputMaybe<Array<Scalars['Int']>>;
    days_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    protocolControlledValueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    mintedTokenSupplies?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    dailySupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<gnosisPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyWithdrawUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyWithdrawUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyRepayUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyRepayUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyTransferUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyTransferUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyFlashloanUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyFlashloanUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>>>;
};
export type gnosisPrimaryFinancialsDailySnapshot_orderBy = 'id' | 'days' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'blockNumber' | 'timestamp' | 'totalValueLockedUSD' | 'protocolControlledValueUSD' | 'mintedTokenSupplies' | 'dailySupplySideRevenueUSD' | 'cumulativeSupplySideRevenueUSD' | 'dailyProtocolSideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'dailyTotalRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'dailyDepositUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'dailyBorrowUSD' | 'cumulativeBorrowUSD' | 'dailyLiquidateUSD' | 'cumulativeLiquidateUSD' | 'dailyWithdrawUSD' | 'dailyRepayUSD' | 'dailyTransferUSD' | 'dailyFlashloanUSD';
export type gnosisPrimaryFlashloan = gnosisPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that receives the funds from the flashloan  */
    account: gnosisPrimaryAccount;
    /**  Account that initiates the flashloan  */
    accountActor?: Maybe<gnosisPrimaryAccount>;
    /**  The market in which this flashloan is executed  */
    market: gnosisPrimaryMarket;
    /**  Asset borrowed  */
    asset: gnosisPrimaryToken;
    /**  Amount of asset borrowed in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of asset borrowed in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Amount of asset taken by protocol as a fee in native units  */
    feeAmount?: Maybe<Scalars['BigInt']>;
    /**  Amount of asset taken by protocol as a fee in USD  */
    feeAmountUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
};
export type gnosisPrimaryFlashloan_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<gnosisPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<gnosisPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    feeAmount?: InputMaybe<Scalars['BigInt']>;
    feeAmount_not?: InputMaybe<Scalars['BigInt']>;
    feeAmount_gt?: InputMaybe<Scalars['BigInt']>;
    feeAmount_lt?: InputMaybe<Scalars['BigInt']>;
    feeAmount_gte?: InputMaybe<Scalars['BigInt']>;
    feeAmount_lte?: InputMaybe<Scalars['BigInt']>;
    feeAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    feeAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    feeAmountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    feeAmountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    feeAmountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    feeAmountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    feeAmountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    feeAmountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    feeAmountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    feeAmountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryFlashloan_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryFlashloan_filter>>>;
};
export type gnosisPrimaryFlashloan_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD' | 'feeAmount' | 'feeAmountUSD';
export type gnosisPrimaryInterestRate = {
    /**  { Interest rate side }-{ Interest rate type }-{ Market ID }-{ Optional: Tranche }-{ Optional: # days/hours since epoch time }  */
    id: Scalars['ID'];
    /**  Interest rate in percentage APY. E.g. 5.21% should be stored as 5.21  */
    rate: Scalars['gnosisPrimaryBigDecimal'];
    /**  Duration of the loan in days. Only applies to fixed term lending (e.g. Notional)  */
    duration?: Maybe<Scalars['Int']>;
    /**  Maturity of the loan in block height. Only applies to fixed term lending (e.g. Notional)  */
    maturityBlock?: Maybe<Scalars['BigInt']>;
    /**  The party the interest is paid to / received from  */
    side: gnosisPrimaryInterestRateSide;
    /**  The type of interest rate (e.g. stable, fixed, variable, etc)  */
    type: gnosisPrimaryInterestRateType;
    /**  The level of debt priority at this interest rate  */
    tranche?: Maybe<gnosisPrimaryTranche>;
};
export type gnosisPrimaryInterestRateSide = 
/**  Interest rate accrued by lenders  */
'LENDER'
/**  Interest rate paid by borrowers  */
 | 'BORROWER';
export type gnosisPrimaryInterestRateType = 
/**  Stable interest rate (e.g. Aave)  */
'STABLE'
/**  Variable interest rate (e.g. Compound)  */
 | 'VARIABLE'
/**  Fixed interest rate (e.g. Notional)  */
 | 'FIXED';
export type gnosisPrimaryInterestRate_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    rate?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    rate_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rate_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    duration?: InputMaybe<Scalars['Int']>;
    duration_not?: InputMaybe<Scalars['Int']>;
    duration_gt?: InputMaybe<Scalars['Int']>;
    duration_lt?: InputMaybe<Scalars['Int']>;
    duration_gte?: InputMaybe<Scalars['Int']>;
    duration_lte?: InputMaybe<Scalars['Int']>;
    duration_in?: InputMaybe<Array<Scalars['Int']>>;
    duration_not_in?: InputMaybe<Array<Scalars['Int']>>;
    maturityBlock?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_not?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_gt?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_lt?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_gte?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_lte?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_in?: InputMaybe<Array<Scalars['BigInt']>>;
    maturityBlock_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    side?: InputMaybe<gnosisPrimaryInterestRateSide>;
    side_not?: InputMaybe<gnosisPrimaryInterestRateSide>;
    side_in?: InputMaybe<Array<gnosisPrimaryInterestRateSide>>;
    side_not_in?: InputMaybe<Array<gnosisPrimaryInterestRateSide>>;
    type?: InputMaybe<gnosisPrimaryInterestRateType>;
    type_not?: InputMaybe<gnosisPrimaryInterestRateType>;
    type_in?: InputMaybe<Array<gnosisPrimaryInterestRateType>>;
    type_not_in?: InputMaybe<Array<gnosisPrimaryInterestRateType>>;
    tranche?: InputMaybe<gnosisPrimaryTranche>;
    tranche_not?: InputMaybe<gnosisPrimaryTranche>;
    tranche_in?: InputMaybe<Array<gnosisPrimaryTranche>>;
    tranche_not_in?: InputMaybe<Array<gnosisPrimaryTranche>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryInterestRate_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryInterestRate_filter>>>;
};
export type gnosisPrimaryInterestRate_orderBy = 'id' | 'rate' | 'duration' | 'maturityBlock' | 'side' | 'type' | 'tranche';
export type gnosisPrimaryLendingProtocol = gnosisPrimaryProtocol & {
    /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Base name of the protocol, excluding transformations. e.g. Aave  */
    protocol: Scalars['String'];
    /**  Name of the protocol, including version. e.g. Aave v2  */
    name: Scalars['String'];
    /**  Slug of protocol, including version. e.g. aave-v2  */
    slug: Scalars['String'];
    /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
    schemaVersion: Scalars['String'];
    /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
    subgraphVersion: Scalars['String'];
    /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
    methodologyVersion: Scalars['String'];
    /**  The blockchain network this subgraph is indexing on  */
    network: gnosisPrimaryNetwork;
    /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
    type: gnosisPrimaryProtocolType;
    /**  The specific lending protocol type  */
    lendingType?: Maybe<gnosisPrimaryLendingType>;
    /**  The specific permissions required to lend in this protocol  */
    lenderPermissionType?: Maybe<gnosisPrimaryPermissionType>;
    /**  The specific permissions required to borrow from this protocol  */
    borrowerPermissionType?: Maybe<gnosisPrimaryPermissionType>;
    /**  The specific permissions required to create a pool (market) in this protocol  */
    poolCreatorPermissionType?: Maybe<gnosisPrimaryPermissionType>;
    /**  Risk type of the lending protocol  */
    riskType?: Maybe<gnosisPrimaryRiskType>;
    /**  The way a positions can be collateralized  */
    collateralizationType?: Maybe<gnosisPrimaryCollateralizationType>;
    /**  Tokens that can be minted. Only applies to CDP (usually stable coins)  */
    mintedTokens?: Maybe<Array<gnosisPrimaryToken>>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs.  */
    rewardTokens?: Maybe<Array<gnosisPrimaryRewardToken>>;
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Number of cumulative depositors  */
    cumulativeUniqueDepositors: Scalars['Int'];
    /**  Number of cumulative borrowers  */
    cumulativeUniqueBorrowers: Scalars['Int'];
    /**  Number of cumulative liquidators (accounts that performed liquidation)  */
    cumulativeUniqueLiquidators: Scalars['Int'];
    /**  Number of cumulative liquidatees (accounts that got liquidated)  */
    cumulativeUniqueLiquidatees: Scalars['Int'];
    /**  Current TVL (Total Value Locked) of the entire protocol  */
    totalValueLockedUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
    protocolControlledValueUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    cumulativeSupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    cumulativeProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    cumulativeTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All fees in the protocol. Fee should be in percentage format. e.g. 0.30% liquidation fee  */
    fees?: Maybe<Array<gnosisPrimaryFee>>;
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<gnosisPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets, in USD. Note this metric should be the same as TVL.  */
    totalDepositBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD.  */
    totalBorrowBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination).  */
    cumulativeBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP  */
    mintedTokenSupplies?: Maybe<Array<Scalars['BigInt']>>;
    /**  Total number of pools  */
    totalPoolCount: Scalars['Int'];
    /**  Total number of open positions  */
    openPositionCount: Scalars['Int'];
    /**  Total number of positions (open and closed)  */
    cumulativePositionCount: Scalars['Int'];
    /**  Total number of transactions  */
    transactionCount: Scalars['Int'];
    /**  Total number of deposits  */
    depositCount: Scalars['Int'];
    /**  Total number of withdrawals  */
    withdrawCount: Scalars['Int'];
    /**  Total number of borrows  */
    borrowCount: Scalars['Int'];
    /**  Total number of repayments  */
    repayCount: Scalars['Int'];
    /**  Total number of liquidations  */
    liquidationCount: Scalars['Int'];
    /**  Total number of transfers  */
    transferCount: Scalars['Int'];
    /**  Total number of flashloans  */
    flashloanCount: Scalars['Int'];
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /**  Daily usage metrics for this protocol  */
    dailyUsageMetrics: Array<gnosisPrimaryUsageMetricsDailySnapshot>;
    /**  Hourly usage metrics for this protocol  */
    hourlyUsageMetrics: Array<gnosisPrimaryUsageMetricsHourlySnapshot>;
    /**  Daily financial metrics for this protocol  */
    financialMetrics: Array<gnosisPrimaryFinancialsDailySnapshot>;
    /**  All markets that belong to this protocol  */
    markets: Array<gnosisPrimaryMarket>;
};
export type gnosisPrimaryLendingProtocolmintedTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryToken_filter>;
};
export type gnosisPrimaryLendingProtocolrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRewardToken_filter>;
};
export type gnosisPrimaryLendingProtocolfeesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFee_filter>;
};
export type gnosisPrimaryLendingProtocoldailyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>;
};
export type gnosisPrimaryLendingProtocolhourlyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>;
};
export type gnosisPrimaryLendingProtocolfinancialMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>;
};
export type gnosisPrimaryLendingProtocolmarketsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarket_filter>;
};
export type gnosisPrimaryLendingProtocol_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug?: InputMaybe<Scalars['String']>;
    slug_not?: InputMaybe<Scalars['String']>;
    slug_gt?: InputMaybe<Scalars['String']>;
    slug_lt?: InputMaybe<Scalars['String']>;
    slug_gte?: InputMaybe<Scalars['String']>;
    slug_lte?: InputMaybe<Scalars['String']>;
    slug_in?: InputMaybe<Array<Scalars['String']>>;
    slug_not_in?: InputMaybe<Array<Scalars['String']>>;
    slug_contains?: InputMaybe<Scalars['String']>;
    slug_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_not_contains?: InputMaybe<Scalars['String']>;
    slug_not_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_starts_with?: InputMaybe<Scalars['String']>;
    slug_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_starts_with?: InputMaybe<Scalars['String']>;
    slug_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_ends_with?: InputMaybe<Scalars['String']>;
    slug_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_ends_with?: InputMaybe<Scalars['String']>;
    slug_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion?: InputMaybe<Scalars['String']>;
    schemaVersion_not?: InputMaybe<Scalars['String']>;
    schemaVersion_gt?: InputMaybe<Scalars['String']>;
    schemaVersion_lt?: InputMaybe<Scalars['String']>;
    schemaVersion_gte?: InputMaybe<Scalars['String']>;
    schemaVersion_lte?: InputMaybe<Scalars['String']>;
    schemaVersion_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion?: InputMaybe<Scalars['String']>;
    subgraphVersion_not?: InputMaybe<Scalars['String']>;
    subgraphVersion_gt?: InputMaybe<Scalars['String']>;
    subgraphVersion_lt?: InputMaybe<Scalars['String']>;
    subgraphVersion_gte?: InputMaybe<Scalars['String']>;
    subgraphVersion_lte?: InputMaybe<Scalars['String']>;
    subgraphVersion_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion?: InputMaybe<Scalars['String']>;
    methodologyVersion_not?: InputMaybe<Scalars['String']>;
    methodologyVersion_gt?: InputMaybe<Scalars['String']>;
    methodologyVersion_lt?: InputMaybe<Scalars['String']>;
    methodologyVersion_gte?: InputMaybe<Scalars['String']>;
    methodologyVersion_lte?: InputMaybe<Scalars['String']>;
    methodologyVersion_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    network?: InputMaybe<gnosisPrimaryNetwork>;
    network_not?: InputMaybe<gnosisPrimaryNetwork>;
    network_in?: InputMaybe<Array<gnosisPrimaryNetwork>>;
    network_not_in?: InputMaybe<Array<gnosisPrimaryNetwork>>;
    type?: InputMaybe<gnosisPrimaryProtocolType>;
    type_not?: InputMaybe<gnosisPrimaryProtocolType>;
    type_in?: InputMaybe<Array<gnosisPrimaryProtocolType>>;
    type_not_in?: InputMaybe<Array<gnosisPrimaryProtocolType>>;
    lendingType?: InputMaybe<gnosisPrimaryLendingType>;
    lendingType_not?: InputMaybe<gnosisPrimaryLendingType>;
    lendingType_in?: InputMaybe<Array<gnosisPrimaryLendingType>>;
    lendingType_not_in?: InputMaybe<Array<gnosisPrimaryLendingType>>;
    lenderPermissionType?: InputMaybe<gnosisPrimaryPermissionType>;
    lenderPermissionType_not?: InputMaybe<gnosisPrimaryPermissionType>;
    lenderPermissionType_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    lenderPermissionType_not_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    borrowerPermissionType?: InputMaybe<gnosisPrimaryPermissionType>;
    borrowerPermissionType_not?: InputMaybe<gnosisPrimaryPermissionType>;
    borrowerPermissionType_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    borrowerPermissionType_not_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    poolCreatorPermissionType?: InputMaybe<gnosisPrimaryPermissionType>;
    poolCreatorPermissionType_not?: InputMaybe<gnosisPrimaryPermissionType>;
    poolCreatorPermissionType_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    poolCreatorPermissionType_not_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    riskType?: InputMaybe<gnosisPrimaryRiskType>;
    riskType_not?: InputMaybe<gnosisPrimaryRiskType>;
    riskType_in?: InputMaybe<Array<gnosisPrimaryRiskType>>;
    riskType_not_in?: InputMaybe<Array<gnosisPrimaryRiskType>>;
    collateralizationType?: InputMaybe<gnosisPrimaryCollateralizationType>;
    collateralizationType_not?: InputMaybe<gnosisPrimaryCollateralizationType>;
    collateralizationType_in?: InputMaybe<Array<gnosisPrimaryCollateralizationType>>;
    collateralizationType_not_in?: InputMaybe<Array<gnosisPrimaryCollateralizationType>>;
    mintedTokens?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_not?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_?: InputMaybe<gnosisPrimaryToken_filter>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<gnosisPrimaryRewardToken_filter>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    protocolControlledValueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    fees?: InputMaybe<Array<Scalars['String']>>;
    fees_not?: InputMaybe<Array<Scalars['String']>>;
    fees_contains?: InputMaybe<Array<Scalars['String']>>;
    fees_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    fees_not_contains?: InputMaybe<Array<Scalars['String']>>;
    fees_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    fees_?: InputMaybe<gnosisPrimaryFee_filter>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<gnosisPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    mintedTokenSupplies?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    totalPoolCount?: InputMaybe<Scalars['Int']>;
    totalPoolCount_not?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_not?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transactionCount?: InputMaybe<Scalars['Int']>;
    transactionCount_not?: InputMaybe<Scalars['Int']>;
    transactionCount_gt?: InputMaybe<Scalars['Int']>;
    transactionCount_lt?: InputMaybe<Scalars['Int']>;
    transactionCount_gte?: InputMaybe<Scalars['Int']>;
    transactionCount_lte?: InputMaybe<Scalars['Int']>;
    transactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount?: InputMaybe<Scalars['Int']>;
    transferCount_not?: InputMaybe<Scalars['Int']>;
    transferCount_gt?: InputMaybe<Scalars['Int']>;
    transferCount_lt?: InputMaybe<Scalars['Int']>;
    transferCount_gte?: InputMaybe<Scalars['Int']>;
    transferCount_lte?: InputMaybe<Scalars['Int']>;
    transferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount?: InputMaybe<Scalars['Int']>;
    flashloanCount_not?: InputMaybe<Scalars['Int']>;
    flashloanCount_gt?: InputMaybe<Scalars['Int']>;
    flashloanCount_lt?: InputMaybe<Scalars['Int']>;
    flashloanCount_gte?: InputMaybe<Scalars['Int']>;
    flashloanCount_lte?: InputMaybe<Scalars['Int']>;
    flashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyUsageMetrics_?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>;
    hourlyUsageMetrics_?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>;
    financialMetrics_?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>;
    markets_?: InputMaybe<gnosisPrimaryMarket_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryLendingProtocol_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryLendingProtocol_filter>>>;
};
export type gnosisPrimaryLendingProtocol_orderBy = 'id' | 'protocol' | 'name' | 'slug' | 'schemaVersion' | 'subgraphVersion' | 'methodologyVersion' | 'network' | 'type' | 'lendingType' | 'lenderPermissionType' | 'borrowerPermissionType' | 'poolCreatorPermissionType' | 'riskType' | 'collateralizationType' | 'mintedTokens' | 'rewardTokens' | 'cumulativeUniqueUsers' | 'cumulativeUniqueDepositors' | 'cumulativeUniqueBorrowers' | 'cumulativeUniqueLiquidators' | 'cumulativeUniqueLiquidatees' | 'totalValueLockedUSD' | 'protocolControlledValueUSD' | 'cumulativeSupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'fees' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'cumulativeBorrowUSD' | 'cumulativeLiquidateUSD' | 'mintedTokenSupplies' | 'totalPoolCount' | 'openPositionCount' | 'cumulativePositionCount' | 'transactionCount' | 'depositCount' | 'withdrawCount' | 'borrowCount' | 'repayCount' | 'liquidationCount' | 'transferCount' | 'flashloanCount' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'dailyUsageMetrics' | 'hourlyUsageMetrics' | 'financialMetrics' | 'markets';
export type gnosisPrimaryLendingType = 
/**  Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market  */
'CDP'
/**  Pooled protocols pool all users assets into a single market  */
 | 'POOLED';
export type gnosisPrimaryLiquidate = gnosisPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that carried out the liquidation  */
    liquidator: gnosisPrimaryAccount;
    /**  Account that got liquidated  */
    liquidatee: gnosisPrimaryAccount;
    /**  The market of the collateral being used  */
    market: gnosisPrimaryMarket;
    /**  The user position changed by this event  */
    positions: Array<gnosisPrimaryPosition>;
    /**  Asset repaid (borrowed)  */
    asset: gnosisPrimaryToken;
    /**  Amount of collateral liquidated in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of collateral liquidated in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Amount of profit from liquidation in USD  */
    profitUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryLiquidatepositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPosition_filter>;
};
export type gnosisPrimaryLiquidate_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidator?: InputMaybe<Scalars['String']>;
    liquidator_not?: InputMaybe<Scalars['String']>;
    liquidator_gt?: InputMaybe<Scalars['String']>;
    liquidator_lt?: InputMaybe<Scalars['String']>;
    liquidator_gte?: InputMaybe<Scalars['String']>;
    liquidator_lte?: InputMaybe<Scalars['String']>;
    liquidator_in?: InputMaybe<Array<Scalars['String']>>;
    liquidator_not_in?: InputMaybe<Array<Scalars['String']>>;
    liquidator_contains?: InputMaybe<Scalars['String']>;
    liquidator_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidator_not_contains?: InputMaybe<Scalars['String']>;
    liquidator_not_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidator_starts_with?: InputMaybe<Scalars['String']>;
    liquidator_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_not_starts_with?: InputMaybe<Scalars['String']>;
    liquidator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_ends_with?: InputMaybe<Scalars['String']>;
    liquidator_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_not_ends_with?: InputMaybe<Scalars['String']>;
    liquidator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_?: InputMaybe<gnosisPrimaryAccount_filter>;
    liquidatee?: InputMaybe<Scalars['String']>;
    liquidatee_not?: InputMaybe<Scalars['String']>;
    liquidatee_gt?: InputMaybe<Scalars['String']>;
    liquidatee_lt?: InputMaybe<Scalars['String']>;
    liquidatee_gte?: InputMaybe<Scalars['String']>;
    liquidatee_lte?: InputMaybe<Scalars['String']>;
    liquidatee_in?: InputMaybe<Array<Scalars['String']>>;
    liquidatee_not_in?: InputMaybe<Array<Scalars['String']>>;
    liquidatee_contains?: InputMaybe<Scalars['String']>;
    liquidatee_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_not_contains?: InputMaybe<Scalars['String']>;
    liquidatee_not_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_starts_with?: InputMaybe<Scalars['String']>;
    liquidatee_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_not_starts_with?: InputMaybe<Scalars['String']>;
    liquidatee_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_ends_with?: InputMaybe<Scalars['String']>;
    liquidatee_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_not_ends_with?: InputMaybe<Scalars['String']>;
    liquidatee_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_?: InputMaybe<gnosisPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    positions?: InputMaybe<Array<Scalars['String']>>;
    positions_not?: InputMaybe<Array<Scalars['String']>>;
    positions_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_?: InputMaybe<gnosisPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    profitUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    profitUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    profitUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    profitUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    profitUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    profitUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    profitUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    profitUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryLiquidate_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryLiquidate_filter>>>;
};
export type gnosisPrimaryLiquidate_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'liquidator' | 'liquidator__id' | 'liquidator__positionCount' | 'liquidator__openPositionCount' | 'liquidator__closedPositionCount' | 'liquidator__depositCount' | 'liquidator__withdrawCount' | 'liquidator__borrowCount' | 'liquidator__repayCount' | 'liquidator__liquidateCount' | 'liquidator__liquidationCount' | 'liquidator__transferredCount' | 'liquidator__receivedCount' | 'liquidator__flashloanCount' | 'liquidator__rewardsClaimedUSD' | 'liquidator___eMode' | 'liquidatee' | 'liquidatee__id' | 'liquidatee__positionCount' | 'liquidatee__openPositionCount' | 'liquidatee__closedPositionCount' | 'liquidatee__depositCount' | 'liquidatee__withdrawCount' | 'liquidatee__borrowCount' | 'liquidatee__repayCount' | 'liquidatee__liquidateCount' | 'liquidatee__liquidationCount' | 'liquidatee__transferredCount' | 'liquidatee__receivedCount' | 'liquidatee__flashloanCount' | 'liquidatee__rewardsClaimedUSD' | 'liquidatee___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'positions' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD' | 'profitUSD';
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarket = {
    /**  Smart contract address of the market  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  The protocol this pool belongs to  */
    protocol: gnosisPrimaryLendingProtocol;
    /**  Name of market  */
    name?: Maybe<Scalars['String']>;
    /**  Is this market active or is it frozen  */
    isActive: Scalars['Boolean'];
    /**  Can you borrow from this market  */
    canBorrowFrom: Scalars['Boolean'];
    /**  Can you use the output token as collateral  */
    canUseAsCollateral: Scalars['Boolean'];
    /**  Maximum loan-to-value ratio as a percentage value (e.g. 75% for DAI in Aave)  */
    maximumLTV: Scalars['gnosisPrimaryBigDecimal'];
    /**  Liquidation threshold as a percentage value (e.g. 80% for DAI in Aave). When it is reached, the position is defined as undercollateralised and could be liquidated  */
    liquidationThreshold: Scalars['gnosisPrimaryBigDecimal'];
    /**  Liquidation penalty (or the liquidation bonus for liquidators) as a percentage value. It is the penalty/bonus price on the collateral when liquidators purchase it as part of the liquidation of a loan that has passed the liquidation threshold  */
    liquidationPenalty: Scalars['gnosisPrimaryBigDecimal'];
    /**  Can the user choose to isolate assets in this market. e.g. only this market's collateral can be used for a borrow in Aave V3  */
    canIsolate: Scalars['Boolean'];
    /**  Creation timestamp  */
    createdTimestamp: Scalars['BigInt'];
    /**  Creation block number  */
    createdBlockNumber: Scalars['BigInt'];
    /**  Details about the price oracle used to get this token's price  */
    oracle?: Maybe<gnosisPrimaryOracle>;
    /**  A unique identifier that can relate multiple markets. e.g. a common address that is the same for each related market. This is useful for markets with multiple input tokens  */
    relation?: Maybe<Scalars['gnosisPrimaryBytes']>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
    rewardTokens?: Maybe<Array<gnosisPrimaryRewardToken>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /**  Total supply of output tokens that are staked. Used to calculate reward APY.  */
    stakedOutputTokenAmount?: Maybe<Scalars['BigInt']>;
    /**  Token that need to be deposited in this market to take a position in protocol (should be alphabetized)  */
    inputToken: gnosisPrimaryToken;
    /**  Amount of input token in the market (same order as inputTokens)  */
    inputTokenBalance: Scalars['BigInt'];
    /**  Prices in USD of the input token (same order as inputTokens)  */
    inputTokenPriceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Tokens that are minted to track ownership of position in protocol (e.g. aToken, cToken). Leave as null if doesn't exist (should be alphabetized)  */
    outputToken?: Maybe<gnosisPrimaryToken>;
    /**  Total supply of output token (same order as outputTokens)  */
    outputTokenSupply?: Maybe<Scalars['BigInt']>;
    /**  Prices in USD of the output token (same order as outputTokens)  */
    outputTokenPriceUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%)  */
    exchangeRate?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  All interest rates for this input token. Should be in APR format  */
    rates?: Maybe<Array<gnosisPrimaryInterestRate>>;
    /**  Total amount of reserves (in USD)  */
    reserves?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  The amount of revenue that is converted to reserves at the current time. 20% reserve factor should be in format 0.20  */
    reserveFactor?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  The token that can be borrowed (e.g. inputToken in POOLED and generally a stable in CDPs)  */
    borrowedToken?: Maybe<gnosisPrimaryToken>;
    /**  Amount of input tokens borrowed in this market using variable interest rates (in native terms)  */
    variableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Amount of input tokens borrowed in this market using stable interest rates (in native terms)  */
    stableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Last updated timestamp of supply/borrow index.  */
    indexLastUpdatedTimestamp?: Maybe<Scalars['BigInt']>;
    /**  Index used by the protocol to calculate interest generated on the supply token (ie, liquidityIndex in Aave) */
    supplyIndex?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit to how much of the underlying asset can be supplied to this market.  */
    supplyCap?: Maybe<Scalars['BigInt']>;
    /**  Index used by the protocol to calculate the interest paid on the borrowed token (ie, variableBorrowIndex in Aave)) */
    borrowIndex?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit for how much of the underlying asset can be borrowed from this market.  */
    borrowCap?: Maybe<Scalars['BigInt']>;
    /**  Current TVL (Total Value Locked) of this market  */
    totalValueLockedUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the supply side.  */
    cumulativeSupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the protocol.  */
    cumulativeProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market.  */
    cumulativeTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<gnosisPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets (not historical cumulative), in USD  */
    totalDepositBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD  */
    totalBorrowBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination)  */
    cumulativeBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical transfers in USD  */
    cumulativeTransferUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical flashloans in USD  */
    cumulativeFlashloanUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total number of transactions  */
    transactionCount: Scalars['Int'];
    /**  Total number of deposits  */
    depositCount: Scalars['Int'];
    /**  Total number of withdrawals  */
    withdrawCount: Scalars['Int'];
    /**  Total number of borrows  */
    borrowCount: Scalars['Int'];
    /**  Total number of repayments  */
    repayCount: Scalars['Int'];
    /**  Total number of liquidations  */
    liquidationCount: Scalars['Int'];
    /**  Total number of transfers  */
    transferCount: Scalars['Int'];
    /**  Total number of flashloans  */
    flashloanCount: Scalars['Int'];
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this market  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Number of cumulative depositors  */
    cumulativeUniqueDepositors: Scalars['Int'];
    /**  Number of cumulative borrowers  */
    cumulativeUniqueBorrowers: Scalars['Int'];
    /**  Number of cumulative liquidators (accounts that performed liquidation)  */
    cumulativeUniqueLiquidators: Scalars['Int'];
    /**  Number of cumulative liquidatees (accounts that got liquidated)  */
    cumulativeUniqueLiquidatees: Scalars['Int'];
    /**  Number of cumulative accounts that transferred positions (generally in the form of outputToken transfer)  */
    cumulativeUniqueTransferrers: Scalars['Int'];
    /**  Number of cumulative accounts that performed flashloans  */
    cumulativeUniqueFlashloaners: Scalars['Int'];
    /**  All positions in this market  */
    positions: Array<gnosisPrimaryPosition>;
    /**  Number of positions in this market  */
    positionCount: Scalars['Int'];
    /**  Number of open positions in this market  */
    openPositionCount: Scalars['Int'];
    /**  Number of closed positions in this market  */
    closedPositionCount: Scalars['Int'];
    /**  Number of lending positions in this market. Note: this is cumulative and strictly increasing  */
    lendingPositionCount: Scalars['Int'];
    /**  Number of borrowing positions in this market. Note: this is cumulative and strictly increasing  */
    borrowingPositionCount: Scalars['Int'];
    /**  Market daily snapshots  */
    dailySnapshots: Array<gnosisPrimaryMarketDailySnapshot>;
    /**  Market hourly snapshots  */
    hourlySnapshots: Array<gnosisPrimaryMarketHourlySnapshot>;
    /**  All deposits made to this market  */
    deposits: Array<gnosisPrimaryDeposit>;
    /**  All withdrawals made from this market  */
    withdraws: Array<gnosisPrimaryWithdraw>;
    /**  All borrows from this market  */
    borrows: Array<gnosisPrimaryBorrow>;
    /**  All repayments to this market  */
    repays: Array<gnosisPrimaryRepay>;
    /**  All liquidations made to this market  */
    liquidates: Array<gnosisPrimaryLiquidate>;
    /**  All transfers made in this market  */
    transfers: Array<gnosisPrimaryTransfer>;
    /**  All flashloans made in this market */
    flashloans: Array<gnosisPrimaryFlashloan>;
    /**  Rewards borrow speed for this market */
    _baseTrackingBorrowSpeed?: Maybe<Scalars['BigInt']>;
    /**  Rewards supply speed for this market */
    _baseTrackingSupplySpeed?: Maybe<Scalars['BigInt']>;
    /**  The variable debt token address correlated to the reserve asset  */
    _vToken?: Maybe<gnosisPrimaryToken>;
    /**  The stable debt token address correlated to the reserve asset  */
    _sToken?: Maybe<gnosisPrimaryToken>;
    /**  The state of the protocol prior to being paused (isActive / canUseAsCollateral / canBorrowFrom)  */
    _prePauseState?: Maybe<Array<Scalars['Boolean']>>;
    /**  Aux: Timestamp of the last time rewards were calculated for this market.  */
    _lastRewardsUpdated?: Maybe<Scalars['BigInt']>;
    /**  proportion of liquidation bonus (liquidation penalty) going to the protocol  */
    _liquidationProtocolFee?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    _siloedBorrowing?: Maybe<Scalars['Boolean']>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRewardToken_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketratesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryInterestRate_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketpositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPosition_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketdailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarketDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarketDailySnapshot_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarkethourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryMarketHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryMarketHourlySnapshot_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketdepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryDeposit_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketwithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryWithdraw_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryBorrow_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRepay_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLiquidate_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarkettransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryTransfer_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type gnosisPrimaryMarketflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFlashloan_filter>;
};
export type gnosisPrimaryMarketDailySnapshot = {
    /**  { Smart contract address of the market }{ # of days since Unix epoch time }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Number of days since Unix epoch time  */
    days: Scalars['Int'];
    /**  The protocol this snapshot belongs to  */
    protocol: gnosisPrimaryLendingProtocol;
    /**  The pool this snapshot belongs to  */
    market: gnosisPrimaryMarket;
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  A unique identifier that can relate multiple markets together. e.g. a common address that they all share. This is useful for markets with multiple input tokens  */
    relation?: Maybe<Scalars['gnosisPrimaryBytes']>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
    rewardTokens?: Maybe<Array<gnosisPrimaryRewardToken>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /**  Total supply of output tokens that are staked. Used to calculate reward APY.  */
    stakedOutputTokenAmount?: Maybe<Scalars['BigInt']>;
    /**  Amount of input token in the market (same order as inputTokens)  */
    inputTokenBalance: Scalars['BigInt'];
    /**  Prices in USD of the input token (same order as inputTokens)  */
    inputTokenPriceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total supply of output token (same order as outputTokens)  */
    outputTokenSupply?: Maybe<Scalars['BigInt']>;
    /**  Prices in USD of the output token (same order as outputTokens)  */
    outputTokenPriceUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%)  */
    exchangeRate?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  All interest rates for this input token. Should be in APR format  */
    rates?: Maybe<Array<gnosisPrimaryInterestRate>>;
    /**  Total amount of reserves (in USD)  */
    reserves?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  The amount of revenue that is converted to reserves at the current time. 20% reserve factor should be in format 0.20  */
    reserveFactor?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Amount of input tokens borrowed in this market using variable interest rates (in native terms)  */
    variableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Amount of input tokens borrowed in this market using stable interest rates (in native terms)  */
    stableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit to how much of the underlying asset can be supplied to this market.  */
    supplyCap?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit for how much of the underlying asset can be borrowed from this market.  */
    borrowCap?: Maybe<Scalars['BigInt']>;
    /**  Current TVL (Total Value Locked) of this market  */
    totalValueLockedUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the supply side.  */
    cumulativeSupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Daily revenue generated by the market, accrued to the supply side.  */
    dailySupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the protocol.  */
    cumulativeProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Daily revenue generated by the market, accrued to the protocol.  */
    dailyProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market.  */
    cumulativeTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Daily revenue generated by the market.  */
    dailyTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<gnosisPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL.  */
    totalDepositBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all deposits made on a given day, in USD  */
    dailyDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all the deposits on a given day, in native units  */
    dailyNativeDeposit: Scalars['BigInt'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD.  */
    totalBorrowBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all borrows/mints made on a given day, in USD  */
    dailyBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all the borrows on a given day, in native units  */
    dailyNativeBorrow: Scalars['BigInt'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination)  */
    cumulativeBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets liquidated on a given day, in USD.  */
    dailyLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets liquidated on a given day, in native units.  */
    dailyNativeLiquidate: Scalars['BigInt'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given day, in USD.  */
    dailyWithdrawUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given day, in native units.  */
    dailyNativeWithdraw: Scalars['BigInt'];
    /**  Total assets repaid on a given day, in USD.  */
    dailyRepayUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets repaid on a given day, in native units.  */
    dailyNativeRepay: Scalars['BigInt'];
    /**  Total assets transferred on a given day, in USD.  */
    dailyTransferUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets transferred on a given day, in native units.  */
    dailyNativeTransfer: Scalars['BigInt'];
    /**  Sum of all historical transfers in USD  */
    cumulativeTransferUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets flashloaned on a given day, in USD.  */
    dailyFlashloanUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets flashloaned on a given day, in native units.  */
    dailyNativeFlashloan: Scalars['BigInt'];
    /**  Sum of all historical flashloans in USD  */
    cumulativeFlashloanUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Number of unique daily active users. e.g. accounts that spent gas to interact with this market  */
    dailyActiveUsers: Scalars['Int'];
    /**  Number of unique daily depositors  */
    dailyActiveDepositors: Scalars['Int'];
    /**  Number of unique daily borrowers  */
    dailyActiveBorrowers: Scalars['Int'];
    /**  Number of unique daily liquidators (accounts that performed liquidation)  */
    dailyActiveLiquidators: Scalars['Int'];
    /**  Number of unique daily liquidatees (accounts that got liquidated)  */
    dailyActiveLiquidatees: Scalars['Int'];
    /**  Number of unique daily transferrers (the sender in a Transfer)  */
    dailyActiveTransferrers: Scalars['Int'];
    /**  Number of unique daily accounts that executed a flash loan */
    dailyActiveFlashloaners: Scalars['Int'];
    /**  Total number of deposits in a day  */
    dailyDepositCount: Scalars['Int'];
    /**  Total number of withdrawals in a day  */
    dailyWithdrawCount: Scalars['Int'];
    /**  Total number of borrows/mints in a day  */
    dailyBorrowCount: Scalars['Int'];
    /**  Total number of repayments/burns in a day  */
    dailyRepayCount: Scalars['Int'];
    /**  Total number of liquidations in a day  */
    dailyLiquidateCount: Scalars['Int'];
    /**  Total number of transfers in a day  */
    dailyTransferCount: Scalars['Int'];
    /**  Total number of flashloans in a day  */
    dailyFlashloanCount: Scalars['Int'];
    /**  Number of positions in this market  */
    positionCount: Scalars['Int'];
    /**  Number of open positions in this market  */
    openPositionCount: Scalars['Int'];
    /**  Number of closed positions in this market  */
    closedPositionCount: Scalars['Int'];
    /**  Number of lending positions in this market. Note: this is cumulative and strictly increasing  */
    lendingPositionCount: Scalars['Int'];
    /**  Total number of lending positions touched in a day. This includes opening, closing, and modifying positions.  */
    dailyActiveLendingPositionCount: Scalars['Int'];
    /**  Number of borrowing positions in this market. Note: this is cumulative and strictly increasing  */
    borrowingPositionCount: Scalars['Int'];
    /**  Total number of borrow positions touched in a day. This includes opening, closing, and modifying positions.  */
    dailyActiveBorrowingPositionCount: Scalars['Int'];
};
export type gnosisPrimaryMarketDailySnapshotrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRewardToken_filter>;
};
export type gnosisPrimaryMarketDailySnapshotratesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryInterestRate_filter>;
};
export type gnosisPrimaryMarketDailySnapshot_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    days?: InputMaybe<Scalars['Int']>;
    days_not?: InputMaybe<Scalars['Int']>;
    days_gt?: InputMaybe<Scalars['Int']>;
    days_lt?: InputMaybe<Scalars['Int']>;
    days_gte?: InputMaybe<Scalars['Int']>;
    days_lte?: InputMaybe<Scalars['Int']>;
    days_in?: InputMaybe<Array<Scalars['Int']>>;
    days_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    relation?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    relation_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    relation_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<gnosisPrimaryRewardToken_filter>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenPriceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    inputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    outputTokenSupply?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenPriceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    outputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    exchangeRate?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    exchangeRate_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rates?: InputMaybe<Array<Scalars['String']>>;
    rates_not?: InputMaybe<Array<Scalars['String']>>;
    rates_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_?: InputMaybe<gnosisPrimaryInterestRate_filter>;
    reserves?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    reserves_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    reserveFactor?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    reserveFactor_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    variableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    variableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap?: InputMaybe<Scalars['BigInt']>;
    supplyCap_not?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap?: InputMaybe<Scalars['BigInt']>;
    borrowCap_not?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailySupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<gnosisPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyNativeDeposit?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeDeposit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyNativeBorrow?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeBorrow_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyNativeLiquidate?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeLiquidate_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyWithdrawUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyWithdrawUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyWithdrawUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyNativeWithdraw?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeWithdraw_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyRepayUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyRepayUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyRepayUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyNativeRepay?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeRepay_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyTransferUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyTransferUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyTransferUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyNativeTransfer?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeTransferUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTransferUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyFlashloanUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    dailyFlashloanUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyFlashloanUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyNativeFlashloan?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeFlashloan_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeFlashloanUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeFlashloanUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    dailyActiveUsers?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_not?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveTransferrers?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveTransferrers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveFlashloaners?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_not?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveFlashloaners_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_not?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_not?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_not?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_not?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_not?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_not?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_not?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount?: InputMaybe<Scalars['Int']>;
    positionCount_not?: InputMaybe<Scalars['Int']>;
    positionCount_gt?: InputMaybe<Scalars['Int']>;
    positionCount_lt?: InputMaybe<Scalars['Int']>;
    positionCount_gte?: InputMaybe<Scalars['Int']>;
    positionCount_lte?: InputMaybe<Scalars['Int']>;
    positionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount?: InputMaybe<Scalars['Int']>;
    closedPositionCount_not?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_not?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLendingPositionCount?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLendingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_not?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowingPositionCount?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_not?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryMarketDailySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryMarketDailySnapshot_filter>>>;
};
export type gnosisPrimaryMarketDailySnapshot_orderBy = 'id' | 'days' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'blockNumber' | 'timestamp' | 'relation' | 'rewardTokens' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'stakedOutputTokenAmount' | 'inputTokenBalance' | 'inputTokenPriceUSD' | 'outputTokenSupply' | 'outputTokenPriceUSD' | 'exchangeRate' | 'rates' | 'reserves' | 'reserveFactor' | 'variableBorrowedTokenBalance' | 'stableBorrowedTokenBalance' | 'supplyCap' | 'borrowCap' | 'totalValueLockedUSD' | 'cumulativeSupplySideRevenueUSD' | 'dailySupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'dailyProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'dailyTotalRevenueUSD' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'dailyDepositUSD' | 'dailyNativeDeposit' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'dailyBorrowUSD' | 'dailyNativeBorrow' | 'cumulativeBorrowUSD' | 'dailyLiquidateUSD' | 'dailyNativeLiquidate' | 'cumulativeLiquidateUSD' | 'dailyWithdrawUSD' | 'dailyNativeWithdraw' | 'dailyRepayUSD' | 'dailyNativeRepay' | 'dailyTransferUSD' | 'dailyNativeTransfer' | 'cumulativeTransferUSD' | 'dailyFlashloanUSD' | 'dailyNativeFlashloan' | 'cumulativeFlashloanUSD' | 'dailyActiveUsers' | 'dailyActiveDepositors' | 'dailyActiveBorrowers' | 'dailyActiveLiquidators' | 'dailyActiveLiquidatees' | 'dailyActiveTransferrers' | 'dailyActiveFlashloaners' | 'dailyDepositCount' | 'dailyWithdrawCount' | 'dailyBorrowCount' | 'dailyRepayCount' | 'dailyLiquidateCount' | 'dailyTransferCount' | 'dailyFlashloanCount' | 'positionCount' | 'openPositionCount' | 'closedPositionCount' | 'lendingPositionCount' | 'dailyActiveLendingPositionCount' | 'borrowingPositionCount' | 'dailyActiveBorrowingPositionCount';
export type gnosisPrimaryMarketHourlySnapshot = {
    /**  { Smart contract address of the market }{ # of hours since Unix epoch time }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Number of hours since Unix epoch time  */
    hours: Scalars['Int'];
    /**  The protocol this snapshot belongs to  */
    protocol: gnosisPrimaryLendingProtocol;
    /**  The pool this snapshot belongs to  */
    market: gnosisPrimaryMarket;
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  A unique identifier that can relate multiple markets together. e.g. a common address that they all share. This is useful for markets with multiple input tokens  */
    relation?: Maybe<Scalars['gnosisPrimaryBytes']>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
    rewardTokens?: Maybe<Array<gnosisPrimaryRewardToken>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /**  Total supply of output tokens that are staked. Used to calculate reward APY.  */
    stakedOutputTokenAmount?: Maybe<Scalars['BigInt']>;
    /**  Amount of input token in the market (same order as inputTokens)  */
    inputTokenBalance: Scalars['BigInt'];
    /**  Prices in USD of the input token (same order as inputTokens)  */
    inputTokenPriceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total supply of output token (same order as outputTokens)  */
    outputTokenSupply?: Maybe<Scalars['BigInt']>;
    /**  Prices in USD of the output token (same order as outputTokens)  */
    outputTokenPriceUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%)  */
    exchangeRate?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  All interest rates for this input token. Should be in APR format  */
    rates?: Maybe<Array<gnosisPrimaryInterestRate>>;
    /**  Total amount of reserves (in USD)  */
    reserves?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Amount of input tokens borrowed in this market using variable interest rates (in native terms)  */
    variableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Amount of input tokens borrowed in this market using stable interest rates (in native terms)  */
    stableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Current TVL (Total Value Locked) of this market  */
    totalValueLockedUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the supply side.  */
    cumulativeSupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Hourly revenue generated by the market, accrued to the supply side.  */
    hourlySupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the protocol.  */
    cumulativeProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Hourly revenue generated by the market, accrued to the protocol.  */
    hourlyProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the market.  */
    cumulativeTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Hourly revenue generated by the market.  */
    hourlyTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL.  */
    totalDepositBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all deposits made in a given hour, in USD  */
    hourlyDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD.  */
    totalBorrowBalanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all borrows/mints made in a given hour, in USD  */
    hourlyBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination)  */
    cumulativeBorrowUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets liquidated in a given hour, in USD.  */
    hourlyLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given hour, in USD.  */
    hourlyWithdrawUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets repaid on a given hour, in USD.  */
    hourlyRepayUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets transferred on a given hour, in USD.  */
    hourlyTransferUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total assets flashloaned on a given hour, in USD.  */
    hourlyFlashloanUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryMarketHourlySnapshotrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRewardToken_filter>;
};
export type gnosisPrimaryMarketHourlySnapshotratesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryInterestRate_filter>;
};
export type gnosisPrimaryMarketHourlySnapshot_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hours?: InputMaybe<Scalars['Int']>;
    hours_not?: InputMaybe<Scalars['Int']>;
    hours_gt?: InputMaybe<Scalars['Int']>;
    hours_lt?: InputMaybe<Scalars['Int']>;
    hours_gte?: InputMaybe<Scalars['Int']>;
    hours_lte?: InputMaybe<Scalars['Int']>;
    hours_in?: InputMaybe<Array<Scalars['Int']>>;
    hours_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    relation?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    relation_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    relation_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<gnosisPrimaryRewardToken_filter>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenPriceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    inputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    outputTokenSupply?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenPriceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    outputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    exchangeRate?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    exchangeRate_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rates?: InputMaybe<Array<Scalars['String']>>;
    rates_not?: InputMaybe<Array<Scalars['String']>>;
    rates_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_?: InputMaybe<gnosisPrimaryInterestRate_filter>;
    reserves?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    reserves_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    variableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    variableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlySupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyWithdrawUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyWithdrawUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyWithdrawUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyWithdrawUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyWithdrawUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyWithdrawUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyWithdrawUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyWithdrawUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyRepayUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyRepayUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyRepayUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyRepayUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyRepayUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyRepayUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyRepayUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyRepayUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyTransferUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTransferUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTransferUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTransferUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTransferUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTransferUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyTransferUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyTransferUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyFlashloanUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyFlashloanUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyFlashloanUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyFlashloanUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyFlashloanUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyFlashloanUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    hourlyFlashloanUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    hourlyFlashloanUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryMarketHourlySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryMarketHourlySnapshot_filter>>>;
};
export type gnosisPrimaryMarketHourlySnapshot_orderBy = 'id' | 'hours' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'blockNumber' | 'timestamp' | 'relation' | 'rewardTokens' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'stakedOutputTokenAmount' | 'inputTokenBalance' | 'inputTokenPriceUSD' | 'outputTokenSupply' | 'outputTokenPriceUSD' | 'exchangeRate' | 'rates' | 'reserves' | 'variableBorrowedTokenBalance' | 'stableBorrowedTokenBalance' | 'totalValueLockedUSD' | 'cumulativeSupplySideRevenueUSD' | 'hourlySupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'hourlyProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'hourlyTotalRevenueUSD' | 'totalDepositBalanceUSD' | 'hourlyDepositUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'hourlyBorrowUSD' | 'cumulativeBorrowUSD' | 'hourlyLiquidateUSD' | 'cumulativeLiquidateUSD' | 'hourlyWithdrawUSD' | 'hourlyRepayUSD' | 'hourlyTransferUSD' | 'hourlyFlashloanUSD';
export type gnosisPrimaryMarket_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    isActive?: InputMaybe<Scalars['Boolean']>;
    isActive_not?: InputMaybe<Scalars['Boolean']>;
    isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canBorrowFrom?: InputMaybe<Scalars['Boolean']>;
    canBorrowFrom_not?: InputMaybe<Scalars['Boolean']>;
    canBorrowFrom_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canBorrowFrom_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canUseAsCollateral?: InputMaybe<Scalars['Boolean']>;
    canUseAsCollateral_not?: InputMaybe<Scalars['Boolean']>;
    canUseAsCollateral_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canUseAsCollateral_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    maximumLTV?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    maximumLTV_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    maximumLTV_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    maximumLTV_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    maximumLTV_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    maximumLTV_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    maximumLTV_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    maximumLTV_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    liquidationThreshold?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationThreshold_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationThreshold_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationThreshold_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationThreshold_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationThreshold_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationThreshold_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    liquidationThreshold_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    liquidationPenalty?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationPenalty_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationPenalty_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationPenalty_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationPenalty_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationPenalty_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    liquidationPenalty_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    liquidationPenalty_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    canIsolate?: InputMaybe<Scalars['Boolean']>;
    canIsolate_not?: InputMaybe<Scalars['Boolean']>;
    canIsolate_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canIsolate_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    createdTimestamp?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_not?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    createdBlockNumber?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    oracle?: InputMaybe<Scalars['String']>;
    oracle_not?: InputMaybe<Scalars['String']>;
    oracle_gt?: InputMaybe<Scalars['String']>;
    oracle_lt?: InputMaybe<Scalars['String']>;
    oracle_gte?: InputMaybe<Scalars['String']>;
    oracle_lte?: InputMaybe<Scalars['String']>;
    oracle_in?: InputMaybe<Array<Scalars['String']>>;
    oracle_not_in?: InputMaybe<Array<Scalars['String']>>;
    oracle_contains?: InputMaybe<Scalars['String']>;
    oracle_contains_nocase?: InputMaybe<Scalars['String']>;
    oracle_not_contains?: InputMaybe<Scalars['String']>;
    oracle_not_contains_nocase?: InputMaybe<Scalars['String']>;
    oracle_starts_with?: InputMaybe<Scalars['String']>;
    oracle_starts_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_not_starts_with?: InputMaybe<Scalars['String']>;
    oracle_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_ends_with?: InputMaybe<Scalars['String']>;
    oracle_ends_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_not_ends_with?: InputMaybe<Scalars['String']>;
    oracle_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_?: InputMaybe<gnosisPrimaryOracle_filter>;
    relation?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    relation_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    relation_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    relation_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<gnosisPrimaryRewardToken_filter>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputToken?: InputMaybe<Scalars['String']>;
    inputToken_not?: InputMaybe<Scalars['String']>;
    inputToken_gt?: InputMaybe<Scalars['String']>;
    inputToken_lt?: InputMaybe<Scalars['String']>;
    inputToken_gte?: InputMaybe<Scalars['String']>;
    inputToken_lte?: InputMaybe<Scalars['String']>;
    inputToken_in?: InputMaybe<Array<Scalars['String']>>;
    inputToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    inputToken_contains?: InputMaybe<Scalars['String']>;
    inputToken_contains_nocase?: InputMaybe<Scalars['String']>;
    inputToken_not_contains?: InputMaybe<Scalars['String']>;
    inputToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    inputToken_starts_with?: InputMaybe<Scalars['String']>;
    inputToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_not_starts_with?: InputMaybe<Scalars['String']>;
    inputToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_ends_with?: InputMaybe<Scalars['String']>;
    inputToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_not_ends_with?: InputMaybe<Scalars['String']>;
    inputToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_?: InputMaybe<gnosisPrimaryToken_filter>;
    inputTokenBalance?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenPriceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    inputTokenPriceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    inputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    outputToken?: InputMaybe<Scalars['String']>;
    outputToken_not?: InputMaybe<Scalars['String']>;
    outputToken_gt?: InputMaybe<Scalars['String']>;
    outputToken_lt?: InputMaybe<Scalars['String']>;
    outputToken_gte?: InputMaybe<Scalars['String']>;
    outputToken_lte?: InputMaybe<Scalars['String']>;
    outputToken_in?: InputMaybe<Array<Scalars['String']>>;
    outputToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    outputToken_contains?: InputMaybe<Scalars['String']>;
    outputToken_contains_nocase?: InputMaybe<Scalars['String']>;
    outputToken_not_contains?: InputMaybe<Scalars['String']>;
    outputToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    outputToken_starts_with?: InputMaybe<Scalars['String']>;
    outputToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_not_starts_with?: InputMaybe<Scalars['String']>;
    outputToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_ends_with?: InputMaybe<Scalars['String']>;
    outputToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_not_ends_with?: InputMaybe<Scalars['String']>;
    outputToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_?: InputMaybe<gnosisPrimaryToken_filter>;
    outputTokenSupply?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenPriceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    outputTokenPriceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    outputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    exchangeRate?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    exchangeRate_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    exchangeRate_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    rates?: InputMaybe<Array<Scalars['String']>>;
    rates_not?: InputMaybe<Array<Scalars['String']>>;
    rates_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_?: InputMaybe<gnosisPrimaryInterestRate_filter>;
    reserves?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserves_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    reserves_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    reserveFactor?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    reserveFactor_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    reserveFactor_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    borrowedToken?: InputMaybe<Scalars['String']>;
    borrowedToken_not?: InputMaybe<Scalars['String']>;
    borrowedToken_gt?: InputMaybe<Scalars['String']>;
    borrowedToken_lt?: InputMaybe<Scalars['String']>;
    borrowedToken_gte?: InputMaybe<Scalars['String']>;
    borrowedToken_lte?: InputMaybe<Scalars['String']>;
    borrowedToken_in?: InputMaybe<Array<Scalars['String']>>;
    borrowedToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    borrowedToken_contains?: InputMaybe<Scalars['String']>;
    borrowedToken_contains_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_not_contains?: InputMaybe<Scalars['String']>;
    borrowedToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_starts_with?: InputMaybe<Scalars['String']>;
    borrowedToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_not_starts_with?: InputMaybe<Scalars['String']>;
    borrowedToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_ends_with?: InputMaybe<Scalars['String']>;
    borrowedToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_not_ends_with?: InputMaybe<Scalars['String']>;
    borrowedToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_?: InputMaybe<gnosisPrimaryToken_filter>;
    variableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    variableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    indexLastUpdatedTimestamp?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    indexLastUpdatedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyIndex?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_not?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_gt?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_lt?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_gte?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_lte?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap?: InputMaybe<Scalars['BigInt']>;
    supplyCap_not?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowIndex?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_not?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_gt?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_lt?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_gte?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_lte?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap?: InputMaybe<Scalars['BigInt']>;
    borrowCap_not?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<gnosisPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTransferUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTransferUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTransferUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeFlashloanUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeFlashloanUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    transactionCount?: InputMaybe<Scalars['Int']>;
    transactionCount_not?: InputMaybe<Scalars['Int']>;
    transactionCount_gt?: InputMaybe<Scalars['Int']>;
    transactionCount_lt?: InputMaybe<Scalars['Int']>;
    transactionCount_gte?: InputMaybe<Scalars['Int']>;
    transactionCount_lte?: InputMaybe<Scalars['Int']>;
    transactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount?: InputMaybe<Scalars['Int']>;
    transferCount_not?: InputMaybe<Scalars['Int']>;
    transferCount_gt?: InputMaybe<Scalars['Int']>;
    transferCount_lt?: InputMaybe<Scalars['Int']>;
    transferCount_gte?: InputMaybe<Scalars['Int']>;
    transferCount_lte?: InputMaybe<Scalars['Int']>;
    transferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount?: InputMaybe<Scalars['Int']>;
    flashloanCount_not?: InputMaybe<Scalars['Int']>;
    flashloanCount_gt?: InputMaybe<Scalars['Int']>;
    flashloanCount_lt?: InputMaybe<Scalars['Int']>;
    flashloanCount_gte?: InputMaybe<Scalars['Int']>;
    flashloanCount_lte?: InputMaybe<Scalars['Int']>;
    flashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueTransferrers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueTransferrers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueFlashloaners?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueFlashloaners_not_in?: InputMaybe<Array<Scalars['Int']>>;
    positions_?: InputMaybe<gnosisPrimaryPosition_filter>;
    positionCount?: InputMaybe<Scalars['Int']>;
    positionCount_not?: InputMaybe<Scalars['Int']>;
    positionCount_gt?: InputMaybe<Scalars['Int']>;
    positionCount_lt?: InputMaybe<Scalars['Int']>;
    positionCount_gte?: InputMaybe<Scalars['Int']>;
    positionCount_lte?: InputMaybe<Scalars['Int']>;
    positionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount?: InputMaybe<Scalars['Int']>;
    closedPositionCount_not?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_not?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_not?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailySnapshots_?: InputMaybe<gnosisPrimaryMarketDailySnapshot_filter>;
    hourlySnapshots_?: InputMaybe<gnosisPrimaryMarketHourlySnapshot_filter>;
    deposits_?: InputMaybe<gnosisPrimaryDeposit_filter>;
    withdraws_?: InputMaybe<gnosisPrimaryWithdraw_filter>;
    borrows_?: InputMaybe<gnosisPrimaryBorrow_filter>;
    repays_?: InputMaybe<gnosisPrimaryRepay_filter>;
    liquidates_?: InputMaybe<gnosisPrimaryLiquidate_filter>;
    transfers_?: InputMaybe<gnosisPrimaryTransfer_filter>;
    flashloans_?: InputMaybe<gnosisPrimaryFlashloan_filter>;
    _baseTrackingBorrowSpeed?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_not?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_gt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_lt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_gte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_lte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _baseTrackingBorrowSpeed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _baseTrackingSupplySpeed?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_not?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_gt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_lt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_gte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_lte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _baseTrackingSupplySpeed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _vToken?: InputMaybe<Scalars['String']>;
    _vToken_not?: InputMaybe<Scalars['String']>;
    _vToken_gt?: InputMaybe<Scalars['String']>;
    _vToken_lt?: InputMaybe<Scalars['String']>;
    _vToken_gte?: InputMaybe<Scalars['String']>;
    _vToken_lte?: InputMaybe<Scalars['String']>;
    _vToken_in?: InputMaybe<Array<Scalars['String']>>;
    _vToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    _vToken_contains?: InputMaybe<Scalars['String']>;
    _vToken_contains_nocase?: InputMaybe<Scalars['String']>;
    _vToken_not_contains?: InputMaybe<Scalars['String']>;
    _vToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _vToken_starts_with?: InputMaybe<Scalars['String']>;
    _vToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_not_starts_with?: InputMaybe<Scalars['String']>;
    _vToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_ends_with?: InputMaybe<Scalars['String']>;
    _vToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_not_ends_with?: InputMaybe<Scalars['String']>;
    _vToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_?: InputMaybe<gnosisPrimaryToken_filter>;
    _sToken?: InputMaybe<Scalars['String']>;
    _sToken_not?: InputMaybe<Scalars['String']>;
    _sToken_gt?: InputMaybe<Scalars['String']>;
    _sToken_lt?: InputMaybe<Scalars['String']>;
    _sToken_gte?: InputMaybe<Scalars['String']>;
    _sToken_lte?: InputMaybe<Scalars['String']>;
    _sToken_in?: InputMaybe<Array<Scalars['String']>>;
    _sToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    _sToken_contains?: InputMaybe<Scalars['String']>;
    _sToken_contains_nocase?: InputMaybe<Scalars['String']>;
    _sToken_not_contains?: InputMaybe<Scalars['String']>;
    _sToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _sToken_starts_with?: InputMaybe<Scalars['String']>;
    _sToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_not_starts_with?: InputMaybe<Scalars['String']>;
    _sToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_ends_with?: InputMaybe<Scalars['String']>;
    _sToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_not_ends_with?: InputMaybe<Scalars['String']>;
    _sToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_?: InputMaybe<gnosisPrimaryToken_filter>;
    _prePauseState?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_not?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_contains?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_contains_nocase?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_not_contains?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_not_contains_nocase?: InputMaybe<Array<Scalars['Boolean']>>;
    _lastRewardsUpdated?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_not?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_gt?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_lt?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_gte?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_lte?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _lastRewardsUpdated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _liquidationProtocolFee?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    _liquidationProtocolFee_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    _liquidationProtocolFee_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    _liquidationProtocolFee_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    _liquidationProtocolFee_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    _liquidationProtocolFee_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    _liquidationProtocolFee_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    _liquidationProtocolFee_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    _siloedBorrowing?: InputMaybe<Scalars['Boolean']>;
    _siloedBorrowing_not?: InputMaybe<Scalars['Boolean']>;
    _siloedBorrowing_in?: InputMaybe<Array<Scalars['Boolean']>>;
    _siloedBorrowing_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryMarket_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryMarket_filter>>>;
};
export type gnosisPrimaryMarket_orderBy = 'id' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'name' | 'isActive' | 'canBorrowFrom' | 'canUseAsCollateral' | 'maximumLTV' | 'liquidationThreshold' | 'liquidationPenalty' | 'canIsolate' | 'createdTimestamp' | 'createdBlockNumber' | 'oracle' | 'oracle__id' | 'oracle__oracleAddress' | 'oracle__blockCreated' | 'oracle__timestampCreated' | 'oracle__isActive' | 'oracle__isUSD' | 'oracle__hashEnded' | 'oracle__oracleSource' | 'relation' | 'rewardTokens' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'stakedOutputTokenAmount' | 'inputToken' | 'inputToken__id' | 'inputToken__name' | 'inputToken__symbol' | 'inputToken__decimals' | 'inputToken__lastPriceUSD' | 'inputToken__lastPriceBlockNumber' | 'inputToken__type' | 'inputToken___iavsTokenType' | 'inputTokenBalance' | 'inputTokenPriceUSD' | 'outputToken' | 'outputToken__id' | 'outputToken__name' | 'outputToken__symbol' | 'outputToken__decimals' | 'outputToken__lastPriceUSD' | 'outputToken__lastPriceBlockNumber' | 'outputToken__type' | 'outputToken___iavsTokenType' | 'outputTokenSupply' | 'outputTokenPriceUSD' | 'exchangeRate' | 'rates' | 'reserves' | 'reserveFactor' | 'borrowedToken' | 'borrowedToken__id' | 'borrowedToken__name' | 'borrowedToken__symbol' | 'borrowedToken__decimals' | 'borrowedToken__lastPriceUSD' | 'borrowedToken__lastPriceBlockNumber' | 'borrowedToken__type' | 'borrowedToken___iavsTokenType' | 'variableBorrowedTokenBalance' | 'stableBorrowedTokenBalance' | 'indexLastUpdatedTimestamp' | 'supplyIndex' | 'supplyCap' | 'borrowIndex' | 'borrowCap' | 'totalValueLockedUSD' | 'cumulativeSupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'cumulativeBorrowUSD' | 'cumulativeLiquidateUSD' | 'cumulativeTransferUSD' | 'cumulativeFlashloanUSD' | 'transactionCount' | 'depositCount' | 'withdrawCount' | 'borrowCount' | 'repayCount' | 'liquidationCount' | 'transferCount' | 'flashloanCount' | 'cumulativeUniqueUsers' | 'cumulativeUniqueDepositors' | 'cumulativeUniqueBorrowers' | 'cumulativeUniqueLiquidators' | 'cumulativeUniqueLiquidatees' | 'cumulativeUniqueTransferrers' | 'cumulativeUniqueFlashloaners' | 'positions' | 'positionCount' | 'openPositionCount' | 'closedPositionCount' | 'lendingPositionCount' | 'borrowingPositionCount' | 'dailySnapshots' | 'hourlySnapshots' | 'deposits' | 'withdraws' | 'borrows' | 'repays' | 'liquidates' | 'transfers' | 'flashloans' | '_baseTrackingBorrowSpeed' | '_baseTrackingSupplySpeed' | '_vToken' | '_vToken__id' | '_vToken__name' | '_vToken__symbol' | '_vToken__decimals' | '_vToken__lastPriceUSD' | '_vToken__lastPriceBlockNumber' | '_vToken__type' | '_vToken___iavsTokenType' | '_sToken' | '_sToken__id' | '_sToken__name' | '_sToken__symbol' | '_sToken__decimals' | '_sToken__lastPriceUSD' | '_sToken__lastPriceBlockNumber' | '_sToken__type' | '_sToken___iavsTokenType' | '_prePauseState' | '_lastRewardsUpdated' | '_liquidationProtocolFee' | '_siloedBorrowing';
export type gnosisPrimaryNetwork = 'ARBITRUM_ONE' | 'ARWEAVE_MAINNET' | 'AURORA' | 'AVALANCHE' | 'BOBA' | 'BSC' | 'CELO' | 'COSMOS' | 'CRONOS' | 'MAINNET' | 'FANTOM' | 'FUSE' | 'HARMONY' | 'JUNO' | 'MOONBEAM' | 'MOONRIVER' | 'NEAR_MAINNET' | 'OPTIMISM' | 'OSMOSIS' | 'MATIC' | 'GNOSIS' | 'ANDROMEDA' | 'BASE';
export type gnosisPrimaryOracle = {
    /**  { Market Address }{ Token Address }  */
    id: Scalars['gnosisPrimaryBytes'];
    oracleAddress: Scalars['gnosisPrimaryBytes'];
    /**  The market that this oracle is used for pricing  */
    market: gnosisPrimaryMarket;
    /**  The block this oracle was adopted for a market  */
    blockCreated: Scalars['BigInt'];
    /**  The timestamp this oracle was adopted for a market  */
    timestampCreated: Scalars['BigInt'];
    /**  Is the Oracle currently used as the source of truth for a market */
    isActive: Scalars['Boolean'];
    /**  True if the oracle returns prices in USD (e.g. generally the other case is the network's native token)  */
    isUSD: Scalars['Boolean'];
    /**  The hash where the oracle was no longer used  */
    hashEnded?: Maybe<Scalars['gnosisPrimaryBytes']>;
    /**  The Protocol that is providing the oracle (nullable if non-standard source) */
    oracleSource?: Maybe<gnosisPrimaryOracleSource>;
};
export type gnosisPrimaryOracleSource = 'UNISWAP' | 'BALANCER' | 'CHAINLINK' | 'YEARN' | 'SUSHISWAP' | 'CURVE';
export type gnosisPrimaryOracle_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    oracleAddress_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    oracleAddress_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleAddress_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    blockCreated?: InputMaybe<Scalars['BigInt']>;
    blockCreated_not?: InputMaybe<Scalars['BigInt']>;
    blockCreated_gt?: InputMaybe<Scalars['BigInt']>;
    blockCreated_lt?: InputMaybe<Scalars['BigInt']>;
    blockCreated_gte?: InputMaybe<Scalars['BigInt']>;
    blockCreated_lte?: InputMaybe<Scalars['BigInt']>;
    blockCreated_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockCreated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampCreated?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_not?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_gt?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_lt?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_gte?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_lte?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampCreated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    isActive?: InputMaybe<Scalars['Boolean']>;
    isActive_not?: InputMaybe<Scalars['Boolean']>;
    isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isUSD?: InputMaybe<Scalars['Boolean']>;
    isUSD_not?: InputMaybe<Scalars['Boolean']>;
    isUSD_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isUSD_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    hashEnded?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashEnded_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashEnded_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashEnded_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashEnded_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashEnded_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashEnded_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hashEnded_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hashEnded_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashEnded_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracleSource?: InputMaybe<gnosisPrimaryOracleSource>;
    oracleSource_not?: InputMaybe<gnosisPrimaryOracleSource>;
    oracleSource_in?: InputMaybe<Array<gnosisPrimaryOracleSource>>;
    oracleSource_not_in?: InputMaybe<Array<gnosisPrimaryOracleSource>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryOracle_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryOracle_filter>>>;
};
export type gnosisPrimaryOracle_orderBy = 'id' | 'oracleAddress' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'blockCreated' | 'timestampCreated' | 'isActive' | 'isUSD' | 'hashEnded' | 'oracleSource';
/** Defines the order direction, either ascending or descending */
export type gnosisPrimaryOrderDirection = 'asc' | 'desc';
export type gnosisPrimaryPermissionType = 
/**  Only users that have been whitelisted can interact. e.g. Only approved institutions can borrow  */
'WHITELIST_ONLY'
/**  To interact a user must be KYC'd  */
 | 'PERMISSIONED'
/**  Protocols that do not KYC. Can be used by any account  */
 | 'PERMISSIONLESS'
/**  Only the protocol admin address can make do the defined actions  */
 | 'ADMIN';
export type gnosisPrimaryPosition = {
    /**  { Account address }-{ Market address }-{ Position Side }-{ Optional: Interest Rate Type}-{ Counter }  */
    id: Scalars['ID'];
    /**  Account that owns this position  */
    account: gnosisPrimaryAccount;
    /**  The market in which this position was opened  */
    market: gnosisPrimaryMarket;
    /**  The asset in which this position was opened with  */
    asset: gnosisPrimaryToken;
    /**  The hash of the transaction that opened this position  */
    hashOpened: Scalars['gnosisPrimaryBytes'];
    /**  The hash of the transaction that closed this position  */
    hashClosed?: Maybe<Scalars['gnosisPrimaryBytes']>;
    /**  Block number of when the position was opened  */
    blockNumberOpened: Scalars['BigInt'];
    /**  Timestamp when the position was opened  */
    timestampOpened: Scalars['BigInt'];
    /**  Block number of when the position was closed (0 if still open)  */
    blockNumberClosed?: Maybe<Scalars['BigInt']>;
    /**  Timestamp when the position was closed (0 if still open)  */
    timestampClosed?: Maybe<Scalars['BigInt']>;
    /**  Side of the position (either lender or borrower)  */
    side: gnosisPrimaryPositionSide;
    /**  Type of interest rate used for this position (stable or variable). Generally for borrow side positions. */
    type?: Maybe<gnosisPrimaryInterestRateType>;
    /**  Whether this position has been enabled as a collateral (only applies to LENDER positions). For protocols (e.g. MakerDAO) that doesn't require enabling explicitly, this will always be true.  */
    isCollateral?: Maybe<Scalars['Boolean']>;
    /**  Whether this position is being isolated from risk from other positions (only applies to LENDER positions). For protocols (e.g. Aave V3) this reduces risk exposure from other user positions.  */
    isIsolated?: Maybe<Scalars['Boolean']>;
    /**  Token balance in this position, in native amounts  */
    balance: Scalars['BigInt'];
    /**  The token balance of this position without interest generated (Used to calculate interest generated on a position)  */
    principal?: Maybe<Scalars['BigInt']>;
    /**  Number of deposits related to this position  */
    depositCount: Scalars['Int'];
    /**  All deposit events of this position  */
    deposits: Array<gnosisPrimaryDeposit>;
    /**  Number of withdrawals related to this position  */
    withdrawCount: Scalars['Int'];
    /**  All withdraw events of this position  */
    withdraws: Array<gnosisPrimaryWithdraw>;
    /**  Number of borrows related to this position  */
    borrowCount: Scalars['Int'];
    /**  All borrow events of this position  */
    borrows: Array<gnosisPrimaryBorrow>;
    /**  Number of repays related to this position  */
    repayCount: Scalars['Int'];
    /**  All repay events of this position  */
    repays: Array<gnosisPrimaryRepay>;
    /**  Number of liquidations related to this position (incremented when this position is liquidated)  */
    liquidationCount: Scalars['Int'];
    /**  Liquidation event related to this position (if exists)  */
    liquidations: Array<gnosisPrimaryLiquidate>;
    /**  Number of times this position has transferred  */
    transferredCount: Scalars['Int'];
    /**  Number of times this position has received a transfer  */
    receivedCount: Scalars['Int'];
    /**  All transfer events related to this position  */
    transfers: Array<gnosisPrimaryTransfer>;
    /**  Position daily snapshots for open positions  */
    snapshots: Array<gnosisPrimaryPositionSnapshot>;
    /**  efficient mode flag  */
    _eMode?: Maybe<Scalars['Boolean']>;
};
export type gnosisPrimaryPositiondepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryDeposit_filter>;
};
export type gnosisPrimaryPositionwithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryWithdraw_filter>;
};
export type gnosisPrimaryPositionborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryBorrow_filter>;
};
export type gnosisPrimaryPositionrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryRepay_filter>;
};
export type gnosisPrimaryPositionliquidationsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryLiquidate_filter>;
};
export type gnosisPrimaryPositiontransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryTransfer_filter>;
};
export type gnosisPrimaryPositionsnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPositionSnapshot_filter>;
};
export type gnosisPrimaryPositionSide = 
/**  Position opened as a lender (used as collateral)  */
'COLLATERAL'
/**  Position opened as a borrower  */
 | 'BORROWER';
export type gnosisPrimaryPositionSnapshot = {
    /**  { Position ID }-{ Transaction hash }-{ Log index }  */
    id: Scalars['ID'];
    /**  Transaction hash of the transaction that triggered this snapshot  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Nonce of the transaction that triggered this snapshot  */
    nonce: Scalars['BigInt'];
    /**  Account that owns this position  */
    account: gnosisPrimaryAccount;
    /**  Position of this snapshot  */
    position: gnosisPrimaryPosition;
    /**  Token balance in this position, in native amounts  */
    balance: Scalars['BigInt'];
    /**  Token balance in this position, in USD  */
    balanceUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  The principal value without interest accrued. Used to calculate interest per position.  */
    principal?: Maybe<Scalars['BigInt']>;
    /**  Base borrow OR supply index (based on the position side). Used to calculate interest across snapshots.  */
    index?: Maybe<Scalars['BigInt']>;
};
export type gnosisPrimaryPositionSnapshot_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<gnosisPrimaryAccount_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<gnosisPrimaryPosition_filter>;
    balance?: InputMaybe<Scalars['BigInt']>;
    balance_not?: InputMaybe<Scalars['BigInt']>;
    balance_gt?: InputMaybe<Scalars['BigInt']>;
    balance_lt?: InputMaybe<Scalars['BigInt']>;
    balance_gte?: InputMaybe<Scalars['BigInt']>;
    balance_lte?: InputMaybe<Scalars['BigInt']>;
    balance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    balance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    balanceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    balanceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    balanceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    balanceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    balanceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    balanceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    balanceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    balanceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal?: InputMaybe<Scalars['BigInt']>;
    principal_not?: InputMaybe<Scalars['BigInt']>;
    principal_gt?: InputMaybe<Scalars['BigInt']>;
    principal_lt?: InputMaybe<Scalars['BigInt']>;
    principal_gte?: InputMaybe<Scalars['BigInt']>;
    principal_lte?: InputMaybe<Scalars['BigInt']>;
    principal_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    index?: InputMaybe<Scalars['BigInt']>;
    index_not?: InputMaybe<Scalars['BigInt']>;
    index_gt?: InputMaybe<Scalars['BigInt']>;
    index_lt?: InputMaybe<Scalars['BigInt']>;
    index_gte?: InputMaybe<Scalars['BigInt']>;
    index_lte?: InputMaybe<Scalars['BigInt']>;
    index_in?: InputMaybe<Array<Scalars['BigInt']>>;
    index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryPositionSnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryPositionSnapshot_filter>>>;
};
export type gnosisPrimaryPositionSnapshot_orderBy = 'id' | 'hash' | 'logIndex' | 'nonce' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'balance' | 'balanceUSD' | 'blockNumber' | 'timestamp' | 'principal' | 'index';
export type gnosisPrimaryPosition_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<gnosisPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    hashOpened?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashOpened_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashOpened_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashOpened_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashOpened_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashOpened_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashOpened_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hashOpened_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hashOpened_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashOpened_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hashClosed_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hashClosed_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hashClosed_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    blockNumberOpened?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_not?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumberOpened_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampOpened?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_not?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_gt?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_lt?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_gte?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_lte?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampOpened_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumberClosed?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_not?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumberClosed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampClosed?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_not?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_gt?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_lt?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_gte?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_lte?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampClosed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    side?: InputMaybe<gnosisPrimaryPositionSide>;
    side_not?: InputMaybe<gnosisPrimaryPositionSide>;
    side_in?: InputMaybe<Array<gnosisPrimaryPositionSide>>;
    side_not_in?: InputMaybe<Array<gnosisPrimaryPositionSide>>;
    type?: InputMaybe<gnosisPrimaryInterestRateType>;
    type_not?: InputMaybe<gnosisPrimaryInterestRateType>;
    type_in?: InputMaybe<Array<gnosisPrimaryInterestRateType>>;
    type_not_in?: InputMaybe<Array<gnosisPrimaryInterestRateType>>;
    isCollateral?: InputMaybe<Scalars['Boolean']>;
    isCollateral_not?: InputMaybe<Scalars['Boolean']>;
    isCollateral_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isCollateral_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isIsolated?: InputMaybe<Scalars['Boolean']>;
    isIsolated_not?: InputMaybe<Scalars['Boolean']>;
    isIsolated_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isIsolated_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    balance?: InputMaybe<Scalars['BigInt']>;
    balance_not?: InputMaybe<Scalars['BigInt']>;
    balance_gt?: InputMaybe<Scalars['BigInt']>;
    balance_lt?: InputMaybe<Scalars['BigInt']>;
    balance_gte?: InputMaybe<Scalars['BigInt']>;
    balance_lte?: InputMaybe<Scalars['BigInt']>;
    balance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    balance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal?: InputMaybe<Scalars['BigInt']>;
    principal_not?: InputMaybe<Scalars['BigInt']>;
    principal_gt?: InputMaybe<Scalars['BigInt']>;
    principal_lt?: InputMaybe<Scalars['BigInt']>;
    principal_gte?: InputMaybe<Scalars['BigInt']>;
    principal_lte?: InputMaybe<Scalars['BigInt']>;
    principal_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    deposits_?: InputMaybe<gnosisPrimaryDeposit_filter>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdraws_?: InputMaybe<gnosisPrimaryWithdraw_filter>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrows_?: InputMaybe<gnosisPrimaryBorrow_filter>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repays_?: InputMaybe<gnosisPrimaryRepay_filter>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidations_?: InputMaybe<gnosisPrimaryLiquidate_filter>;
    transferredCount?: InputMaybe<Scalars['Int']>;
    transferredCount_not?: InputMaybe<Scalars['Int']>;
    transferredCount_gt?: InputMaybe<Scalars['Int']>;
    transferredCount_lt?: InputMaybe<Scalars['Int']>;
    transferredCount_gte?: InputMaybe<Scalars['Int']>;
    transferredCount_lte?: InputMaybe<Scalars['Int']>;
    transferredCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferredCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    receivedCount?: InputMaybe<Scalars['Int']>;
    receivedCount_not?: InputMaybe<Scalars['Int']>;
    receivedCount_gt?: InputMaybe<Scalars['Int']>;
    receivedCount_lt?: InputMaybe<Scalars['Int']>;
    receivedCount_gte?: InputMaybe<Scalars['Int']>;
    receivedCount_lte?: InputMaybe<Scalars['Int']>;
    receivedCount_in?: InputMaybe<Array<Scalars['Int']>>;
    receivedCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transfers_?: InputMaybe<gnosisPrimaryTransfer_filter>;
    snapshots_?: InputMaybe<gnosisPrimaryPositionSnapshot_filter>;
    _eMode?: InputMaybe<Scalars['Boolean']>;
    _eMode_not?: InputMaybe<Scalars['Boolean']>;
    _eMode_in?: InputMaybe<Array<Scalars['Boolean']>>;
    _eMode_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryPosition_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryPosition_filter>>>;
};
export type gnosisPrimaryPosition_orderBy = 'id' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'hashOpened' | 'hashClosed' | 'blockNumberOpened' | 'timestampOpened' | 'blockNumberClosed' | 'timestampClosed' | 'side' | 'type' | 'isCollateral' | 'isIsolated' | 'balance' | 'principal' | 'depositCount' | 'deposits' | 'withdrawCount' | 'withdraws' | 'borrowCount' | 'borrows' | 'repayCount' | 'repays' | 'liquidationCount' | 'liquidations' | 'transferredCount' | 'receivedCount' | 'transfers' | 'snapshots' | '_eMode';
export type gnosisPrimaryProtocol = {
    /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Base name of the protocol, excluding transformations. e.g. Aave  */
    protocol: Scalars['String'];
    /**  Name of the protocol, including version. e.g. Aave v2  */
    name: Scalars['String'];
    /**  Slug of protocol, including version. e.g. aave-v2  */
    slug: Scalars['String'];
    /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
    schemaVersion: Scalars['String'];
    /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
    subgraphVersion: Scalars['String'];
    /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
    methodologyVersion: Scalars['String'];
    /**  The blockchain network this subgraph is indexing on  */
    network: gnosisPrimaryNetwork;
    /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
    type: gnosisPrimaryProtocolType;
    /**  The specific lending protocol type  */
    lendingType?: Maybe<gnosisPrimaryLendingType>;
    /**  The specific permissions required to lend in this protocol  */
    lenderPermissionType?: Maybe<gnosisPrimaryPermissionType>;
    /**  The specific permissions required to borrow from this protocol  */
    borrowerPermissionType?: Maybe<gnosisPrimaryPermissionType>;
    /**  The specific permissions required to create a pool (market) in this protocol  */
    poolCreatorPermissionType?: Maybe<gnosisPrimaryPermissionType>;
    /**  Risk type of the lending protocol  */
    riskType?: Maybe<gnosisPrimaryRiskType>;
    /**  The way a positions can be collateralized  */
    collateralizationType?: Maybe<gnosisPrimaryCollateralizationType>;
    /**  Current TVL (Total Value Locked) of the entire protocol  */
    totalValueLockedUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
    protocolControlledValueUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    cumulativeSupplySideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    cumulativeProtocolSideRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    cumulativeTotalRevenueUSD: Scalars['gnosisPrimaryBigDecimal'];
    /**  Total number of pools  */
    totalPoolCount: Scalars['Int'];
    /**  Daily usage metrics for this protocol  */
    dailyUsageMetrics: Array<gnosisPrimaryUsageMetricsDailySnapshot>;
    /**  Hourly usage metrics for this protocol  */
    hourlyUsageMetrics: Array<gnosisPrimaryUsageMetricsHourlySnapshot>;
    /**  Daily financial metrics for this protocol  */
    financialMetrics: Array<gnosisPrimaryFinancialsDailySnapshot>;
};
export type gnosisPrimaryProtocoldailyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>;
};
export type gnosisPrimaryProtocolhourlyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>;
};
export type gnosisPrimaryProtocolfinancialMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>;
};
export type gnosisPrimaryProtocolType = 'EXCHANGE' | 'LENDING' | 'YIELD' | 'BRIDGE' | 'GENERIC';
export type gnosisPrimaryProtocol_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug?: InputMaybe<Scalars['String']>;
    slug_not?: InputMaybe<Scalars['String']>;
    slug_gt?: InputMaybe<Scalars['String']>;
    slug_lt?: InputMaybe<Scalars['String']>;
    slug_gte?: InputMaybe<Scalars['String']>;
    slug_lte?: InputMaybe<Scalars['String']>;
    slug_in?: InputMaybe<Array<Scalars['String']>>;
    slug_not_in?: InputMaybe<Array<Scalars['String']>>;
    slug_contains?: InputMaybe<Scalars['String']>;
    slug_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_not_contains?: InputMaybe<Scalars['String']>;
    slug_not_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_starts_with?: InputMaybe<Scalars['String']>;
    slug_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_starts_with?: InputMaybe<Scalars['String']>;
    slug_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_ends_with?: InputMaybe<Scalars['String']>;
    slug_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_ends_with?: InputMaybe<Scalars['String']>;
    slug_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion?: InputMaybe<Scalars['String']>;
    schemaVersion_not?: InputMaybe<Scalars['String']>;
    schemaVersion_gt?: InputMaybe<Scalars['String']>;
    schemaVersion_lt?: InputMaybe<Scalars['String']>;
    schemaVersion_gte?: InputMaybe<Scalars['String']>;
    schemaVersion_lte?: InputMaybe<Scalars['String']>;
    schemaVersion_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion?: InputMaybe<Scalars['String']>;
    subgraphVersion_not?: InputMaybe<Scalars['String']>;
    subgraphVersion_gt?: InputMaybe<Scalars['String']>;
    subgraphVersion_lt?: InputMaybe<Scalars['String']>;
    subgraphVersion_gte?: InputMaybe<Scalars['String']>;
    subgraphVersion_lte?: InputMaybe<Scalars['String']>;
    subgraphVersion_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion?: InputMaybe<Scalars['String']>;
    methodologyVersion_not?: InputMaybe<Scalars['String']>;
    methodologyVersion_gt?: InputMaybe<Scalars['String']>;
    methodologyVersion_lt?: InputMaybe<Scalars['String']>;
    methodologyVersion_gte?: InputMaybe<Scalars['String']>;
    methodologyVersion_lte?: InputMaybe<Scalars['String']>;
    methodologyVersion_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    network?: InputMaybe<gnosisPrimaryNetwork>;
    network_not?: InputMaybe<gnosisPrimaryNetwork>;
    network_in?: InputMaybe<Array<gnosisPrimaryNetwork>>;
    network_not_in?: InputMaybe<Array<gnosisPrimaryNetwork>>;
    type?: InputMaybe<gnosisPrimaryProtocolType>;
    type_not?: InputMaybe<gnosisPrimaryProtocolType>;
    type_in?: InputMaybe<Array<gnosisPrimaryProtocolType>>;
    type_not_in?: InputMaybe<Array<gnosisPrimaryProtocolType>>;
    lendingType?: InputMaybe<gnosisPrimaryLendingType>;
    lendingType_not?: InputMaybe<gnosisPrimaryLendingType>;
    lendingType_in?: InputMaybe<Array<gnosisPrimaryLendingType>>;
    lendingType_not_in?: InputMaybe<Array<gnosisPrimaryLendingType>>;
    lenderPermissionType?: InputMaybe<gnosisPrimaryPermissionType>;
    lenderPermissionType_not?: InputMaybe<gnosisPrimaryPermissionType>;
    lenderPermissionType_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    lenderPermissionType_not_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    borrowerPermissionType?: InputMaybe<gnosisPrimaryPermissionType>;
    borrowerPermissionType_not?: InputMaybe<gnosisPrimaryPermissionType>;
    borrowerPermissionType_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    borrowerPermissionType_not_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    poolCreatorPermissionType?: InputMaybe<gnosisPrimaryPermissionType>;
    poolCreatorPermissionType_not?: InputMaybe<gnosisPrimaryPermissionType>;
    poolCreatorPermissionType_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    poolCreatorPermissionType_not_in?: InputMaybe<Array<gnosisPrimaryPermissionType>>;
    riskType?: InputMaybe<gnosisPrimaryRiskType>;
    riskType_not?: InputMaybe<gnosisPrimaryRiskType>;
    riskType_in?: InputMaybe<Array<gnosisPrimaryRiskType>>;
    riskType_not_in?: InputMaybe<Array<gnosisPrimaryRiskType>>;
    collateralizationType?: InputMaybe<gnosisPrimaryCollateralizationType>;
    collateralizationType_not?: InputMaybe<gnosisPrimaryCollateralizationType>;
    collateralizationType_in?: InputMaybe<Array<gnosisPrimaryCollateralizationType>>;
    collateralizationType_not_in?: InputMaybe<Array<gnosisPrimaryCollateralizationType>>;
    totalValueLockedUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    protocolControlledValueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    totalPoolCount?: InputMaybe<Scalars['Int']>;
    totalPoolCount_not?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyUsageMetrics_?: InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>;
    hourlyUsageMetrics_?: InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>;
    financialMetrics_?: InputMaybe<gnosisPrimaryFinancialsDailySnapshot_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryProtocol_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryProtocol_filter>>>;
};
export type gnosisPrimaryProtocol_orderBy = 'id' | 'protocol' | 'name' | 'slug' | 'schemaVersion' | 'subgraphVersion' | 'methodologyVersion' | 'network' | 'type' | 'lendingType' | 'lenderPermissionType' | 'borrowerPermissionType' | 'poolCreatorPermissionType' | 'riskType' | 'collateralizationType' | 'totalValueLockedUSD' | 'protocolControlledValueUSD' | 'cumulativeUniqueUsers' | 'cumulativeSupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'totalPoolCount' | 'dailyUsageMetrics' | 'hourlyUsageMetrics' | 'financialMetrics';
export type gnosisPrimaryRepay = gnosisPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that reduces their debt on this transaction  */
    account: gnosisPrimaryAccount;
    /**  Account that is providing the funds to repay the debt  */
    accountActor?: Maybe<gnosisPrimaryAccount>;
    /**  The market tokens are repaid/burned to  */
    market: gnosisPrimaryMarket;
    /**  The user position changed by this event  */
    position: gnosisPrimaryPosition;
    /**  Token repaid/burned  */
    asset: gnosisPrimaryToken;
    /**  Amount of token repaid/burned in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token repaid/burned in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryRepay_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<gnosisPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<gnosisPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<gnosisPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryRepay_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryRepay_filter>>>;
};
export type gnosisPrimaryRepay_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type gnosisPrimaryRevenueDetail = {
    /**  { Market/Protocol ID }{ Optional: Snapshot ID }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  The source of revenue (in alphabetical order)  */
    sources: Array<gnosisPrimaryFee>;
    /**  The amount of revenue in USD (same order as sources)  */
    amountsUSD: Array<Scalars['gnosisPrimaryBigDecimal']>;
};
export type gnosisPrimaryRevenueDetailsourcesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryFee_filter>;
};
export type gnosisPrimaryRevenueDetail_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    sources?: InputMaybe<Array<Scalars['String']>>;
    sources_not?: InputMaybe<Array<Scalars['String']>>;
    sources_contains?: InputMaybe<Array<Scalars['String']>>;
    sources_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    sources_not_contains?: InputMaybe<Array<Scalars['String']>>;
    sources_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    sources_?: InputMaybe<gnosisPrimaryFee_filter>;
    amountsUSD?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountsUSD_not?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountsUSD_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountsUSD_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountsUSD_not_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryRevenueDetail_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryRevenueDetail_filter>>>;
};
export type gnosisPrimaryRevenueDetail_orderBy = 'id' | 'sources' | 'amountsUSD';
export type gnosisPrimaryRewardToken = {
    /**  { Reward token type }-{ Smart contract address of the reward token }  */
    id: Scalars['ID'];
    /**  Reference to the actual token  */
    token: gnosisPrimaryToken;
    /**  The type of the reward token  */
    type: gnosisPrimaryRewardTokenType;
    _distributionEnd?: Maybe<Scalars['BigInt']>;
};
export type gnosisPrimaryRewardTokenType = 
/**  For reward tokens awarded to LPs/lenders  */
'DEPOSIT'
/**  For reward tokens awarded to borrowers of variable debt  */
 | 'VARIABLE_BORROW'
/**  For reward tokens awarded to borrowers of stable debt  */
 | 'STABLE_BORROW'
/**  For reward tokens awarded to stakers  */
 | 'STAKE';
export type gnosisPrimaryRewardToken_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    token?: InputMaybe<Scalars['String']>;
    token_not?: InputMaybe<Scalars['String']>;
    token_gt?: InputMaybe<Scalars['String']>;
    token_lt?: InputMaybe<Scalars['String']>;
    token_gte?: InputMaybe<Scalars['String']>;
    token_lte?: InputMaybe<Scalars['String']>;
    token_in?: InputMaybe<Array<Scalars['String']>>;
    token_not_in?: InputMaybe<Array<Scalars['String']>>;
    token_contains?: InputMaybe<Scalars['String']>;
    token_contains_nocase?: InputMaybe<Scalars['String']>;
    token_not_contains?: InputMaybe<Scalars['String']>;
    token_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token_starts_with?: InputMaybe<Scalars['String']>;
    token_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_starts_with?: InputMaybe<Scalars['String']>;
    token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_ends_with?: InputMaybe<Scalars['String']>;
    token_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_ends_with?: InputMaybe<Scalars['String']>;
    token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_?: InputMaybe<gnosisPrimaryToken_filter>;
    type?: InputMaybe<gnosisPrimaryRewardTokenType>;
    type_not?: InputMaybe<gnosisPrimaryRewardTokenType>;
    type_in?: InputMaybe<Array<gnosisPrimaryRewardTokenType>>;
    type_not_in?: InputMaybe<Array<gnosisPrimaryRewardTokenType>>;
    _distributionEnd?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_not?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_gt?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_lt?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_gte?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_lte?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _distributionEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryRewardToken_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryRewardToken_filter>>>;
};
export type gnosisPrimaryRewardToken_orderBy = 'id' | 'token' | 'token__id' | 'token__name' | 'token__symbol' | 'token__decimals' | 'token__lastPriceUSD' | 'token__lastPriceBlockNumber' | 'token__type' | 'token___iavsTokenType' | 'type' | '_distributionEnd';
export type gnosisPrimaryRiskType = 
/**  Global risk means each users position in a market is combined for one score to determine if they can be liquidated  */
'GLOBAL'
/**  Isolated risk means each users position in a market or CDP is isolated for risk of liquidation  */
 | 'ISOLATED';
export type gnosisPrimaryToken = {
    /**  Smart contract address of the token  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Name of the token, mirrored from the smart contract  */
    name: Scalars['String'];
    /**  Symbol of the token, mirrored from the smart contract  */
    symbol: Scalars['String'];
    /**  The number of decimal places this token uses, default to 18  */
    decimals: Scalars['Int'];
    /**  Optional field to track the price of a token, mostly for caching purposes  */
    lastPriceUSD?: Maybe<Scalars['gnosisPrimaryBigDecimal']>;
    /**  Optional field to track the block number of the last token price  */
    lastPriceBlockNumber?: Maybe<Scalars['BigInt']>;
    /**  The type of token the protocol creates for positions  */
    type?: Maybe<gnosisPrimaryTokenType>;
    /**  the market ID for underlying/asset token, aToken, vToken and sToken */
    _market?: Maybe<gnosisPrimaryMarket>;
    /**  type of token: inputToken, aToken, vToken, or sToken  */
    _iavsTokenType?: Maybe<Scalars['String']>;
};
export type gnosisPrimaryTokenType = 
/**  Rebasing tokens continuously adjust balances / supply as interest is accrued (e.g. Aave debt balances adjust at each block with interest)  */
'REBASING'
/**  Non-rebasing token balances / supply do not change as interest is accrued (e.g. Compound's cToken's do not adjust balance, the exchange rate changes with interest)  */
 | 'NON_REBASING';
export type gnosisPrimaryToken_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    symbol?: InputMaybe<Scalars['String']>;
    symbol_not?: InputMaybe<Scalars['String']>;
    symbol_gt?: InputMaybe<Scalars['String']>;
    symbol_lt?: InputMaybe<Scalars['String']>;
    symbol_gte?: InputMaybe<Scalars['String']>;
    symbol_lte?: InputMaybe<Scalars['String']>;
    symbol_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_contains?: InputMaybe<Scalars['String']>;
    symbol_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_contains?: InputMaybe<Scalars['String']>;
    symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_starts_with?: InputMaybe<Scalars['String']>;
    symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_ends_with?: InputMaybe<Scalars['String']>;
    symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    decimals?: InputMaybe<Scalars['Int']>;
    decimals_not?: InputMaybe<Scalars['Int']>;
    decimals_gt?: InputMaybe<Scalars['Int']>;
    decimals_lt?: InputMaybe<Scalars['Int']>;
    decimals_gte?: InputMaybe<Scalars['Int']>;
    decimals_lte?: InputMaybe<Scalars['Int']>;
    decimals_in?: InputMaybe<Array<Scalars['Int']>>;
    decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lastPriceUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    lastPriceUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    lastPriceUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    lastPriceUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    lastPriceUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    lastPriceUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    lastPriceUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    lastPriceUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    lastPriceBlockNumber?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    lastPriceBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    type?: InputMaybe<gnosisPrimaryTokenType>;
    type_not?: InputMaybe<gnosisPrimaryTokenType>;
    type_in?: InputMaybe<Array<gnosisPrimaryTokenType>>;
    type_not_in?: InputMaybe<Array<gnosisPrimaryTokenType>>;
    _market?: InputMaybe<Scalars['String']>;
    _market_not?: InputMaybe<Scalars['String']>;
    _market_gt?: InputMaybe<Scalars['String']>;
    _market_lt?: InputMaybe<Scalars['String']>;
    _market_gte?: InputMaybe<Scalars['String']>;
    _market_lte?: InputMaybe<Scalars['String']>;
    _market_in?: InputMaybe<Array<Scalars['String']>>;
    _market_not_in?: InputMaybe<Array<Scalars['String']>>;
    _market_contains?: InputMaybe<Scalars['String']>;
    _market_contains_nocase?: InputMaybe<Scalars['String']>;
    _market_not_contains?: InputMaybe<Scalars['String']>;
    _market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _market_starts_with?: InputMaybe<Scalars['String']>;
    _market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _market_not_starts_with?: InputMaybe<Scalars['String']>;
    _market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _market_ends_with?: InputMaybe<Scalars['String']>;
    _market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _market_not_ends_with?: InputMaybe<Scalars['String']>;
    _market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    _iavsTokenType?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not?: InputMaybe<Scalars['String']>;
    _iavsTokenType_gt?: InputMaybe<Scalars['String']>;
    _iavsTokenType_lt?: InputMaybe<Scalars['String']>;
    _iavsTokenType_gte?: InputMaybe<Scalars['String']>;
    _iavsTokenType_lte?: InputMaybe<Scalars['String']>;
    _iavsTokenType_in?: InputMaybe<Array<Scalars['String']>>;
    _iavsTokenType_not_in?: InputMaybe<Array<Scalars['String']>>;
    _iavsTokenType_contains?: InputMaybe<Scalars['String']>;
    _iavsTokenType_contains_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_contains?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_starts_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_starts_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_ends_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_ends_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryToken_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryToken_filter>>>;
};
export type gnosisPrimaryToken_orderBy = 'id' | 'name' | 'symbol' | 'decimals' | 'lastPriceUSD' | 'lastPriceBlockNumber' | 'type' | '_market' | '_market__id' | '_market__name' | '_market__isActive' | '_market__canBorrowFrom' | '_market__canUseAsCollateral' | '_market__maximumLTV' | '_market__liquidationThreshold' | '_market__liquidationPenalty' | '_market__canIsolate' | '_market__createdTimestamp' | '_market__createdBlockNumber' | '_market__relation' | '_market__stakedOutputTokenAmount' | '_market__inputTokenBalance' | '_market__inputTokenPriceUSD' | '_market__outputTokenSupply' | '_market__outputTokenPriceUSD' | '_market__exchangeRate' | '_market__reserves' | '_market__reserveFactor' | '_market__variableBorrowedTokenBalance' | '_market__stableBorrowedTokenBalance' | '_market__indexLastUpdatedTimestamp' | '_market__supplyIndex' | '_market__supplyCap' | '_market__borrowIndex' | '_market__borrowCap' | '_market__totalValueLockedUSD' | '_market__cumulativeSupplySideRevenueUSD' | '_market__cumulativeProtocolSideRevenueUSD' | '_market__cumulativeTotalRevenueUSD' | '_market__totalDepositBalanceUSD' | '_market__cumulativeDepositUSD' | '_market__totalBorrowBalanceUSD' | '_market__cumulativeBorrowUSD' | '_market__cumulativeLiquidateUSD' | '_market__cumulativeTransferUSD' | '_market__cumulativeFlashloanUSD' | '_market__transactionCount' | '_market__depositCount' | '_market__withdrawCount' | '_market__borrowCount' | '_market__repayCount' | '_market__liquidationCount' | '_market__transferCount' | '_market__flashloanCount' | '_market__cumulativeUniqueUsers' | '_market__cumulativeUniqueDepositors' | '_market__cumulativeUniqueBorrowers' | '_market__cumulativeUniqueLiquidators' | '_market__cumulativeUniqueLiquidatees' | '_market__cumulativeUniqueTransferrers' | '_market__cumulativeUniqueFlashloaners' | '_market__positionCount' | '_market__openPositionCount' | '_market__closedPositionCount' | '_market__lendingPositionCount' | '_market__borrowingPositionCount' | '_market___baseTrackingBorrowSpeed' | '_market___baseTrackingSupplySpeed' | '_market___lastRewardsUpdated' | '_market___liquidationProtocolFee' | '_market___siloedBorrowing' | '_iavsTokenType';
export type gnosisPrimaryTranche = 
/**  Senior denotes debt with a higher priority. The first debt to be paid back to lenders.  */
'SENIOR'
/**  Junior tranche denotes lower priority debt. This is secondary priority to be paid back to lenders.  */
 | 'JUNIOR';
export type gnosisPrimaryTransfer = gnosisPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  The account that sent the tokens  */
    sender: gnosisPrimaryAccount;
    /**  The Account that received the tokens  */
    receiver: gnosisPrimaryAccount;
    /**  The user positions changed by this event  */
    positions: Array<gnosisPrimaryPosition>;
    /**  The market associated with the token transfer  */
    market: gnosisPrimaryMarket;
    /**  The asset that was actually transferred. This could also include a debt token.  */
    asset: gnosisPrimaryToken;
    /**  Amount of token transferred in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token transferred in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryTransferpositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<gnosisPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<gnosisPrimaryOrderDirection>;
    where?: InputMaybe<gnosisPrimaryPosition_filter>;
};
export type gnosisPrimaryTransfer_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    sender?: InputMaybe<Scalars['String']>;
    sender_not?: InputMaybe<Scalars['String']>;
    sender_gt?: InputMaybe<Scalars['String']>;
    sender_lt?: InputMaybe<Scalars['String']>;
    sender_gte?: InputMaybe<Scalars['String']>;
    sender_lte?: InputMaybe<Scalars['String']>;
    sender_in?: InputMaybe<Array<Scalars['String']>>;
    sender_not_in?: InputMaybe<Array<Scalars['String']>>;
    sender_contains?: InputMaybe<Scalars['String']>;
    sender_contains_nocase?: InputMaybe<Scalars['String']>;
    sender_not_contains?: InputMaybe<Scalars['String']>;
    sender_not_contains_nocase?: InputMaybe<Scalars['String']>;
    sender_starts_with?: InputMaybe<Scalars['String']>;
    sender_starts_with_nocase?: InputMaybe<Scalars['String']>;
    sender_not_starts_with?: InputMaybe<Scalars['String']>;
    sender_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    sender_ends_with?: InputMaybe<Scalars['String']>;
    sender_ends_with_nocase?: InputMaybe<Scalars['String']>;
    sender_not_ends_with?: InputMaybe<Scalars['String']>;
    sender_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    sender_?: InputMaybe<gnosisPrimaryAccount_filter>;
    receiver?: InputMaybe<Scalars['String']>;
    receiver_not?: InputMaybe<Scalars['String']>;
    receiver_gt?: InputMaybe<Scalars['String']>;
    receiver_lt?: InputMaybe<Scalars['String']>;
    receiver_gte?: InputMaybe<Scalars['String']>;
    receiver_lte?: InputMaybe<Scalars['String']>;
    receiver_in?: InputMaybe<Array<Scalars['String']>>;
    receiver_not_in?: InputMaybe<Array<Scalars['String']>>;
    receiver_contains?: InputMaybe<Scalars['String']>;
    receiver_contains_nocase?: InputMaybe<Scalars['String']>;
    receiver_not_contains?: InputMaybe<Scalars['String']>;
    receiver_not_contains_nocase?: InputMaybe<Scalars['String']>;
    receiver_starts_with?: InputMaybe<Scalars['String']>;
    receiver_starts_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_not_starts_with?: InputMaybe<Scalars['String']>;
    receiver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_ends_with?: InputMaybe<Scalars['String']>;
    receiver_ends_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_not_ends_with?: InputMaybe<Scalars['String']>;
    receiver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_?: InputMaybe<gnosisPrimaryAccount_filter>;
    positions?: InputMaybe<Array<Scalars['String']>>;
    positions_not?: InputMaybe<Array<Scalars['String']>>;
    positions_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_?: InputMaybe<gnosisPrimaryPosition_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryTransfer_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryTransfer_filter>>>;
};
export type gnosisPrimaryTransfer_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'sender' | 'sender__id' | 'sender__positionCount' | 'sender__openPositionCount' | 'sender__closedPositionCount' | 'sender__depositCount' | 'sender__withdrawCount' | 'sender__borrowCount' | 'sender__repayCount' | 'sender__liquidateCount' | 'sender__liquidationCount' | 'sender__transferredCount' | 'sender__receivedCount' | 'sender__flashloanCount' | 'sender__rewardsClaimedUSD' | 'sender___eMode' | 'receiver' | 'receiver__id' | 'receiver__positionCount' | 'receiver__openPositionCount' | 'receiver__closedPositionCount' | 'receiver__depositCount' | 'receiver__withdrawCount' | 'receiver__borrowCount' | 'receiver__repayCount' | 'receiver__liquidateCount' | 'receiver__liquidationCount' | 'receiver__transferredCount' | 'receiver__receivedCount' | 'receiver__flashloanCount' | 'receiver__rewardsClaimedUSD' | 'receiver___eMode' | 'positions' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type gnosisPrimaryUsageMetricsDailySnapshot = {
    /**  ID is # of days since Unix epoch time  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Number of days since Unix epoch time  */
    days: Scalars['Int'];
    /**  Protocol this snapshot is associated with  */
    protocol: gnosisPrimaryLendingProtocol;
    /**  Number of unique daily active users. e.g. accounts that spent gas to interact with this protocol  */
    dailyActiveUsers: Scalars['Int'];
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Number of unique daily depositors  */
    dailyActiveDepositors: Scalars['Int'];
    /**  Number of cumulative depositors  */
    cumulativeUniqueDepositors: Scalars['Int'];
    /**  Number of unique daily borrowers  */
    dailyActiveBorrowers: Scalars['Int'];
    /**  Number of cumulative borrowers  */
    cumulativeUniqueBorrowers: Scalars['Int'];
    /**  Number of unique daily liquidators (accounts that performed liquidation)  */
    dailyActiveLiquidators: Scalars['Int'];
    /**  Number of cumulative liquidators (accounts that performed liquidation)  */
    cumulativeUniqueLiquidators: Scalars['Int'];
    /**  Number of unique daily liquidatees (accounts that got liquidated)  */
    dailyActiveLiquidatees: Scalars['Int'];
    /**  Number of cumulative liquidatees (accounts that got liquidated)  */
    cumulativeUniqueLiquidatees: Scalars['Int'];
    /**  Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.  */
    dailyTransactionCount: Scalars['Int'];
    /**  Total number of deposits in a day  */
    dailyDepositCount: Scalars['Int'];
    /**  Total number of withdrawals in a day  */
    dailyWithdrawCount: Scalars['Int'];
    /**  Total number of borrows/mints in a day  */
    dailyBorrowCount: Scalars['Int'];
    /**  Total number of repayments/burns in a day  */
    dailyRepayCount: Scalars['Int'];
    /**  Total number of liquidations in a day  */
    dailyLiquidateCount: Scalars['Int'];
    /**  Total number of transfers in a day  */
    dailyTransferCount: Scalars['Int'];
    /**  Total number of flashloans in a day  */
    dailyFlashloanCount: Scalars['Int'];
    /**  Total number of positions (open and closed)  */
    cumulativePositionCount: Scalars['Int'];
    /**  Total number of open positions  */
    openPositionCount: Scalars['Int'];
    /**  Total number of positions touched in a day. This includes opening, closing, and modifying positions.  */
    dailyActivePositions: Scalars['Int'];
    /**  Total number of pools  */
    totalPoolCount: Scalars['Int'];
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
};
export type gnosisPrimaryUsageMetricsDailySnapshot_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    days?: InputMaybe<Scalars['Int']>;
    days_not?: InputMaybe<Scalars['Int']>;
    days_gt?: InputMaybe<Scalars['Int']>;
    days_lt?: InputMaybe<Scalars['Int']>;
    days_gte?: InputMaybe<Scalars['Int']>;
    days_lte?: InputMaybe<Scalars['Int']>;
    days_in?: InputMaybe<Array<Scalars['Int']>>;
    days_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    dailyActiveUsers?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_not?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransactionCount?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_not?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_gt?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_lt?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_gte?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_lte?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_not?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_not?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_not?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_not?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_not?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_not?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_not?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_not?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActivePositions?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_not?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_gt?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_lt?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_gte?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_lte?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActivePositions_not_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount?: InputMaybe<Scalars['Int']>;
    totalPoolCount_not?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryUsageMetricsDailySnapshot_filter>>>;
};
export type gnosisPrimaryUsageMetricsDailySnapshot_orderBy = 'id' | 'days' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'dailyActiveUsers' | 'cumulativeUniqueUsers' | 'dailyActiveDepositors' | 'cumulativeUniqueDepositors' | 'dailyActiveBorrowers' | 'cumulativeUniqueBorrowers' | 'dailyActiveLiquidators' | 'cumulativeUniqueLiquidators' | 'dailyActiveLiquidatees' | 'cumulativeUniqueLiquidatees' | 'dailyTransactionCount' | 'dailyDepositCount' | 'dailyWithdrawCount' | 'dailyBorrowCount' | 'dailyRepayCount' | 'dailyLiquidateCount' | 'dailyTransferCount' | 'dailyFlashloanCount' | 'cumulativePositionCount' | 'openPositionCount' | 'dailyActivePositions' | 'totalPoolCount' | 'blockNumber' | 'timestamp';
export type gnosisPrimaryUsageMetricsHourlySnapshot = {
    /**  { # of hours since Unix epoch time }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Number of hours since Unix epoch time  */
    hours: Scalars['Int'];
    /**  Protocol this snapshot is associated with  */
    protocol: gnosisPrimaryLendingProtocol;
    /**  Number of unique hourly active users  */
    hourlyActiveUsers: Scalars['Int'];
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.  */
    hourlyTransactionCount: Scalars['Int'];
    /**  Total number of deposits in an hour  */
    hourlyDepositCount: Scalars['Int'];
    /**  Total number of withdrawals in an hour  */
    hourlyWithdrawCount: Scalars['Int'];
    /**  Total number of borrows/mints in an hour  */
    hourlyBorrowCount: Scalars['Int'];
    /**  Total number of repayments/burns in an hour  */
    hourlyRepayCount: Scalars['Int'];
    /**  Total number of liquidations in an hour  */
    hourlyLiquidateCount: Scalars['Int'];
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
};
export type gnosisPrimaryUsageMetricsHourlySnapshot_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hours?: InputMaybe<Scalars['Int']>;
    hours_not?: InputMaybe<Scalars['Int']>;
    hours_gt?: InputMaybe<Scalars['Int']>;
    hours_lt?: InputMaybe<Scalars['Int']>;
    hours_gte?: InputMaybe<Scalars['Int']>;
    hours_lte?: InputMaybe<Scalars['Int']>;
    hours_in?: InputMaybe<Array<Scalars['Int']>>;
    hours_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<gnosisPrimaryLendingProtocol_filter>;
    hourlyActiveUsers?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_not?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_gt?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_lt?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_gte?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_lte?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyTransactionCount?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_not?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyDepositCount?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_not?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyWithdrawCount?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyBorrowCount?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_not?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyBorrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyRepayCount?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_not?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyRepayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyLiquidateCount?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_not?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyLiquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryUsageMetricsHourlySnapshot_filter>>>;
};
export type gnosisPrimaryUsageMetricsHourlySnapshot_orderBy = 'id' | 'hours' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'hourlyActiveUsers' | 'cumulativeUniqueUsers' | 'hourlyTransactionCount' | 'hourlyDepositCount' | 'hourlyWithdrawCount' | 'hourlyBorrowCount' | 'hourlyRepayCount' | 'hourlyLiquidateCount' | 'blockNumber' | 'timestamp';
export type gnosisPrimaryWithdraw = gnosisPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['gnosisPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that controls the position (e.g. the aToken owner initiating the withdraw in Aave)  */
    account: gnosisPrimaryAccount;
    /**  Account that receives the underlying withdrawn amount  */
    accountActor?: Maybe<gnosisPrimaryAccount>;
    /**  The market tokens are withdrew from  */
    market: gnosisPrimaryMarket;
    /**  The user position changed by this event  */
    position: gnosisPrimaryPosition;
    /**  Token withdrawn  */
    asset: gnosisPrimaryToken;
    /**  Amount of token withdrawn in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token withdrawn in USD  */
    amountUSD: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimaryWithdraw_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<gnosisPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<gnosisPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<gnosisPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<gnosisPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<gnosisPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimaryWithdraw_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimaryWithdraw_filter>>>;
};
export type gnosisPrimaryWithdraw_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type gnosisPrimary_ActiveAccount = {
    /**  { daily/hourly }-{ Address of the account }-{ Optional: Transaction Type }-{ Optional: Market Address }-{ Optional: Days/hours since Unix epoch }  */
    id: Scalars['ID'];
};
export type gnosisPrimary_ActiveAccount_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimary_ActiveAccount_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimary_ActiveAccount_filter>>>;
};
export type gnosisPrimary_ActiveAccount_orderBy = 'id';
export type gnosisPrimary_Block_ = {
    /** The hash of the block */
    hash?: Maybe<Scalars['gnosisPrimaryBytes']>;
    /** The block number */
    number: Scalars['Int'];
    /** Integer representation of the timestamp stored in blocks for the chain */
    timestamp?: Maybe<Scalars['Int']>;
};
export type gnosisPrimary_DefaultOracle = {
    /**  protocol id  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  address of default oracle  */
    oracle: Scalars['gnosisPrimaryBytes'];
};
export type gnosisPrimary_DefaultOracle_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    oracle_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    oracle_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    oracle_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimary_DefaultOracle_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimary_DefaultOracle_filter>>>;
};
export type gnosisPrimary_DefaultOracle_orderBy = 'id' | 'oracle';
export type gnosisPrimary_FlashLoanPremium = {
    /**  protocol id  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  total premium rate  */
    premiumRateTotal: Scalars['gnosisPrimaryBigDecimal'];
    /**  premium rate to protocol  */
    premiumRateToProtocol: Scalars['gnosisPrimaryBigDecimal'];
};
export type gnosisPrimary_FlashLoanPremium_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    premiumRateTotal?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateTotal_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateTotal_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateTotal_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateTotal_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateTotal_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateTotal_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    premiumRateTotal_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    premiumRateToProtocol?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateToProtocol_not?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateToProtocol_gt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateToProtocol_lt?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateToProtocol_gte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateToProtocol_lte?: InputMaybe<Scalars['gnosisPrimaryBigDecimal']>;
    premiumRateToProtocol_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    premiumRateToProtocol_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimary_FlashLoanPremium_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimary_FlashLoanPremium_filter>>>;
};
export type gnosisPrimary_FlashLoanPremium_orderBy = 'id' | 'premiumRateTotal' | 'premiumRateToProtocol';
export type gnosisPrimary_MarketList = {
    /**  Same ID as LendingProtocol  */
    id: Scalars['gnosisPrimaryBytes'];
    /**  IDs of all markets in the LendingProtocol  */
    markets: Array<Scalars['gnosisPrimaryBytes']>;
};
export type gnosisPrimary_MarketList_filter = {
    id?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['gnosisPrimaryBytes']>;
    markets?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    markets_not?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    markets_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    markets_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    markets_not_contains?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    markets_not_contains_nocase?: InputMaybe<Array<Scalars['gnosisPrimaryBytes']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimary_MarketList_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimary_MarketList_filter>>>;
};
export type gnosisPrimary_MarketList_orderBy = 'id' | 'markets';
/** The type for the top-level _meta field */
export type gnosisPrimary_Meta_ = {
    /**
     * Information about a specific subgraph block. The hash of the block
     * will be null if the _meta field has a block constraint that asks for
     * a block number. It will be filled if the _meta field has no block constraint
     * and therefore asks for the latest  block
     *
     */
    block: gnosisPrimary_Block_;
    /** The deployment ID */
    deployment: Scalars['String'];
    /** If `true`, the subgraph encountered indexing errors at some past block */
    hasIndexingErrors: Scalars['Boolean'];
};
export type gnosisPrimary_PositionCounter = {
    /**  { Account address }-{ Market address }-{ Position Side }  */
    id: Scalars['ID'];
    /**  Next count  */
    nextCount: Scalars['Int'];
    /**  The last timestamp this position was updated  */
    lastTimestamp: Scalars['BigInt'];
};
export type gnosisPrimary_PositionCounter_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    nextCount?: InputMaybe<Scalars['Int']>;
    nextCount_not?: InputMaybe<Scalars['Int']>;
    nextCount_gt?: InputMaybe<Scalars['Int']>;
    nextCount_lt?: InputMaybe<Scalars['Int']>;
    nextCount_gte?: InputMaybe<Scalars['Int']>;
    nextCount_lte?: InputMaybe<Scalars['Int']>;
    nextCount_in?: InputMaybe<Array<Scalars['Int']>>;
    nextCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lastTimestamp?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_not?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    lastTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<gnosisPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<gnosisPrimary_PositionCounter_filter>>>;
    or?: InputMaybe<Array<InputMaybe<gnosisPrimary_PositionCounter_filter>>>;
};
export type gnosisPrimary_PositionCounter_orderBy = 'id' | 'nextCount' | 'lastTimestamp';
export type gnosisPrimary_SubgraphErrorPolicy_ = 
/** Data will be returned even if the subgraph has indexing errors */
'allow'
/** If the subgraph has indexing errors, data will be omitted. The default. */
 | 'deny';
export type ethereumPrimaryAccount = {
    /**  { Account address }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Number of positions this account has  */
    positionCount: Scalars['Int'];
    /**  All positions that belong to this account  */
    positions: Array<ethereumPrimaryPosition>;
    /**  Number of open positions this account has  */
    openPositionCount: Scalars['Int'];
    /**  Number of closed positions this account has  */
    closedPositionCount: Scalars['Int'];
    /**  Number of deposits this account made  */
    depositCount: Scalars['Int'];
    /**  All deposit events of this account  */
    deposits: Array<ethereumPrimaryDeposit>;
    /**  Number of withdrawals this account made  */
    withdrawCount: Scalars['Int'];
    /**  All withdraw events of this account  */
    withdraws: Array<ethereumPrimaryWithdraw>;
    /**  Number of borrows this account made  */
    borrowCount: Scalars['Int'];
    /**  All borrow events of this account  */
    borrows: Array<ethereumPrimaryBorrow>;
    /**  Number of repays this account made  */
    repayCount: Scalars['Int'];
    /**  All repay events of this account  */
    repays: Array<ethereumPrimaryRepay>;
    /**  Number of times this account liquidated a position  */
    liquidateCount: Scalars['Int'];
    /**  All liquidation events where this account was the liquidator  */
    liquidates: Array<ethereumPrimaryLiquidate>;
    /**  Number of times this account has been liquidated  */
    liquidationCount: Scalars['Int'];
    /**  All liquidation events where this account got liquidated  */
    liquidations: Array<ethereumPrimaryLiquidate>;
    /**  Number of times this account has transferred  */
    transferredCount: Scalars['Int'];
    /**  All transfer events where this account was the sender  */
    transfers: Array<ethereumPrimaryTransfer>;
    /**  Number of times this account has received a transfer  */
    receivedCount: Scalars['Int'];
    /**  All transfer events where this account was the receiver  */
    receives: Array<ethereumPrimaryTransfer>;
    /**  Number of times this account has executed a flashloan  */
    flashloanCount: Scalars['Int'];
    /**  All flashloan events where this account executed it  */
    flashloans: Array<ethereumPrimaryFlashloan>;
    /**  The amount of rewards claimed by this account in USD (use the USD value at the time of claiming)  */
    rewardsClaimedUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Markets that the account is using as collateral  */
    _enabledCollaterals?: Maybe<Array<ethereumPrimaryMarket>>;
    /**  efficient mode flag  */
    _eMode?: Maybe<Scalars['Boolean']>;
};
export type ethereumPrimaryAccountpositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPosition_filter>;
};
export type ethereumPrimaryAccountdepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryDeposit_filter>;
};
export type ethereumPrimaryAccountwithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryWithdraw_filter>;
};
export type ethereumPrimaryAccountborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryBorrow_filter>;
};
export type ethereumPrimaryAccountrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRepay_filter>;
};
export type ethereumPrimaryAccountliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLiquidate_filter>;
};
export type ethereumPrimaryAccountliquidationsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLiquidate_filter>;
};
export type ethereumPrimaryAccounttransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryTransfer_filter>;
};
export type ethereumPrimaryAccountreceivesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryTransfer_filter>;
};
export type ethereumPrimaryAccountflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFlashloan_filter>;
};
export type ethereumPrimaryAccount_enabledCollateralsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarket_filter>;
};
export type ethereumPrimaryAccount_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    positionCount?: InputMaybe<Scalars['Int']>;
    positionCount_not?: InputMaybe<Scalars['Int']>;
    positionCount_gt?: InputMaybe<Scalars['Int']>;
    positionCount_lt?: InputMaybe<Scalars['Int']>;
    positionCount_gte?: InputMaybe<Scalars['Int']>;
    positionCount_lte?: InputMaybe<Scalars['Int']>;
    positionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    positions_?: InputMaybe<ethereumPrimaryPosition_filter>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount?: InputMaybe<Scalars['Int']>;
    closedPositionCount_not?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    deposits_?: InputMaybe<ethereumPrimaryDeposit_filter>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdraws_?: InputMaybe<ethereumPrimaryWithdraw_filter>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrows_?: InputMaybe<ethereumPrimaryBorrow_filter>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repays_?: InputMaybe<ethereumPrimaryRepay_filter>;
    liquidateCount?: InputMaybe<Scalars['Int']>;
    liquidateCount_not?: InputMaybe<Scalars['Int']>;
    liquidateCount_gt?: InputMaybe<Scalars['Int']>;
    liquidateCount_lt?: InputMaybe<Scalars['Int']>;
    liquidateCount_gte?: InputMaybe<Scalars['Int']>;
    liquidateCount_lte?: InputMaybe<Scalars['Int']>;
    liquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidates_?: InputMaybe<ethereumPrimaryLiquidate_filter>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidations_?: InputMaybe<ethereumPrimaryLiquidate_filter>;
    transferredCount?: InputMaybe<Scalars['Int']>;
    transferredCount_not?: InputMaybe<Scalars['Int']>;
    transferredCount_gt?: InputMaybe<Scalars['Int']>;
    transferredCount_lt?: InputMaybe<Scalars['Int']>;
    transferredCount_gte?: InputMaybe<Scalars['Int']>;
    transferredCount_lte?: InputMaybe<Scalars['Int']>;
    transferredCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferredCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transfers_?: InputMaybe<ethereumPrimaryTransfer_filter>;
    receivedCount?: InputMaybe<Scalars['Int']>;
    receivedCount_not?: InputMaybe<Scalars['Int']>;
    receivedCount_gt?: InputMaybe<Scalars['Int']>;
    receivedCount_lt?: InputMaybe<Scalars['Int']>;
    receivedCount_gte?: InputMaybe<Scalars['Int']>;
    receivedCount_lte?: InputMaybe<Scalars['Int']>;
    receivedCount_in?: InputMaybe<Array<Scalars['Int']>>;
    receivedCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    receives_?: InputMaybe<ethereumPrimaryTransfer_filter>;
    flashloanCount?: InputMaybe<Scalars['Int']>;
    flashloanCount_not?: InputMaybe<Scalars['Int']>;
    flashloanCount_gt?: InputMaybe<Scalars['Int']>;
    flashloanCount_lt?: InputMaybe<Scalars['Int']>;
    flashloanCount_gte?: InputMaybe<Scalars['Int']>;
    flashloanCount_lte?: InputMaybe<Scalars['Int']>;
    flashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloans_?: InputMaybe<ethereumPrimaryFlashloan_filter>;
    rewardsClaimedUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rewardsClaimedUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rewardsClaimedUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rewardsClaimedUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rewardsClaimedUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rewardsClaimedUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rewardsClaimedUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardsClaimedUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    _enabledCollaterals?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_not?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_contains?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_not_contains?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    _enabledCollaterals_?: InputMaybe<ethereumPrimaryMarket_filter>;
    _eMode?: InputMaybe<Scalars['Boolean']>;
    _eMode_not?: InputMaybe<Scalars['Boolean']>;
    _eMode_in?: InputMaybe<Array<Scalars['Boolean']>>;
    _eMode_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryAccount_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryAccount_filter>>>;
};
export type ethereumPrimaryAccount_orderBy = 'id' | 'positionCount' | 'positions' | 'openPositionCount' | 'closedPositionCount' | 'depositCount' | 'deposits' | 'withdrawCount' | 'withdraws' | 'borrowCount' | 'borrows' | 'repayCount' | 'repays' | 'liquidateCount' | 'liquidates' | 'liquidationCount' | 'liquidations' | 'transferredCount' | 'transfers' | 'receivedCount' | 'receives' | 'flashloanCount' | 'flashloans' | 'rewardsClaimedUSD' | '_enabledCollaterals' | '_eMode';
export type ethereumPrimaryBlockChangedFilter = {
    number_gte: Scalars['Int'];
};
export type ethereumPrimaryBlock_height = {
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    number?: InputMaybe<Scalars['Int']>;
    number_gte?: InputMaybe<Scalars['Int']>;
};
export type ethereumPrimaryBorrow = ethereumPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that controls incurs debt in this transaction  */
    account: ethereumPrimaryAccount;
    /**  Account that receives the funds from the new debt  */
    accountActor?: Maybe<ethereumPrimaryAccount>;
    /**  The market tokens are borrowed/minted from  */
    market: ethereumPrimaryMarket;
    /**  The user position changed by this event  */
    position: ethereumPrimaryPosition;
    /**  Token borrowed  */
    asset: ethereumPrimaryToken;
    /**  Amount of token borrowed in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token borrowed in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryBorrow_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<ethereumPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<ethereumPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<ethereumPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryBorrow_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryBorrow_filter>>>;
};
export type ethereumPrimaryBorrow_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type ethereumPrimaryCollateralizationType = 
/**  Over collateralized protocols require users to put up more collateral than the amount borrowed.  */
'OVER_COLLATERALIZED'
/**  Protocols that allow users to borrow more than their collateral locked.   */
 | 'UNDER_COLLATERALIZED'
/**  Protocols that allow users to borrow without any collateral. Generally this protocol is KYC'd and only whitelist users can do this  */
 | 'UNCOLLATERALIZED';
export type ethereumPrimaryDeposit = ethereumPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /** Account where deposit was executed (e.g. a deposit on behalf of account) */
    account: ethereumPrimaryAccount;
    /**  Account that executed the deposit (e.g. a deposit on behalf of account)  */
    accountActor?: Maybe<ethereumPrimaryAccount>;
    /**  The market tokens are deposited to  */
    market: ethereumPrimaryMarket;
    /**  The user position changed by this event  */
    position: ethereumPrimaryPosition;
    /**  Token deposited  */
    asset: ethereumPrimaryToken;
    /**  Amount of token deposited in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token deposited in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryDeposit_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<ethereumPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<ethereumPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<ethereumPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryDeposit_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryDeposit_filter>>>;
};
export type ethereumPrimaryDeposit_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
/**
 * An event is any user action that occurs in a protocol. Generally, they are Ethereum events
 * emitted by a function in the smart contracts, stored in transaction receipts as event logs.
 * However, some user actions of interest are function calls that don't emit events. For example,
 * the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
 * store them as events, although they are not technically Ethereum events emitted by smart
 * contracts.
 *
 */
export type ethereumPrimaryEvent = {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  The market tokens are deposited to  */
    market: ethereumPrimaryMarket;
    /**  Token deposited  */
    asset: ethereumPrimaryToken;
    /**  Amount of token deposited in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token deposited in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryEvent_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryEvent_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryEvent_filter>>>;
};
export type ethereumPrimaryEvent_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type ethereumPrimaryFee = {
    /**  { Fee type }  */
    id: Scalars['ID'];
    /**  Fee in percentage. E.g. 5.21% should be stored as 5.21  */
    rate?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  A flat fee in the native token. This may be a base fee in addition to the rate, or the only fee.  */
    flatFee?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  The type of fee (e.g. liquidation, admin, etc.)  */
    type: ethereumPrimaryFeeType;
};
export type ethereumPrimaryFeeType = 
/**  Fees from liquidations  */
'LIQUIDATION_FEE'
/**  Fees given to an admin  */
 | 'ADMIN_FEE'
/**  Fees that are taken by the protocol  */
 | 'PROTOCOL_FEE'
/**  Fee to mint an asset. Found mostly in CDPs  */
 | 'MINT_FEE'
/**  Fee taken on withdrawal. e.g. found in Euler  */
 | 'WITHDRAW_FEE'
/**  Flashloan Fees taken by the protocol  */
 | 'FLASHLOAN_PROTOCOL_FEE'
/**  Flashloan Fees taken by LP  */
 | 'FLASHLOAN_LP_FEE'
/**  Any fee not represented here. Please make a github issue for this to be added: https://github.com/messari/subgraphs/issues/new  */
 | 'OTHER';
export type ethereumPrimaryFee_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    rate?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rate_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    flatFee?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    flatFee_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    flatFee_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    flatFee_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    flatFee_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    flatFee_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    flatFee_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    flatFee_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    type?: InputMaybe<ethereumPrimaryFeeType>;
    type_not?: InputMaybe<ethereumPrimaryFeeType>;
    type_in?: InputMaybe<Array<ethereumPrimaryFeeType>>;
    type_not_in?: InputMaybe<Array<ethereumPrimaryFeeType>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryFee_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryFee_filter>>>;
};
export type ethereumPrimaryFee_orderBy = 'id' | 'rate' | 'flatFee' | 'type';
export type ethereumPrimaryFinancialsDailySnapshot = {
    /**  ID is # of days since Unix epoch time  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Number of days since Unix epoch time  */
    days: Scalars['Int'];
    /**  Protocol this snapshot is associated with  */
    protocol: ethereumPrimaryLendingProtocol;
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  Current TVL (Total Value Locked) of the entire protocol  */
    totalValueLockedUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
    protocolControlledValueUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP  */
    mintedTokenSupplies?: Maybe<Array<Scalars['BigInt']>>;
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    dailySupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    cumulativeSupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    dailyProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    cumulativeProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    dailyTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    cumulativeTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<ethereumPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets, in USD. Note this metric should be the same as TVL.  */
    totalDepositBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets deposited on a given day, in USD  */
    dailyDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets, in USD.  */
    totalBorrowBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets borrowed/minted on a given day, in USD.  */
    dailyBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination).  */
    cumulativeBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets liquidated on a given day, in USD.  */
    dailyLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given day, in USD.  */
    dailyWithdrawUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets repaid on a given day, in USD.  */
    dailyRepayUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets transferred on a given day, in USD.  */
    dailyTransferUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total flashloans executed on a given day, in USD.  */
    dailyFlashloanUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryFinancialsDailySnapshot_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    days?: InputMaybe<Scalars['Int']>;
    days_not?: InputMaybe<Scalars['Int']>;
    days_gt?: InputMaybe<Scalars['Int']>;
    days_lt?: InputMaybe<Scalars['Int']>;
    days_gte?: InputMaybe<Scalars['Int']>;
    days_lte?: InputMaybe<Scalars['Int']>;
    days_in?: InputMaybe<Array<Scalars['Int']>>;
    days_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    protocolControlledValueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    mintedTokenSupplies?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    dailySupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<ethereumPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyWithdrawUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyWithdrawUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyRepayUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyRepayUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyTransferUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyTransferUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyFlashloanUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyFlashloanUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>>>;
};
export type ethereumPrimaryFinancialsDailySnapshot_orderBy = 'id' | 'days' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'blockNumber' | 'timestamp' | 'totalValueLockedUSD' | 'protocolControlledValueUSD' | 'mintedTokenSupplies' | 'dailySupplySideRevenueUSD' | 'cumulativeSupplySideRevenueUSD' | 'dailyProtocolSideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'dailyTotalRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'dailyDepositUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'dailyBorrowUSD' | 'cumulativeBorrowUSD' | 'dailyLiquidateUSD' | 'cumulativeLiquidateUSD' | 'dailyWithdrawUSD' | 'dailyRepayUSD' | 'dailyTransferUSD' | 'dailyFlashloanUSD';
export type ethereumPrimaryFlashloan = ethereumPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that receives the funds from the flashloan  */
    account: ethereumPrimaryAccount;
    /**  Account that initiates the flashloan  */
    accountActor?: Maybe<ethereumPrimaryAccount>;
    /**  The market in which this flashloan is executed  */
    market: ethereumPrimaryMarket;
    /**  Asset borrowed  */
    asset: ethereumPrimaryToken;
    /**  Amount of asset borrowed in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of asset borrowed in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Amount of asset taken by protocol as a fee in native units  */
    feeAmount?: Maybe<Scalars['BigInt']>;
    /**  Amount of asset taken by protocol as a fee in USD  */
    feeAmountUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
};
export type ethereumPrimaryFlashloan_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<ethereumPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<ethereumPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    feeAmount?: InputMaybe<Scalars['BigInt']>;
    feeAmount_not?: InputMaybe<Scalars['BigInt']>;
    feeAmount_gt?: InputMaybe<Scalars['BigInt']>;
    feeAmount_lt?: InputMaybe<Scalars['BigInt']>;
    feeAmount_gte?: InputMaybe<Scalars['BigInt']>;
    feeAmount_lte?: InputMaybe<Scalars['BigInt']>;
    feeAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    feeAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    feeAmountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    feeAmountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    feeAmountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    feeAmountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    feeAmountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    feeAmountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    feeAmountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    feeAmountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryFlashloan_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryFlashloan_filter>>>;
};
export type ethereumPrimaryFlashloan_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD' | 'feeAmount' | 'feeAmountUSD';
export type ethereumPrimaryInterestRate = {
    /**  { Interest rate side }-{ Interest rate type }-{ Market ID }-{ Optional: Tranche }-{ Optional: # days/hours since epoch time }  */
    id: Scalars['ID'];
    /**  Interest rate in percentage APY. E.g. 5.21% should be stored as 5.21  */
    rate: Scalars['ethereumPrimaryBigDecimal'];
    /**  Duration of the loan in days. Only applies to fixed term lending (e.g. Notional)  */
    duration?: Maybe<Scalars['Int']>;
    /**  Maturity of the loan in block height. Only applies to fixed term lending (e.g. Notional)  */
    maturityBlock?: Maybe<Scalars['BigInt']>;
    /**  The party the interest is paid to / received from  */
    side: ethereumPrimaryInterestRateSide;
    /**  The type of interest rate (e.g. stable, fixed, variable, etc)  */
    type: ethereumPrimaryInterestRateType;
    /**  The level of debt priority at this interest rate  */
    tranche?: Maybe<ethereumPrimaryTranche>;
};
export type ethereumPrimaryInterestRateSide = 
/**  Interest rate accrued by lenders  */
'LENDER'
/**  Interest rate paid by borrowers  */
 | 'BORROWER';
export type ethereumPrimaryInterestRateType = 
/**  Stable interest rate (e.g. Aave)  */
'STABLE'
/**  Variable interest rate (e.g. Compound)  */
 | 'VARIABLE'
/**  Fixed interest rate (e.g. Notional)  */
 | 'FIXED';
export type ethereumPrimaryInterestRate_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    rate?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    rate_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rate_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    duration?: InputMaybe<Scalars['Int']>;
    duration_not?: InputMaybe<Scalars['Int']>;
    duration_gt?: InputMaybe<Scalars['Int']>;
    duration_lt?: InputMaybe<Scalars['Int']>;
    duration_gte?: InputMaybe<Scalars['Int']>;
    duration_lte?: InputMaybe<Scalars['Int']>;
    duration_in?: InputMaybe<Array<Scalars['Int']>>;
    duration_not_in?: InputMaybe<Array<Scalars['Int']>>;
    maturityBlock?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_not?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_gt?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_lt?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_gte?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_lte?: InputMaybe<Scalars['BigInt']>;
    maturityBlock_in?: InputMaybe<Array<Scalars['BigInt']>>;
    maturityBlock_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    side?: InputMaybe<ethereumPrimaryInterestRateSide>;
    side_not?: InputMaybe<ethereumPrimaryInterestRateSide>;
    side_in?: InputMaybe<Array<ethereumPrimaryInterestRateSide>>;
    side_not_in?: InputMaybe<Array<ethereumPrimaryInterestRateSide>>;
    type?: InputMaybe<ethereumPrimaryInterestRateType>;
    type_not?: InputMaybe<ethereumPrimaryInterestRateType>;
    type_in?: InputMaybe<Array<ethereumPrimaryInterestRateType>>;
    type_not_in?: InputMaybe<Array<ethereumPrimaryInterestRateType>>;
    tranche?: InputMaybe<ethereumPrimaryTranche>;
    tranche_not?: InputMaybe<ethereumPrimaryTranche>;
    tranche_in?: InputMaybe<Array<ethereumPrimaryTranche>>;
    tranche_not_in?: InputMaybe<Array<ethereumPrimaryTranche>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryInterestRate_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryInterestRate_filter>>>;
};
export type ethereumPrimaryInterestRate_orderBy = 'id' | 'rate' | 'duration' | 'maturityBlock' | 'side' | 'type' | 'tranche';
export type ethereumPrimaryLendingProtocol = ethereumPrimaryProtocol & {
    /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Base name of the protocol, excluding transformations. e.g. Aave  */
    protocol: Scalars['String'];
    /**  Name of the protocol, including version. e.g. Aave v2  */
    name: Scalars['String'];
    /**  Slug of protocol, including version. e.g. aave-v2  */
    slug: Scalars['String'];
    /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
    schemaVersion: Scalars['String'];
    /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
    subgraphVersion: Scalars['String'];
    /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
    methodologyVersion: Scalars['String'];
    /**  The blockchain network this subgraph is indexing on  */
    network: ethereumPrimaryNetwork;
    /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
    type: ethereumPrimaryProtocolType;
    /**  The specific lending protocol type  */
    lendingType?: Maybe<ethereumPrimaryLendingType>;
    /**  The specific permissions required to lend in this protocol  */
    lenderPermissionType?: Maybe<ethereumPrimaryPermissionType>;
    /**  The specific permissions required to borrow from this protocol  */
    borrowerPermissionType?: Maybe<ethereumPrimaryPermissionType>;
    /**  The specific permissions required to create a pool (market) in this protocol  */
    poolCreatorPermissionType?: Maybe<ethereumPrimaryPermissionType>;
    /**  Risk type of the lending protocol  */
    riskType?: Maybe<ethereumPrimaryRiskType>;
    /**  The way a positions can be collateralized  */
    collateralizationType?: Maybe<ethereumPrimaryCollateralizationType>;
    /**  Tokens that can be minted. Only applies to CDP (usually stable coins)  */
    mintedTokens?: Maybe<Array<ethereumPrimaryToken>>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs.  */
    rewardTokens?: Maybe<Array<ethereumPrimaryRewardToken>>;
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Number of cumulative depositors  */
    cumulativeUniqueDepositors: Scalars['Int'];
    /**  Number of cumulative borrowers  */
    cumulativeUniqueBorrowers: Scalars['Int'];
    /**  Number of cumulative liquidators (accounts that performed liquidation)  */
    cumulativeUniqueLiquidators: Scalars['Int'];
    /**  Number of cumulative liquidatees (accounts that got liquidated)  */
    cumulativeUniqueLiquidatees: Scalars['Int'];
    /**  Current TVL (Total Value Locked) of the entire protocol  */
    totalValueLockedUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
    protocolControlledValueUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    cumulativeSupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    cumulativeProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    cumulativeTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All fees in the protocol. Fee should be in percentage format. e.g. 0.30% liquidation fee  */
    fees?: Maybe<Array<ethereumPrimaryFee>>;
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<ethereumPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets, in USD. Note this metric should be the same as TVL.  */
    totalDepositBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD.  */
    totalBorrowBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination).  */
    cumulativeBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total supply of minted tokens in native amounts, with same ordering as mintedTokens. Only applies to CDP  */
    mintedTokenSupplies?: Maybe<Array<Scalars['BigInt']>>;
    /**  Total number of pools  */
    totalPoolCount: Scalars['Int'];
    /**  Total number of open positions  */
    openPositionCount: Scalars['Int'];
    /**  Total number of positions (open and closed)  */
    cumulativePositionCount: Scalars['Int'];
    /**  Total number of transactions  */
    transactionCount: Scalars['Int'];
    /**  Total number of deposits  */
    depositCount: Scalars['Int'];
    /**  Total number of withdrawals  */
    withdrawCount: Scalars['Int'];
    /**  Total number of borrows  */
    borrowCount: Scalars['Int'];
    /**  Total number of repayments  */
    repayCount: Scalars['Int'];
    /**  Total number of liquidations  */
    liquidationCount: Scalars['Int'];
    /**  Total number of transfers  */
    transferCount: Scalars['Int'];
    /**  Total number of flashloans  */
    flashloanCount: Scalars['Int'];
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /**  Daily usage metrics for this protocol  */
    dailyUsageMetrics: Array<ethereumPrimaryUsageMetricsDailySnapshot>;
    /**  Hourly usage metrics for this protocol  */
    hourlyUsageMetrics: Array<ethereumPrimaryUsageMetricsHourlySnapshot>;
    /**  Daily financial metrics for this protocol  */
    financialMetrics: Array<ethereumPrimaryFinancialsDailySnapshot>;
    /**  All markets that belong to this protocol  */
    markets: Array<ethereumPrimaryMarket>;
};
export type ethereumPrimaryLendingProtocolmintedTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryToken_filter>;
};
export type ethereumPrimaryLendingProtocolrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRewardToken_filter>;
};
export type ethereumPrimaryLendingProtocolfeesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFee_filter>;
};
export type ethereumPrimaryLendingProtocoldailyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>;
};
export type ethereumPrimaryLendingProtocolhourlyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>;
};
export type ethereumPrimaryLendingProtocolfinancialMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>;
};
export type ethereumPrimaryLendingProtocolmarketsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarket_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarket_filter>;
};
export type ethereumPrimaryLendingProtocol_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug?: InputMaybe<Scalars['String']>;
    slug_not?: InputMaybe<Scalars['String']>;
    slug_gt?: InputMaybe<Scalars['String']>;
    slug_lt?: InputMaybe<Scalars['String']>;
    slug_gte?: InputMaybe<Scalars['String']>;
    slug_lte?: InputMaybe<Scalars['String']>;
    slug_in?: InputMaybe<Array<Scalars['String']>>;
    slug_not_in?: InputMaybe<Array<Scalars['String']>>;
    slug_contains?: InputMaybe<Scalars['String']>;
    slug_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_not_contains?: InputMaybe<Scalars['String']>;
    slug_not_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_starts_with?: InputMaybe<Scalars['String']>;
    slug_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_starts_with?: InputMaybe<Scalars['String']>;
    slug_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_ends_with?: InputMaybe<Scalars['String']>;
    slug_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_ends_with?: InputMaybe<Scalars['String']>;
    slug_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion?: InputMaybe<Scalars['String']>;
    schemaVersion_not?: InputMaybe<Scalars['String']>;
    schemaVersion_gt?: InputMaybe<Scalars['String']>;
    schemaVersion_lt?: InputMaybe<Scalars['String']>;
    schemaVersion_gte?: InputMaybe<Scalars['String']>;
    schemaVersion_lte?: InputMaybe<Scalars['String']>;
    schemaVersion_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion?: InputMaybe<Scalars['String']>;
    subgraphVersion_not?: InputMaybe<Scalars['String']>;
    subgraphVersion_gt?: InputMaybe<Scalars['String']>;
    subgraphVersion_lt?: InputMaybe<Scalars['String']>;
    subgraphVersion_gte?: InputMaybe<Scalars['String']>;
    subgraphVersion_lte?: InputMaybe<Scalars['String']>;
    subgraphVersion_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion?: InputMaybe<Scalars['String']>;
    methodologyVersion_not?: InputMaybe<Scalars['String']>;
    methodologyVersion_gt?: InputMaybe<Scalars['String']>;
    methodologyVersion_lt?: InputMaybe<Scalars['String']>;
    methodologyVersion_gte?: InputMaybe<Scalars['String']>;
    methodologyVersion_lte?: InputMaybe<Scalars['String']>;
    methodologyVersion_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    network?: InputMaybe<ethereumPrimaryNetwork>;
    network_not?: InputMaybe<ethereumPrimaryNetwork>;
    network_in?: InputMaybe<Array<ethereumPrimaryNetwork>>;
    network_not_in?: InputMaybe<Array<ethereumPrimaryNetwork>>;
    type?: InputMaybe<ethereumPrimaryProtocolType>;
    type_not?: InputMaybe<ethereumPrimaryProtocolType>;
    type_in?: InputMaybe<Array<ethereumPrimaryProtocolType>>;
    type_not_in?: InputMaybe<Array<ethereumPrimaryProtocolType>>;
    lendingType?: InputMaybe<ethereumPrimaryLendingType>;
    lendingType_not?: InputMaybe<ethereumPrimaryLendingType>;
    lendingType_in?: InputMaybe<Array<ethereumPrimaryLendingType>>;
    lendingType_not_in?: InputMaybe<Array<ethereumPrimaryLendingType>>;
    lenderPermissionType?: InputMaybe<ethereumPrimaryPermissionType>;
    lenderPermissionType_not?: InputMaybe<ethereumPrimaryPermissionType>;
    lenderPermissionType_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    lenderPermissionType_not_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    borrowerPermissionType?: InputMaybe<ethereumPrimaryPermissionType>;
    borrowerPermissionType_not?: InputMaybe<ethereumPrimaryPermissionType>;
    borrowerPermissionType_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    borrowerPermissionType_not_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    poolCreatorPermissionType?: InputMaybe<ethereumPrimaryPermissionType>;
    poolCreatorPermissionType_not?: InputMaybe<ethereumPrimaryPermissionType>;
    poolCreatorPermissionType_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    poolCreatorPermissionType_not_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    riskType?: InputMaybe<ethereumPrimaryRiskType>;
    riskType_not?: InputMaybe<ethereumPrimaryRiskType>;
    riskType_in?: InputMaybe<Array<ethereumPrimaryRiskType>>;
    riskType_not_in?: InputMaybe<Array<ethereumPrimaryRiskType>>;
    collateralizationType?: InputMaybe<ethereumPrimaryCollateralizationType>;
    collateralizationType_not?: InputMaybe<ethereumPrimaryCollateralizationType>;
    collateralizationType_in?: InputMaybe<Array<ethereumPrimaryCollateralizationType>>;
    collateralizationType_not_in?: InputMaybe<Array<ethereumPrimaryCollateralizationType>>;
    mintedTokens?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_not?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    mintedTokens_?: InputMaybe<ethereumPrimaryToken_filter>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<ethereumPrimaryRewardToken_filter>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    protocolControlledValueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    fees?: InputMaybe<Array<Scalars['String']>>;
    fees_not?: InputMaybe<Array<Scalars['String']>>;
    fees_contains?: InputMaybe<Array<Scalars['String']>>;
    fees_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    fees_not_contains?: InputMaybe<Array<Scalars['String']>>;
    fees_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    fees_?: InputMaybe<ethereumPrimaryFee_filter>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<ethereumPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    mintedTokenSupplies?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    mintedTokenSupplies_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    totalPoolCount?: InputMaybe<Scalars['Int']>;
    totalPoolCount_not?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_not?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transactionCount?: InputMaybe<Scalars['Int']>;
    transactionCount_not?: InputMaybe<Scalars['Int']>;
    transactionCount_gt?: InputMaybe<Scalars['Int']>;
    transactionCount_lt?: InputMaybe<Scalars['Int']>;
    transactionCount_gte?: InputMaybe<Scalars['Int']>;
    transactionCount_lte?: InputMaybe<Scalars['Int']>;
    transactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount?: InputMaybe<Scalars['Int']>;
    transferCount_not?: InputMaybe<Scalars['Int']>;
    transferCount_gt?: InputMaybe<Scalars['Int']>;
    transferCount_lt?: InputMaybe<Scalars['Int']>;
    transferCount_gte?: InputMaybe<Scalars['Int']>;
    transferCount_lte?: InputMaybe<Scalars['Int']>;
    transferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount?: InputMaybe<Scalars['Int']>;
    flashloanCount_not?: InputMaybe<Scalars['Int']>;
    flashloanCount_gt?: InputMaybe<Scalars['Int']>;
    flashloanCount_lt?: InputMaybe<Scalars['Int']>;
    flashloanCount_gte?: InputMaybe<Scalars['Int']>;
    flashloanCount_lte?: InputMaybe<Scalars['Int']>;
    flashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyUsageMetrics_?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>;
    hourlyUsageMetrics_?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>;
    financialMetrics_?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>;
    markets_?: InputMaybe<ethereumPrimaryMarket_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryLendingProtocol_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryLendingProtocol_filter>>>;
};
export type ethereumPrimaryLendingProtocol_orderBy = 'id' | 'protocol' | 'name' | 'slug' | 'schemaVersion' | 'subgraphVersion' | 'methodologyVersion' | 'network' | 'type' | 'lendingType' | 'lenderPermissionType' | 'borrowerPermissionType' | 'poolCreatorPermissionType' | 'riskType' | 'collateralizationType' | 'mintedTokens' | 'rewardTokens' | 'cumulativeUniqueUsers' | 'cumulativeUniqueDepositors' | 'cumulativeUniqueBorrowers' | 'cumulativeUniqueLiquidators' | 'cumulativeUniqueLiquidatees' | 'totalValueLockedUSD' | 'protocolControlledValueUSD' | 'cumulativeSupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'fees' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'cumulativeBorrowUSD' | 'cumulativeLiquidateUSD' | 'mintedTokenSupplies' | 'totalPoolCount' | 'openPositionCount' | 'cumulativePositionCount' | 'transactionCount' | 'depositCount' | 'withdrawCount' | 'borrowCount' | 'repayCount' | 'liquidationCount' | 'transferCount' | 'flashloanCount' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'dailyUsageMetrics' | 'hourlyUsageMetrics' | 'financialMetrics' | 'markets';
export type ethereumPrimaryLendingType = 
/**  Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market  */
'CDP'
/**  Pooled protocols pool all users assets into a single market  */
 | 'POOLED';
export type ethereumPrimaryLiquidate = ethereumPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that carried out the liquidation  */
    liquidator: ethereumPrimaryAccount;
    /**  Account that got liquidated  */
    liquidatee: ethereumPrimaryAccount;
    /**  The market of the collateral being used  */
    market: ethereumPrimaryMarket;
    /**  The user position changed by this event  */
    positions: Array<ethereumPrimaryPosition>;
    /**  Asset repaid (borrowed)  */
    asset: ethereumPrimaryToken;
    /**  Amount of collateral liquidated in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of collateral liquidated in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Amount of profit from liquidation in USD  */
    profitUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryLiquidatepositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPosition_filter>;
};
export type ethereumPrimaryLiquidate_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    liquidator?: InputMaybe<Scalars['String']>;
    liquidator_not?: InputMaybe<Scalars['String']>;
    liquidator_gt?: InputMaybe<Scalars['String']>;
    liquidator_lt?: InputMaybe<Scalars['String']>;
    liquidator_gte?: InputMaybe<Scalars['String']>;
    liquidator_lte?: InputMaybe<Scalars['String']>;
    liquidator_in?: InputMaybe<Array<Scalars['String']>>;
    liquidator_not_in?: InputMaybe<Array<Scalars['String']>>;
    liquidator_contains?: InputMaybe<Scalars['String']>;
    liquidator_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidator_not_contains?: InputMaybe<Scalars['String']>;
    liquidator_not_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidator_starts_with?: InputMaybe<Scalars['String']>;
    liquidator_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_not_starts_with?: InputMaybe<Scalars['String']>;
    liquidator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_ends_with?: InputMaybe<Scalars['String']>;
    liquidator_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_not_ends_with?: InputMaybe<Scalars['String']>;
    liquidator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidator_?: InputMaybe<ethereumPrimaryAccount_filter>;
    liquidatee?: InputMaybe<Scalars['String']>;
    liquidatee_not?: InputMaybe<Scalars['String']>;
    liquidatee_gt?: InputMaybe<Scalars['String']>;
    liquidatee_lt?: InputMaybe<Scalars['String']>;
    liquidatee_gte?: InputMaybe<Scalars['String']>;
    liquidatee_lte?: InputMaybe<Scalars['String']>;
    liquidatee_in?: InputMaybe<Array<Scalars['String']>>;
    liquidatee_not_in?: InputMaybe<Array<Scalars['String']>>;
    liquidatee_contains?: InputMaybe<Scalars['String']>;
    liquidatee_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_not_contains?: InputMaybe<Scalars['String']>;
    liquidatee_not_contains_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_starts_with?: InputMaybe<Scalars['String']>;
    liquidatee_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_not_starts_with?: InputMaybe<Scalars['String']>;
    liquidatee_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_ends_with?: InputMaybe<Scalars['String']>;
    liquidatee_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_not_ends_with?: InputMaybe<Scalars['String']>;
    liquidatee_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    liquidatee_?: InputMaybe<ethereumPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    positions?: InputMaybe<Array<Scalars['String']>>;
    positions_not?: InputMaybe<Array<Scalars['String']>>;
    positions_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_?: InputMaybe<ethereumPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    profitUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    profitUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    profitUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    profitUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    profitUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    profitUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    profitUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    profitUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryLiquidate_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryLiquidate_filter>>>;
};
export type ethereumPrimaryLiquidate_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'liquidator' | 'liquidator__id' | 'liquidator__positionCount' | 'liquidator__openPositionCount' | 'liquidator__closedPositionCount' | 'liquidator__depositCount' | 'liquidator__withdrawCount' | 'liquidator__borrowCount' | 'liquidator__repayCount' | 'liquidator__liquidateCount' | 'liquidator__liquidationCount' | 'liquidator__transferredCount' | 'liquidator__receivedCount' | 'liquidator__flashloanCount' | 'liquidator__rewardsClaimedUSD' | 'liquidator___eMode' | 'liquidatee' | 'liquidatee__id' | 'liquidatee__positionCount' | 'liquidatee__openPositionCount' | 'liquidatee__closedPositionCount' | 'liquidatee__depositCount' | 'liquidatee__withdrawCount' | 'liquidatee__borrowCount' | 'liquidatee__repayCount' | 'liquidatee__liquidateCount' | 'liquidatee__liquidationCount' | 'liquidatee__transferredCount' | 'liquidatee__receivedCount' | 'liquidatee__flashloanCount' | 'liquidatee__rewardsClaimedUSD' | 'liquidatee___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'positions' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD' | 'profitUSD';
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarket = {
    /**  Smart contract address of the market  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  The protocol this pool belongs to  */
    protocol: ethereumPrimaryLendingProtocol;
    /**  Name of market  */
    name?: Maybe<Scalars['String']>;
    /**  Is this market active or is it frozen  */
    isActive: Scalars['Boolean'];
    /**  Can you borrow from this market  */
    canBorrowFrom: Scalars['Boolean'];
    /**  Can you use the output token as collateral  */
    canUseAsCollateral: Scalars['Boolean'];
    /**  Maximum loan-to-value ratio as a percentage value (e.g. 75% for DAI in Aave)  */
    maximumLTV: Scalars['ethereumPrimaryBigDecimal'];
    /**  Liquidation threshold as a percentage value (e.g. 80% for DAI in Aave). When it is reached, the position is defined as undercollateralised and could be liquidated  */
    liquidationThreshold: Scalars['ethereumPrimaryBigDecimal'];
    /**  Liquidation penalty (or the liquidation bonus for liquidators) as a percentage value. It is the penalty/bonus price on the collateral when liquidators purchase it as part of the liquidation of a loan that has passed the liquidation threshold  */
    liquidationPenalty: Scalars['ethereumPrimaryBigDecimal'];
    /**  Can the user choose to isolate assets in this market. e.g. only this market's collateral can be used for a borrow in Aave V3  */
    canIsolate: Scalars['Boolean'];
    /**  Creation timestamp  */
    createdTimestamp: Scalars['BigInt'];
    /**  Creation block number  */
    createdBlockNumber: Scalars['BigInt'];
    /**  Details about the price oracle used to get this token's price  */
    oracle?: Maybe<ethereumPrimaryOracle>;
    /**  A unique identifier that can relate multiple markets. e.g. a common address that is the same for each related market. This is useful for markets with multiple input tokens  */
    relation?: Maybe<Scalars['ethereumPrimaryBytes']>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
    rewardTokens?: Maybe<Array<ethereumPrimaryRewardToken>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /**  Total supply of output tokens that are staked. Used to calculate reward APY.  */
    stakedOutputTokenAmount?: Maybe<Scalars['BigInt']>;
    /**  Token that need to be deposited in this market to take a position in protocol (should be alphabetized)  */
    inputToken: ethereumPrimaryToken;
    /**  Amount of input token in the market (same order as inputTokens)  */
    inputTokenBalance: Scalars['BigInt'];
    /**  Prices in USD of the input token (same order as inputTokens)  */
    inputTokenPriceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Tokens that are minted to track ownership of position in protocol (e.g. aToken, cToken). Leave as null if doesn't exist (should be alphabetized)  */
    outputToken?: Maybe<ethereumPrimaryToken>;
    /**  Total supply of output token (same order as outputTokens)  */
    outputTokenSupply?: Maybe<Scalars['BigInt']>;
    /**  Prices in USD of the output token (same order as outputTokens)  */
    outputTokenPriceUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%)  */
    exchangeRate?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  All interest rates for this input token. Should be in APR format  */
    rates?: Maybe<Array<ethereumPrimaryInterestRate>>;
    /**  Total amount of reserves (in USD)  */
    reserves?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  The amount of revenue that is converted to reserves at the current time. 20% reserve factor should be in format 0.20  */
    reserveFactor?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  The token that can be borrowed (e.g. inputToken in POOLED and generally a stable in CDPs)  */
    borrowedToken?: Maybe<ethereumPrimaryToken>;
    /**  Amount of input tokens borrowed in this market using variable interest rates (in native terms)  */
    variableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Amount of input tokens borrowed in this market using stable interest rates (in native terms)  */
    stableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Last updated timestamp of supply/borrow index.  */
    indexLastUpdatedTimestamp?: Maybe<Scalars['BigInt']>;
    /**  Index used by the protocol to calculate interest generated on the supply token (ie, liquidityIndex in Aave) */
    supplyIndex?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit to how much of the underlying asset can be supplied to this market.  */
    supplyCap?: Maybe<Scalars['BigInt']>;
    /**  Index used by the protocol to calculate the interest paid on the borrowed token (ie, variableBorrowIndex in Aave)) */
    borrowIndex?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit for how much of the underlying asset can be borrowed from this market.  */
    borrowCap?: Maybe<Scalars['BigInt']>;
    /**  Current TVL (Total Value Locked) of this market  */
    totalValueLockedUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the supply side.  */
    cumulativeSupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the protocol.  */
    cumulativeProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market.  */
    cumulativeTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<ethereumPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets (not historical cumulative), in USD  */
    totalDepositBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD  */
    totalBorrowBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination)  */
    cumulativeBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical transfers in USD  */
    cumulativeTransferUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical flashloans in USD  */
    cumulativeFlashloanUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total number of transactions  */
    transactionCount: Scalars['Int'];
    /**  Total number of deposits  */
    depositCount: Scalars['Int'];
    /**  Total number of withdrawals  */
    withdrawCount: Scalars['Int'];
    /**  Total number of borrows  */
    borrowCount: Scalars['Int'];
    /**  Total number of repayments  */
    repayCount: Scalars['Int'];
    /**  Total number of liquidations  */
    liquidationCount: Scalars['Int'];
    /**  Total number of transfers  */
    transferCount: Scalars['Int'];
    /**  Total number of flashloans  */
    flashloanCount: Scalars['Int'];
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this market  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Number of cumulative depositors  */
    cumulativeUniqueDepositors: Scalars['Int'];
    /**  Number of cumulative borrowers  */
    cumulativeUniqueBorrowers: Scalars['Int'];
    /**  Number of cumulative liquidators (accounts that performed liquidation)  */
    cumulativeUniqueLiquidators: Scalars['Int'];
    /**  Number of cumulative liquidatees (accounts that got liquidated)  */
    cumulativeUniqueLiquidatees: Scalars['Int'];
    /**  Number of cumulative accounts that transferred positions (generally in the form of outputToken transfer)  */
    cumulativeUniqueTransferrers: Scalars['Int'];
    /**  Number of cumulative accounts that performed flashloans  */
    cumulativeUniqueFlashloaners: Scalars['Int'];
    /**  All positions in this market  */
    positions: Array<ethereumPrimaryPosition>;
    /**  Number of positions in this market  */
    positionCount: Scalars['Int'];
    /**  Number of open positions in this market  */
    openPositionCount: Scalars['Int'];
    /**  Number of closed positions in this market  */
    closedPositionCount: Scalars['Int'];
    /**  Number of lending positions in this market. Note: this is cumulative and strictly increasing  */
    lendingPositionCount: Scalars['Int'];
    /**  Number of borrowing positions in this market. Note: this is cumulative and strictly increasing  */
    borrowingPositionCount: Scalars['Int'];
    /**  Market daily snapshots  */
    dailySnapshots: Array<ethereumPrimaryMarketDailySnapshot>;
    /**  Market hourly snapshots  */
    hourlySnapshots: Array<ethereumPrimaryMarketHourlySnapshot>;
    /**  All deposits made to this market  */
    deposits: Array<ethereumPrimaryDeposit>;
    /**  All withdrawals made from this market  */
    withdraws: Array<ethereumPrimaryWithdraw>;
    /**  All borrows from this market  */
    borrows: Array<ethereumPrimaryBorrow>;
    /**  All repayments to this market  */
    repays: Array<ethereumPrimaryRepay>;
    /**  All liquidations made to this market  */
    liquidates: Array<ethereumPrimaryLiquidate>;
    /**  All transfers made in this market  */
    transfers: Array<ethereumPrimaryTransfer>;
    /**  All flashloans made in this market */
    flashloans: Array<ethereumPrimaryFlashloan>;
    /**  Rewards borrow speed for this market */
    _baseTrackingBorrowSpeed?: Maybe<Scalars['BigInt']>;
    /**  Rewards supply speed for this market */
    _baseTrackingSupplySpeed?: Maybe<Scalars['BigInt']>;
    /**  The variable debt token address correlated to the reserve asset  */
    _vToken?: Maybe<ethereumPrimaryToken>;
    /**  The stable debt token address correlated to the reserve asset  */
    _sToken?: Maybe<ethereumPrimaryToken>;
    /**  The state of the protocol prior to being paused (isActive / canUseAsCollateral / canBorrowFrom)  */
    _prePauseState?: Maybe<Array<Scalars['Boolean']>>;
    /**  Aux: Timestamp of the last time rewards were calculated for this market.  */
    _lastRewardsUpdated?: Maybe<Scalars['BigInt']>;
    /**  proportion of liquidation bonus (liquidation penalty) going to the protocol  */
    _liquidationProtocolFee?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    _siloedBorrowing?: Maybe<Scalars['Boolean']>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRewardToken_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketratesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryInterestRate_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketpositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPosition_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketdailySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarketDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarketDailySnapshot_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarkethourlySnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryMarketHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryMarketHourlySnapshot_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketdepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryDeposit_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketwithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryWithdraw_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryBorrow_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRepay_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketliquidatesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLiquidate_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarkettransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryTransfer_filter>;
};
/**
 * A market is defined by the input token.
 * At a minimum that means being able to deposit/withdraw that token.
 * e.g. there may be related markets as they only act as collateral for other markets.
 *
 */
export type ethereumPrimaryMarketflashloansArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFlashloan_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFlashloan_filter>;
};
export type ethereumPrimaryMarketDailySnapshot = {
    /**  { Smart contract address of the market }{ # of days since Unix epoch time }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Number of days since Unix epoch time  */
    days: Scalars['Int'];
    /**  The protocol this snapshot belongs to  */
    protocol: ethereumPrimaryLendingProtocol;
    /**  The pool this snapshot belongs to  */
    market: ethereumPrimaryMarket;
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  A unique identifier that can relate multiple markets together. e.g. a common address that they all share. This is useful for markets with multiple input tokens  */
    relation?: Maybe<Scalars['ethereumPrimaryBytes']>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
    rewardTokens?: Maybe<Array<ethereumPrimaryRewardToken>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /**  Total supply of output tokens that are staked. Used to calculate reward APY.  */
    stakedOutputTokenAmount?: Maybe<Scalars['BigInt']>;
    /**  Amount of input token in the market (same order as inputTokens)  */
    inputTokenBalance: Scalars['BigInt'];
    /**  Prices in USD of the input token (same order as inputTokens)  */
    inputTokenPriceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total supply of output token (same order as outputTokens)  */
    outputTokenSupply?: Maybe<Scalars['BigInt']>;
    /**  Prices in USD of the output token (same order as outputTokens)  */
    outputTokenPriceUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%)  */
    exchangeRate?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  All interest rates for this input token. Should be in APR format  */
    rates?: Maybe<Array<ethereumPrimaryInterestRate>>;
    /**  Total amount of reserves (in USD)  */
    reserves?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  The amount of revenue that is converted to reserves at the current time. 20% reserve factor should be in format 0.20  */
    reserveFactor?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Amount of input tokens borrowed in this market using variable interest rates (in native terms)  */
    variableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Amount of input tokens borrowed in this market using stable interest rates (in native terms)  */
    stableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit to how much of the underlying asset can be supplied to this market.  */
    supplyCap?: Maybe<Scalars['BigInt']>;
    /**  Allowed limit for how much of the underlying asset can be borrowed from this market.  */
    borrowCap?: Maybe<Scalars['BigInt']>;
    /**  Current TVL (Total Value Locked) of this market  */
    totalValueLockedUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the supply side.  */
    cumulativeSupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Daily revenue generated by the market, accrued to the supply side.  */
    dailySupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the protocol.  */
    cumulativeProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Daily revenue generated by the market, accrued to the protocol.  */
    dailyProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market.  */
    cumulativeTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Daily revenue generated by the market.  */
    dailyTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Details of revenue sources and amounts  */
    revenueDetail?: Maybe<ethereumPrimaryRevenueDetail>;
    /**  Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL.  */
    totalDepositBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all deposits made on a given day, in USD  */
    dailyDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all the deposits on a given day, in native units  */
    dailyNativeDeposit: Scalars['BigInt'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD.  */
    totalBorrowBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all borrows/mints made on a given day, in USD  */
    dailyBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all the borrows on a given day, in native units  */
    dailyNativeBorrow: Scalars['BigInt'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination)  */
    cumulativeBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets liquidated on a given day, in USD.  */
    dailyLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets liquidated on a given day, in native units.  */
    dailyNativeLiquidate: Scalars['BigInt'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given day, in USD.  */
    dailyWithdrawUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given day, in native units.  */
    dailyNativeWithdraw: Scalars['BigInt'];
    /**  Total assets repaid on a given day, in USD.  */
    dailyRepayUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets repaid on a given day, in native units.  */
    dailyNativeRepay: Scalars['BigInt'];
    /**  Total assets transferred on a given day, in USD.  */
    dailyTransferUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets transferred on a given day, in native units.  */
    dailyNativeTransfer: Scalars['BigInt'];
    /**  Sum of all historical transfers in USD  */
    cumulativeTransferUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets flashloaned on a given day, in USD.  */
    dailyFlashloanUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets flashloaned on a given day, in native units.  */
    dailyNativeFlashloan: Scalars['BigInt'];
    /**  Sum of all historical flashloans in USD  */
    cumulativeFlashloanUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Number of unique daily active users. e.g. accounts that spent gas to interact with this market  */
    dailyActiveUsers: Scalars['Int'];
    /**  Number of unique daily depositors  */
    dailyActiveDepositors: Scalars['Int'];
    /**  Number of unique daily borrowers  */
    dailyActiveBorrowers: Scalars['Int'];
    /**  Number of unique daily liquidators (accounts that performed liquidation)  */
    dailyActiveLiquidators: Scalars['Int'];
    /**  Number of unique daily liquidatees (accounts that got liquidated)  */
    dailyActiveLiquidatees: Scalars['Int'];
    /**  Number of unique daily transferrers (the sender in a Transfer)  */
    dailyActiveTransferrers: Scalars['Int'];
    /**  Number of unique daily accounts that executed a flash loan */
    dailyActiveFlashloaners: Scalars['Int'];
    /**  Total number of deposits in a day  */
    dailyDepositCount: Scalars['Int'];
    /**  Total number of withdrawals in a day  */
    dailyWithdrawCount: Scalars['Int'];
    /**  Total number of borrows/mints in a day  */
    dailyBorrowCount: Scalars['Int'];
    /**  Total number of repayments/burns in a day  */
    dailyRepayCount: Scalars['Int'];
    /**  Total number of liquidations in a day  */
    dailyLiquidateCount: Scalars['Int'];
    /**  Total number of transfers in a day  */
    dailyTransferCount: Scalars['Int'];
    /**  Total number of flashloans in a day  */
    dailyFlashloanCount: Scalars['Int'];
    /**  Number of positions in this market  */
    positionCount: Scalars['Int'];
    /**  Number of open positions in this market  */
    openPositionCount: Scalars['Int'];
    /**  Number of closed positions in this market  */
    closedPositionCount: Scalars['Int'];
    /**  Number of lending positions in this market. Note: this is cumulative and strictly increasing  */
    lendingPositionCount: Scalars['Int'];
    /**  Total number of lending positions touched in a day. This includes opening, closing, and modifying positions.  */
    dailyActiveLendingPositionCount: Scalars['Int'];
    /**  Number of borrowing positions in this market. Note: this is cumulative and strictly increasing  */
    borrowingPositionCount: Scalars['Int'];
    /**  Total number of borrow positions touched in a day. This includes opening, closing, and modifying positions.  */
    dailyActiveBorrowingPositionCount: Scalars['Int'];
};
export type ethereumPrimaryMarketDailySnapshotrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRewardToken_filter>;
};
export type ethereumPrimaryMarketDailySnapshotratesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryInterestRate_filter>;
};
export type ethereumPrimaryMarketDailySnapshot_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    days?: InputMaybe<Scalars['Int']>;
    days_not?: InputMaybe<Scalars['Int']>;
    days_gt?: InputMaybe<Scalars['Int']>;
    days_lt?: InputMaybe<Scalars['Int']>;
    days_gte?: InputMaybe<Scalars['Int']>;
    days_lte?: InputMaybe<Scalars['Int']>;
    days_in?: InputMaybe<Array<Scalars['Int']>>;
    days_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    relation?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    relation_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    relation_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<ethereumPrimaryRewardToken_filter>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenPriceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    inputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    outputTokenSupply?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenPriceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    outputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    exchangeRate?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    exchangeRate_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rates?: InputMaybe<Array<Scalars['String']>>;
    rates_not?: InputMaybe<Array<Scalars['String']>>;
    rates_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_?: InputMaybe<ethereumPrimaryInterestRate_filter>;
    reserves?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    reserves_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    reserveFactor?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    reserveFactor_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    variableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    variableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap?: InputMaybe<Scalars['BigInt']>;
    supplyCap_not?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap?: InputMaybe<Scalars['BigInt']>;
    borrowCap_not?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailySupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<ethereumPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyNativeDeposit?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeDeposit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeDeposit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyNativeBorrow?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeBorrow_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeBorrow_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyNativeLiquidate?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeLiquidate_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeLiquidate_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyWithdrawUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyWithdrawUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyWithdrawUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyNativeWithdraw?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeWithdraw_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeWithdraw_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyRepayUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyRepayUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyRepayUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyNativeRepay?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeRepay_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeRepay_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyTransferUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyTransferUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyTransferUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyNativeTransfer?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeTransferUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTransferUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyFlashloanUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    dailyFlashloanUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyFlashloanUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyNativeFlashloan?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_not?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_gt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_lt?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_gte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_lte?: InputMaybe<Scalars['BigInt']>;
    dailyNativeFlashloan_in?: InputMaybe<Array<Scalars['BigInt']>>;
    dailyNativeFlashloan_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    cumulativeFlashloanUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeFlashloanUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    dailyActiveUsers?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_not?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveTransferrers?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveTransferrers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveTransferrers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveFlashloaners?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_not?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveFlashloaners_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveFlashloaners_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_not?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_not?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_not?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_not?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_not?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_not?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_not?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount?: InputMaybe<Scalars['Int']>;
    positionCount_not?: InputMaybe<Scalars['Int']>;
    positionCount_gt?: InputMaybe<Scalars['Int']>;
    positionCount_lt?: InputMaybe<Scalars['Int']>;
    positionCount_gte?: InputMaybe<Scalars['Int']>;
    positionCount_lte?: InputMaybe<Scalars['Int']>;
    positionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount?: InputMaybe<Scalars['Int']>;
    closedPositionCount_not?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_not?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLendingPositionCount?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLendingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLendingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_not?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowingPositionCount?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_not?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryMarketDailySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryMarketDailySnapshot_filter>>>;
};
export type ethereumPrimaryMarketDailySnapshot_orderBy = 'id' | 'days' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'blockNumber' | 'timestamp' | 'relation' | 'rewardTokens' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'stakedOutputTokenAmount' | 'inputTokenBalance' | 'inputTokenPriceUSD' | 'outputTokenSupply' | 'outputTokenPriceUSD' | 'exchangeRate' | 'rates' | 'reserves' | 'reserveFactor' | 'variableBorrowedTokenBalance' | 'stableBorrowedTokenBalance' | 'supplyCap' | 'borrowCap' | 'totalValueLockedUSD' | 'cumulativeSupplySideRevenueUSD' | 'dailySupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'dailyProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'dailyTotalRevenueUSD' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'dailyDepositUSD' | 'dailyNativeDeposit' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'dailyBorrowUSD' | 'dailyNativeBorrow' | 'cumulativeBorrowUSD' | 'dailyLiquidateUSD' | 'dailyNativeLiquidate' | 'cumulativeLiquidateUSD' | 'dailyWithdrawUSD' | 'dailyNativeWithdraw' | 'dailyRepayUSD' | 'dailyNativeRepay' | 'dailyTransferUSD' | 'dailyNativeTransfer' | 'cumulativeTransferUSD' | 'dailyFlashloanUSD' | 'dailyNativeFlashloan' | 'cumulativeFlashloanUSD' | 'dailyActiveUsers' | 'dailyActiveDepositors' | 'dailyActiveBorrowers' | 'dailyActiveLiquidators' | 'dailyActiveLiquidatees' | 'dailyActiveTransferrers' | 'dailyActiveFlashloaners' | 'dailyDepositCount' | 'dailyWithdrawCount' | 'dailyBorrowCount' | 'dailyRepayCount' | 'dailyLiquidateCount' | 'dailyTransferCount' | 'dailyFlashloanCount' | 'positionCount' | 'openPositionCount' | 'closedPositionCount' | 'lendingPositionCount' | 'dailyActiveLendingPositionCount' | 'borrowingPositionCount' | 'dailyActiveBorrowingPositionCount';
export type ethereumPrimaryMarketHourlySnapshot = {
    /**  { Smart contract address of the market }{ # of hours since Unix epoch time }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Number of hours since Unix epoch time  */
    hours: Scalars['Int'];
    /**  The protocol this snapshot belongs to  */
    protocol: ethereumPrimaryLendingProtocol;
    /**  The pool this snapshot belongs to  */
    market: ethereumPrimaryMarket;
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  A unique identifier that can relate multiple markets together. e.g. a common address that they all share. This is useful for markets with multiple input tokens  */
    relation?: Maybe<Scalars['ethereumPrimaryBytes']>;
    /**  Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon  */
    rewardTokens?: Maybe<Array<ethereumPrimaryRewardToken>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsAmount?: Maybe<Array<Scalars['BigInt']>>;
    /**  Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.  */
    rewardTokenEmissionsUSD?: Maybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /**  Total supply of output tokens that are staked. Used to calculate reward APY.  */
    stakedOutputTokenAmount?: Maybe<Scalars['BigInt']>;
    /**  Amount of input token in the market (same order as inputTokens)  */
    inputTokenBalance: Scalars['BigInt'];
    /**  Prices in USD of the input token (same order as inputTokens)  */
    inputTokenPriceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total supply of output token (same order as outputTokens)  */
    outputTokenSupply?: Maybe<Scalars['BigInt']>;
    /**  Prices in USD of the output token (same order as outputTokens)  */
    outputTokenPriceUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Amount of input token per full share of output token. Only applies when the output token exists (note this is a ratio and not a percentage value, i.e. 1.05 instead of 105%)  */
    exchangeRate?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  All interest rates for this input token. Should be in APR format  */
    rates?: Maybe<Array<ethereumPrimaryInterestRate>>;
    /**  Total amount of reserves (in USD)  */
    reserves?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Amount of input tokens borrowed in this market using variable interest rates (in native terms)  */
    variableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Amount of input tokens borrowed in this market using stable interest rates (in native terms)  */
    stableBorrowedTokenBalance?: Maybe<Scalars['BigInt']>;
    /**  Current TVL (Total Value Locked) of this market  */
    totalValueLockedUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the supply side.  */
    cumulativeSupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Hourly revenue generated by the market, accrued to the supply side.  */
    hourlySupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market, accrued to the protocol.  */
    cumulativeProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Hourly revenue generated by the market, accrued to the protocol.  */
    hourlyProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the market.  */
    cumulativeTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Hourly revenue generated by the market.  */
    hourlyTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current balance of all deposited assets (not historical cumulative), in USD. Same as pool TVL.  */
    totalDepositBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all deposits made in a given hour, in USD  */
    hourlyDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical deposits in USD (only considers deposits and not withdrawals)  */
    cumulativeDepositUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current balance of all borrowed/minted assets (not historical cumulative), in USD.  */
    totalBorrowBalanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all borrows/mints made in a given hour, in USD  */
    hourlyBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical borrows/mints in USD (i.e. total loan origination)  */
    cumulativeBorrowUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets liquidated in a given hour, in USD.  */
    hourlyLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Sum of all historical liquidations in USD  */
    cumulativeLiquidateUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets withdrawn on a given hour, in USD.  */
    hourlyWithdrawUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets repaid on a given hour, in USD.  */
    hourlyRepayUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets transferred on a given hour, in USD.  */
    hourlyTransferUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total assets flashloaned on a given hour, in USD.  */
    hourlyFlashloanUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryMarketHourlySnapshotrewardTokensArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRewardToken_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRewardToken_filter>;
};
export type ethereumPrimaryMarketHourlySnapshotratesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryInterestRate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryInterestRate_filter>;
};
export type ethereumPrimaryMarketHourlySnapshot_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hours?: InputMaybe<Scalars['Int']>;
    hours_not?: InputMaybe<Scalars['Int']>;
    hours_gt?: InputMaybe<Scalars['Int']>;
    hours_lt?: InputMaybe<Scalars['Int']>;
    hours_gte?: InputMaybe<Scalars['Int']>;
    hours_lte?: InputMaybe<Scalars['Int']>;
    hours_in?: InputMaybe<Array<Scalars['Int']>>;
    hours_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    relation?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    relation_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    relation_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<ethereumPrimaryRewardToken_filter>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenPriceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    inputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    outputTokenSupply?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenPriceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    outputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    exchangeRate?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    exchangeRate_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rates?: InputMaybe<Array<Scalars['String']>>;
    rates_not?: InputMaybe<Array<Scalars['String']>>;
    rates_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_?: InputMaybe<ethereumPrimaryInterestRate_filter>;
    reserves?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    reserves_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    variableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    variableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlySupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlySupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlySupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyWithdrawUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyWithdrawUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyWithdrawUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyWithdrawUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyWithdrawUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyWithdrawUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyWithdrawUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyWithdrawUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyRepayUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyRepayUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyRepayUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyRepayUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyRepayUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyRepayUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyRepayUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyRepayUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyTransferUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTransferUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTransferUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTransferUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTransferUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTransferUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyTransferUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyTransferUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyFlashloanUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyFlashloanUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyFlashloanUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyFlashloanUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyFlashloanUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyFlashloanUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    hourlyFlashloanUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    hourlyFlashloanUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryMarketHourlySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryMarketHourlySnapshot_filter>>>;
};
export type ethereumPrimaryMarketHourlySnapshot_orderBy = 'id' | 'hours' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'blockNumber' | 'timestamp' | 'relation' | 'rewardTokens' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'stakedOutputTokenAmount' | 'inputTokenBalance' | 'inputTokenPriceUSD' | 'outputTokenSupply' | 'outputTokenPriceUSD' | 'exchangeRate' | 'rates' | 'reserves' | 'variableBorrowedTokenBalance' | 'stableBorrowedTokenBalance' | 'totalValueLockedUSD' | 'cumulativeSupplySideRevenueUSD' | 'hourlySupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'hourlyProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'hourlyTotalRevenueUSD' | 'totalDepositBalanceUSD' | 'hourlyDepositUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'hourlyBorrowUSD' | 'cumulativeBorrowUSD' | 'hourlyLiquidateUSD' | 'cumulativeLiquidateUSD' | 'hourlyWithdrawUSD' | 'hourlyRepayUSD' | 'hourlyTransferUSD' | 'hourlyFlashloanUSD';
export type ethereumPrimaryMarket_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    isActive?: InputMaybe<Scalars['Boolean']>;
    isActive_not?: InputMaybe<Scalars['Boolean']>;
    isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canBorrowFrom?: InputMaybe<Scalars['Boolean']>;
    canBorrowFrom_not?: InputMaybe<Scalars['Boolean']>;
    canBorrowFrom_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canBorrowFrom_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canUseAsCollateral?: InputMaybe<Scalars['Boolean']>;
    canUseAsCollateral_not?: InputMaybe<Scalars['Boolean']>;
    canUseAsCollateral_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canUseAsCollateral_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    maximumLTV?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    maximumLTV_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    maximumLTV_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    maximumLTV_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    maximumLTV_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    maximumLTV_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    maximumLTV_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    maximumLTV_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    liquidationThreshold?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationThreshold_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationThreshold_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationThreshold_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationThreshold_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationThreshold_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationThreshold_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    liquidationThreshold_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    liquidationPenalty?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationPenalty_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationPenalty_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationPenalty_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationPenalty_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationPenalty_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    liquidationPenalty_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    liquidationPenalty_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    canIsolate?: InputMaybe<Scalars['Boolean']>;
    canIsolate_not?: InputMaybe<Scalars['Boolean']>;
    canIsolate_in?: InputMaybe<Array<Scalars['Boolean']>>;
    canIsolate_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    createdTimestamp?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_not?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
    createdTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    createdTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    createdBlockNumber?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    createdBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    createdBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    oracle?: InputMaybe<Scalars['String']>;
    oracle_not?: InputMaybe<Scalars['String']>;
    oracle_gt?: InputMaybe<Scalars['String']>;
    oracle_lt?: InputMaybe<Scalars['String']>;
    oracle_gte?: InputMaybe<Scalars['String']>;
    oracle_lte?: InputMaybe<Scalars['String']>;
    oracle_in?: InputMaybe<Array<Scalars['String']>>;
    oracle_not_in?: InputMaybe<Array<Scalars['String']>>;
    oracle_contains?: InputMaybe<Scalars['String']>;
    oracle_contains_nocase?: InputMaybe<Scalars['String']>;
    oracle_not_contains?: InputMaybe<Scalars['String']>;
    oracle_not_contains_nocase?: InputMaybe<Scalars['String']>;
    oracle_starts_with?: InputMaybe<Scalars['String']>;
    oracle_starts_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_not_starts_with?: InputMaybe<Scalars['String']>;
    oracle_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_ends_with?: InputMaybe<Scalars['String']>;
    oracle_ends_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_not_ends_with?: InputMaybe<Scalars['String']>;
    oracle_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    oracle_?: InputMaybe<ethereumPrimaryOracle_filter>;
    relation?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    relation_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    relation_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    relation_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    rewardTokens?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rewardTokens_?: InputMaybe<ethereumPrimaryRewardToken_filter>;
    rewardTokenEmissionsAmount?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsAmount_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
    rewardTokenEmissionsUSD?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rewardTokenEmissionsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    stakedOutputTokenAmount?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_not?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lt?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_gte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_lte?: InputMaybe<Scalars['BigInt']>;
    stakedOutputTokenAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stakedOutputTokenAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputToken?: InputMaybe<Scalars['String']>;
    inputToken_not?: InputMaybe<Scalars['String']>;
    inputToken_gt?: InputMaybe<Scalars['String']>;
    inputToken_lt?: InputMaybe<Scalars['String']>;
    inputToken_gte?: InputMaybe<Scalars['String']>;
    inputToken_lte?: InputMaybe<Scalars['String']>;
    inputToken_in?: InputMaybe<Array<Scalars['String']>>;
    inputToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    inputToken_contains?: InputMaybe<Scalars['String']>;
    inputToken_contains_nocase?: InputMaybe<Scalars['String']>;
    inputToken_not_contains?: InputMaybe<Scalars['String']>;
    inputToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    inputToken_starts_with?: InputMaybe<Scalars['String']>;
    inputToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_not_starts_with?: InputMaybe<Scalars['String']>;
    inputToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_ends_with?: InputMaybe<Scalars['String']>;
    inputToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_not_ends_with?: InputMaybe<Scalars['String']>;
    inputToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    inputToken_?: InputMaybe<ethereumPrimaryToken_filter>;
    inputTokenBalance?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    inputTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    inputTokenPriceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    inputTokenPriceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    inputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    outputToken?: InputMaybe<Scalars['String']>;
    outputToken_not?: InputMaybe<Scalars['String']>;
    outputToken_gt?: InputMaybe<Scalars['String']>;
    outputToken_lt?: InputMaybe<Scalars['String']>;
    outputToken_gte?: InputMaybe<Scalars['String']>;
    outputToken_lte?: InputMaybe<Scalars['String']>;
    outputToken_in?: InputMaybe<Array<Scalars['String']>>;
    outputToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    outputToken_contains?: InputMaybe<Scalars['String']>;
    outputToken_contains_nocase?: InputMaybe<Scalars['String']>;
    outputToken_not_contains?: InputMaybe<Scalars['String']>;
    outputToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    outputToken_starts_with?: InputMaybe<Scalars['String']>;
    outputToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_not_starts_with?: InputMaybe<Scalars['String']>;
    outputToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_ends_with?: InputMaybe<Scalars['String']>;
    outputToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_not_ends_with?: InputMaybe<Scalars['String']>;
    outputToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    outputToken_?: InputMaybe<ethereumPrimaryToken_filter>;
    outputTokenSupply?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
    outputTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    outputTokenPriceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    outputTokenPriceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    outputTokenPriceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    exchangeRate?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    exchangeRate_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    exchangeRate_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    rates?: InputMaybe<Array<Scalars['String']>>;
    rates_not?: InputMaybe<Array<Scalars['String']>>;
    rates_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains?: InputMaybe<Array<Scalars['String']>>;
    rates_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    rates_?: InputMaybe<ethereumPrimaryInterestRate_filter>;
    reserves?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserves_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    reserves_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    reserveFactor?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    reserveFactor_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    reserveFactor_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    borrowedToken?: InputMaybe<Scalars['String']>;
    borrowedToken_not?: InputMaybe<Scalars['String']>;
    borrowedToken_gt?: InputMaybe<Scalars['String']>;
    borrowedToken_lt?: InputMaybe<Scalars['String']>;
    borrowedToken_gte?: InputMaybe<Scalars['String']>;
    borrowedToken_lte?: InputMaybe<Scalars['String']>;
    borrowedToken_in?: InputMaybe<Array<Scalars['String']>>;
    borrowedToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    borrowedToken_contains?: InputMaybe<Scalars['String']>;
    borrowedToken_contains_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_not_contains?: InputMaybe<Scalars['String']>;
    borrowedToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_starts_with?: InputMaybe<Scalars['String']>;
    borrowedToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_not_starts_with?: InputMaybe<Scalars['String']>;
    borrowedToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_ends_with?: InputMaybe<Scalars['String']>;
    borrowedToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_not_ends_with?: InputMaybe<Scalars['String']>;
    borrowedToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    borrowedToken_?: InputMaybe<ethereumPrimaryToken_filter>;
    variableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    variableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    variableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_not?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lt?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_gte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_lte?: InputMaybe<Scalars['BigInt']>;
    stableBorrowedTokenBalance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    stableBorrowedTokenBalance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    indexLastUpdatedTimestamp?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
    indexLastUpdatedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    indexLastUpdatedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyIndex?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_not?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_gt?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_lt?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_gte?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_lte?: InputMaybe<Scalars['BigInt']>;
    supplyIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap?: InputMaybe<Scalars['BigInt']>;
    supplyCap_not?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lt?: InputMaybe<Scalars['BigInt']>;
    supplyCap_gte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_lte?: InputMaybe<Scalars['BigInt']>;
    supplyCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    supplyCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowIndex?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_not?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_gt?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_lt?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_gte?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_lte?: InputMaybe<Scalars['BigInt']>;
    borrowIndex_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowIndex_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap?: InputMaybe<Scalars['BigInt']>;
    borrowCap_not?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lt?: InputMaybe<Scalars['BigInt']>;
    borrowCap_gte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_lte?: InputMaybe<Scalars['BigInt']>;
    borrowCap_in?: InputMaybe<Array<Scalars['BigInt']>>;
    borrowCap_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    totalValueLockedUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    revenueDetail?: InputMaybe<Scalars['String']>;
    revenueDetail_not?: InputMaybe<Scalars['String']>;
    revenueDetail_gt?: InputMaybe<Scalars['String']>;
    revenueDetail_lt?: InputMaybe<Scalars['String']>;
    revenueDetail_gte?: InputMaybe<Scalars['String']>;
    revenueDetail_lte?: InputMaybe<Scalars['String']>;
    revenueDetail_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_not_in?: InputMaybe<Array<Scalars['String']>>;
    revenueDetail_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains?: InputMaybe<Scalars['String']>;
    revenueDetail_not_contains_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with?: InputMaybe<Scalars['String']>;
    revenueDetail_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    revenueDetail_?: InputMaybe<ethereumPrimaryRevenueDetail_filter>;
    totalDepositBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalDepositBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalDepositBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeDepositUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeDepositUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalBorrowBalanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalBorrowBalanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeBorrowUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeBorrowUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeLiquidateUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeLiquidateUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTransferUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTransferUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTransferUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeFlashloanUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeFlashloanUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeFlashloanUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    transactionCount?: InputMaybe<Scalars['Int']>;
    transactionCount_not?: InputMaybe<Scalars['Int']>;
    transactionCount_gt?: InputMaybe<Scalars['Int']>;
    transactionCount_lt?: InputMaybe<Scalars['Int']>;
    transactionCount_gte?: InputMaybe<Scalars['Int']>;
    transactionCount_lte?: InputMaybe<Scalars['Int']>;
    transactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount?: InputMaybe<Scalars['Int']>;
    transferCount_not?: InputMaybe<Scalars['Int']>;
    transferCount_gt?: InputMaybe<Scalars['Int']>;
    transferCount_lt?: InputMaybe<Scalars['Int']>;
    transferCount_gte?: InputMaybe<Scalars['Int']>;
    transferCount_lte?: InputMaybe<Scalars['Int']>;
    transferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount?: InputMaybe<Scalars['Int']>;
    flashloanCount_not?: InputMaybe<Scalars['Int']>;
    flashloanCount_gt?: InputMaybe<Scalars['Int']>;
    flashloanCount_lt?: InputMaybe<Scalars['Int']>;
    flashloanCount_gte?: InputMaybe<Scalars['Int']>;
    flashloanCount_lte?: InputMaybe<Scalars['Int']>;
    flashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    flashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueTransferrers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueTransferrers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueTransferrers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueFlashloaners?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueFlashloaners_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueFlashloaners_not_in?: InputMaybe<Array<Scalars['Int']>>;
    positions_?: InputMaybe<ethereumPrimaryPosition_filter>;
    positionCount?: InputMaybe<Scalars['Int']>;
    positionCount_not?: InputMaybe<Scalars['Int']>;
    positionCount_gt?: InputMaybe<Scalars['Int']>;
    positionCount_lt?: InputMaybe<Scalars['Int']>;
    positionCount_gte?: InputMaybe<Scalars['Int']>;
    positionCount_lte?: InputMaybe<Scalars['Int']>;
    positionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    positionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount?: InputMaybe<Scalars['Int']>;
    closedPositionCount_not?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lt?: InputMaybe<Scalars['Int']>;
    closedPositionCount_gte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_lte?: InputMaybe<Scalars['Int']>;
    closedPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    closedPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_not?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    lendingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    lendingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_not?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lt?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_gte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_lte?: InputMaybe<Scalars['Int']>;
    borrowingPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowingPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailySnapshots_?: InputMaybe<ethereumPrimaryMarketDailySnapshot_filter>;
    hourlySnapshots_?: InputMaybe<ethereumPrimaryMarketHourlySnapshot_filter>;
    deposits_?: InputMaybe<ethereumPrimaryDeposit_filter>;
    withdraws_?: InputMaybe<ethereumPrimaryWithdraw_filter>;
    borrows_?: InputMaybe<ethereumPrimaryBorrow_filter>;
    repays_?: InputMaybe<ethereumPrimaryRepay_filter>;
    liquidates_?: InputMaybe<ethereumPrimaryLiquidate_filter>;
    transfers_?: InputMaybe<ethereumPrimaryTransfer_filter>;
    flashloans_?: InputMaybe<ethereumPrimaryFlashloan_filter>;
    _baseTrackingBorrowSpeed?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_not?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_gt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_lt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_gte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_lte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingBorrowSpeed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _baseTrackingBorrowSpeed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _baseTrackingSupplySpeed?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_not?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_gt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_lt?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_gte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_lte?: InputMaybe<Scalars['BigInt']>;
    _baseTrackingSupplySpeed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _baseTrackingSupplySpeed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _vToken?: InputMaybe<Scalars['String']>;
    _vToken_not?: InputMaybe<Scalars['String']>;
    _vToken_gt?: InputMaybe<Scalars['String']>;
    _vToken_lt?: InputMaybe<Scalars['String']>;
    _vToken_gte?: InputMaybe<Scalars['String']>;
    _vToken_lte?: InputMaybe<Scalars['String']>;
    _vToken_in?: InputMaybe<Array<Scalars['String']>>;
    _vToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    _vToken_contains?: InputMaybe<Scalars['String']>;
    _vToken_contains_nocase?: InputMaybe<Scalars['String']>;
    _vToken_not_contains?: InputMaybe<Scalars['String']>;
    _vToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _vToken_starts_with?: InputMaybe<Scalars['String']>;
    _vToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_not_starts_with?: InputMaybe<Scalars['String']>;
    _vToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_ends_with?: InputMaybe<Scalars['String']>;
    _vToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_not_ends_with?: InputMaybe<Scalars['String']>;
    _vToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _vToken_?: InputMaybe<ethereumPrimaryToken_filter>;
    _sToken?: InputMaybe<Scalars['String']>;
    _sToken_not?: InputMaybe<Scalars['String']>;
    _sToken_gt?: InputMaybe<Scalars['String']>;
    _sToken_lt?: InputMaybe<Scalars['String']>;
    _sToken_gte?: InputMaybe<Scalars['String']>;
    _sToken_lte?: InputMaybe<Scalars['String']>;
    _sToken_in?: InputMaybe<Array<Scalars['String']>>;
    _sToken_not_in?: InputMaybe<Array<Scalars['String']>>;
    _sToken_contains?: InputMaybe<Scalars['String']>;
    _sToken_contains_nocase?: InputMaybe<Scalars['String']>;
    _sToken_not_contains?: InputMaybe<Scalars['String']>;
    _sToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _sToken_starts_with?: InputMaybe<Scalars['String']>;
    _sToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_not_starts_with?: InputMaybe<Scalars['String']>;
    _sToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_ends_with?: InputMaybe<Scalars['String']>;
    _sToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_not_ends_with?: InputMaybe<Scalars['String']>;
    _sToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _sToken_?: InputMaybe<ethereumPrimaryToken_filter>;
    _prePauseState?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_not?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_contains?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_contains_nocase?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_not_contains?: InputMaybe<Array<Scalars['Boolean']>>;
    _prePauseState_not_contains_nocase?: InputMaybe<Array<Scalars['Boolean']>>;
    _lastRewardsUpdated?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_not?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_gt?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_lt?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_gte?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_lte?: InputMaybe<Scalars['BigInt']>;
    _lastRewardsUpdated_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _lastRewardsUpdated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _liquidationProtocolFee?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    _liquidationProtocolFee_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    _liquidationProtocolFee_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    _liquidationProtocolFee_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    _liquidationProtocolFee_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    _liquidationProtocolFee_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    _liquidationProtocolFee_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    _liquidationProtocolFee_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    _siloedBorrowing?: InputMaybe<Scalars['Boolean']>;
    _siloedBorrowing_not?: InputMaybe<Scalars['Boolean']>;
    _siloedBorrowing_in?: InputMaybe<Array<Scalars['Boolean']>>;
    _siloedBorrowing_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryMarket_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryMarket_filter>>>;
};
export type ethereumPrimaryMarket_orderBy = 'id' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'name' | 'isActive' | 'canBorrowFrom' | 'canUseAsCollateral' | 'maximumLTV' | 'liquidationThreshold' | 'liquidationPenalty' | 'canIsolate' | 'createdTimestamp' | 'createdBlockNumber' | 'oracle' | 'oracle__id' | 'oracle__oracleAddress' | 'oracle__blockCreated' | 'oracle__timestampCreated' | 'oracle__isActive' | 'oracle__isUSD' | 'oracle__hashEnded' | 'oracle__oracleSource' | 'relation' | 'rewardTokens' | 'rewardTokenEmissionsAmount' | 'rewardTokenEmissionsUSD' | 'stakedOutputTokenAmount' | 'inputToken' | 'inputToken__id' | 'inputToken__name' | 'inputToken__symbol' | 'inputToken__decimals' | 'inputToken__lastPriceUSD' | 'inputToken__lastPriceBlockNumber' | 'inputToken__type' | 'inputToken___iavsTokenType' | 'inputTokenBalance' | 'inputTokenPriceUSD' | 'outputToken' | 'outputToken__id' | 'outputToken__name' | 'outputToken__symbol' | 'outputToken__decimals' | 'outputToken__lastPriceUSD' | 'outputToken__lastPriceBlockNumber' | 'outputToken__type' | 'outputToken___iavsTokenType' | 'outputTokenSupply' | 'outputTokenPriceUSD' | 'exchangeRate' | 'rates' | 'reserves' | 'reserveFactor' | 'borrowedToken' | 'borrowedToken__id' | 'borrowedToken__name' | 'borrowedToken__symbol' | 'borrowedToken__decimals' | 'borrowedToken__lastPriceUSD' | 'borrowedToken__lastPriceBlockNumber' | 'borrowedToken__type' | 'borrowedToken___iavsTokenType' | 'variableBorrowedTokenBalance' | 'stableBorrowedTokenBalance' | 'indexLastUpdatedTimestamp' | 'supplyIndex' | 'supplyCap' | 'borrowIndex' | 'borrowCap' | 'totalValueLockedUSD' | 'cumulativeSupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'revenueDetail' | 'revenueDetail__id' | 'totalDepositBalanceUSD' | 'cumulativeDepositUSD' | 'totalBorrowBalanceUSD' | 'cumulativeBorrowUSD' | 'cumulativeLiquidateUSD' | 'cumulativeTransferUSD' | 'cumulativeFlashloanUSD' | 'transactionCount' | 'depositCount' | 'withdrawCount' | 'borrowCount' | 'repayCount' | 'liquidationCount' | 'transferCount' | 'flashloanCount' | 'cumulativeUniqueUsers' | 'cumulativeUniqueDepositors' | 'cumulativeUniqueBorrowers' | 'cumulativeUniqueLiquidators' | 'cumulativeUniqueLiquidatees' | 'cumulativeUniqueTransferrers' | 'cumulativeUniqueFlashloaners' | 'positions' | 'positionCount' | 'openPositionCount' | 'closedPositionCount' | 'lendingPositionCount' | 'borrowingPositionCount' | 'dailySnapshots' | 'hourlySnapshots' | 'deposits' | 'withdraws' | 'borrows' | 'repays' | 'liquidates' | 'transfers' | 'flashloans' | '_baseTrackingBorrowSpeed' | '_baseTrackingSupplySpeed' | '_vToken' | '_vToken__id' | '_vToken__name' | '_vToken__symbol' | '_vToken__decimals' | '_vToken__lastPriceUSD' | '_vToken__lastPriceBlockNumber' | '_vToken__type' | '_vToken___iavsTokenType' | '_sToken' | '_sToken__id' | '_sToken__name' | '_sToken__symbol' | '_sToken__decimals' | '_sToken__lastPriceUSD' | '_sToken__lastPriceBlockNumber' | '_sToken__type' | '_sToken___iavsTokenType' | '_prePauseState' | '_lastRewardsUpdated' | '_liquidationProtocolFee' | '_siloedBorrowing';
export type ethereumPrimaryNetwork = 'ARBITRUM_ONE' | 'ARWEAVE_MAINNET' | 'AURORA' | 'AVALANCHE' | 'BOBA' | 'BSC' | 'CELO' | 'COSMOS' | 'CRONOS' | 'MAINNET' | 'FANTOM' | 'FUSE' | 'HARMONY' | 'JUNO' | 'MOONBEAM' | 'MOONRIVER' | 'NEAR_MAINNET' | 'OPTIMISM' | 'OSMOSIS' | 'MATIC' | 'GNOSIS' | 'ANDROMEDA' | 'BASE';
export type ethereumPrimaryOracle = {
    /**  { Market Address }{ Token Address }  */
    id: Scalars['ethereumPrimaryBytes'];
    oracleAddress: Scalars['ethereumPrimaryBytes'];
    /**  The market that this oracle is used for pricing  */
    market: ethereumPrimaryMarket;
    /**  The block this oracle was adopted for a market  */
    blockCreated: Scalars['BigInt'];
    /**  The timestamp this oracle was adopted for a market  */
    timestampCreated: Scalars['BigInt'];
    /**  Is the Oracle currently used as the source of truth for a market */
    isActive: Scalars['Boolean'];
    /**  True if the oracle returns prices in USD (e.g. generally the other case is the network's native token)  */
    isUSD: Scalars['Boolean'];
    /**  The hash where the oracle was no longer used  */
    hashEnded?: Maybe<Scalars['ethereumPrimaryBytes']>;
    /**  The Protocol that is providing the oracle (nullable if non-standard source) */
    oracleSource?: Maybe<ethereumPrimaryOracleSource>;
};
export type ethereumPrimaryOracleSource = 'UNISWAP' | 'BALANCER' | 'CHAINLINK' | 'YEARN' | 'SUSHISWAP' | 'CURVE';
export type ethereumPrimaryOracle_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    oracleAddress_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    oracleAddress_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleAddress_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    blockCreated?: InputMaybe<Scalars['BigInt']>;
    blockCreated_not?: InputMaybe<Scalars['BigInt']>;
    blockCreated_gt?: InputMaybe<Scalars['BigInt']>;
    blockCreated_lt?: InputMaybe<Scalars['BigInt']>;
    blockCreated_gte?: InputMaybe<Scalars['BigInt']>;
    blockCreated_lte?: InputMaybe<Scalars['BigInt']>;
    blockCreated_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockCreated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampCreated?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_not?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_gt?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_lt?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_gte?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_lte?: InputMaybe<Scalars['BigInt']>;
    timestampCreated_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampCreated_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    isActive?: InputMaybe<Scalars['Boolean']>;
    isActive_not?: InputMaybe<Scalars['Boolean']>;
    isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isUSD?: InputMaybe<Scalars['Boolean']>;
    isUSD_not?: InputMaybe<Scalars['Boolean']>;
    isUSD_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isUSD_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    hashEnded?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashEnded_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashEnded_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashEnded_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashEnded_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashEnded_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashEnded_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hashEnded_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hashEnded_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashEnded_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracleSource?: InputMaybe<ethereumPrimaryOracleSource>;
    oracleSource_not?: InputMaybe<ethereumPrimaryOracleSource>;
    oracleSource_in?: InputMaybe<Array<ethereumPrimaryOracleSource>>;
    oracleSource_not_in?: InputMaybe<Array<ethereumPrimaryOracleSource>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryOracle_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryOracle_filter>>>;
};
export type ethereumPrimaryOracle_orderBy = 'id' | 'oracleAddress' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'blockCreated' | 'timestampCreated' | 'isActive' | 'isUSD' | 'hashEnded' | 'oracleSource';
/** Defines the order direction, either ascending or descending */
export type ethereumPrimaryOrderDirection = 'asc' | 'desc';
export type ethereumPrimaryPermissionType = 
/**  Only users that have been whitelisted can interact. e.g. Only approved institutions can borrow  */
'WHITELIST_ONLY'
/**  To interact a user must be KYC'd  */
 | 'PERMISSIONED'
/**  Protocols that do not KYC. Can be used by any account  */
 | 'PERMISSIONLESS'
/**  Only the protocol admin address can make do the defined actions  */
 | 'ADMIN';
export type ethereumPrimaryPosition = {
    /**  { Account address }-{ Market address }-{ Position Side }-{ Optional: Interest Rate Type}-{ Counter }  */
    id: Scalars['ID'];
    /**  Account that owns this position  */
    account: ethereumPrimaryAccount;
    /**  The market in which this position was opened  */
    market: ethereumPrimaryMarket;
    /**  The asset in which this position was opened with  */
    asset: ethereumPrimaryToken;
    /**  The hash of the transaction that opened this position  */
    hashOpened: Scalars['ethereumPrimaryBytes'];
    /**  The hash of the transaction that closed this position  */
    hashClosed?: Maybe<Scalars['ethereumPrimaryBytes']>;
    /**  Block number of when the position was opened  */
    blockNumberOpened: Scalars['BigInt'];
    /**  Timestamp when the position was opened  */
    timestampOpened: Scalars['BigInt'];
    /**  Block number of when the position was closed (0 if still open)  */
    blockNumberClosed?: Maybe<Scalars['BigInt']>;
    /**  Timestamp when the position was closed (0 if still open)  */
    timestampClosed?: Maybe<Scalars['BigInt']>;
    /**  Side of the position (either lender or borrower)  */
    side: ethereumPrimaryPositionSide;
    /**  Type of interest rate used for this position (stable or variable). Generally for borrow side positions. */
    type?: Maybe<ethereumPrimaryInterestRateType>;
    /**  Whether this position has been enabled as a collateral (only applies to LENDER positions). For protocols (e.g. MakerDAO) that doesn't require enabling explicitly, this will always be true.  */
    isCollateral?: Maybe<Scalars['Boolean']>;
    /**  Whether this position is being isolated from risk from other positions (only applies to LENDER positions). For protocols (e.g. Aave V3) this reduces risk exposure from other user positions.  */
    isIsolated?: Maybe<Scalars['Boolean']>;
    /**  Token balance in this position, in native amounts  */
    balance: Scalars['BigInt'];
    /**  The token balance of this position without interest generated (Used to calculate interest generated on a position)  */
    principal?: Maybe<Scalars['BigInt']>;
    /**  Number of deposits related to this position  */
    depositCount: Scalars['Int'];
    /**  All deposit events of this position  */
    deposits: Array<ethereumPrimaryDeposit>;
    /**  Number of withdrawals related to this position  */
    withdrawCount: Scalars['Int'];
    /**  All withdraw events of this position  */
    withdraws: Array<ethereumPrimaryWithdraw>;
    /**  Number of borrows related to this position  */
    borrowCount: Scalars['Int'];
    /**  All borrow events of this position  */
    borrows: Array<ethereumPrimaryBorrow>;
    /**  Number of repays related to this position  */
    repayCount: Scalars['Int'];
    /**  All repay events of this position  */
    repays: Array<ethereumPrimaryRepay>;
    /**  Number of liquidations related to this position (incremented when this position is liquidated)  */
    liquidationCount: Scalars['Int'];
    /**  Liquidation event related to this position (if exists)  */
    liquidations: Array<ethereumPrimaryLiquidate>;
    /**  Number of times this position has transferred  */
    transferredCount: Scalars['Int'];
    /**  Number of times this position has received a transfer  */
    receivedCount: Scalars['Int'];
    /**  All transfer events related to this position  */
    transfers: Array<ethereumPrimaryTransfer>;
    /**  Position daily snapshots for open positions  */
    snapshots: Array<ethereumPrimaryPositionSnapshot>;
    /**  efficient mode flag  */
    _eMode?: Maybe<Scalars['Boolean']>;
};
export type ethereumPrimaryPositiondepositsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryDeposit_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryDeposit_filter>;
};
export type ethereumPrimaryPositionwithdrawsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryWithdraw_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryWithdraw_filter>;
};
export type ethereumPrimaryPositionborrowsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryBorrow_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryBorrow_filter>;
};
export type ethereumPrimaryPositionrepaysArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryRepay_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryRepay_filter>;
};
export type ethereumPrimaryPositionliquidationsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryLiquidate_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryLiquidate_filter>;
};
export type ethereumPrimaryPositiontransfersArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryTransfer_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryTransfer_filter>;
};
export type ethereumPrimaryPositionsnapshotsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPositionSnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPositionSnapshot_filter>;
};
export type ethereumPrimaryPositionSide = 
/**  Position opened as a lender (used as collateral)  */
'COLLATERAL'
/**  Position opened as a borrower  */
 | 'BORROWER';
export type ethereumPrimaryPositionSnapshot = {
    /**  { Position ID }-{ Transaction hash }-{ Log index }  */
    id: Scalars['ID'];
    /**  Transaction hash of the transaction that triggered this snapshot  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Nonce of the transaction that triggered this snapshot  */
    nonce: Scalars['BigInt'];
    /**  Account that owns this position  */
    account: ethereumPrimaryAccount;
    /**  Position of this snapshot  */
    position: ethereumPrimaryPosition;
    /**  Token balance in this position, in native amounts  */
    balance: Scalars['BigInt'];
    /**  Token balance in this position, in USD  */
    balanceUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
    /**  The principal value without interest accrued. Used to calculate interest per position.  */
    principal?: Maybe<Scalars['BigInt']>;
    /**  Base borrow OR supply index (based on the position side). Used to calculate interest across snapshots.  */
    index?: Maybe<Scalars['BigInt']>;
};
export type ethereumPrimaryPositionSnapshot_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<ethereumPrimaryAccount_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<ethereumPrimaryPosition_filter>;
    balance?: InputMaybe<Scalars['BigInt']>;
    balance_not?: InputMaybe<Scalars['BigInt']>;
    balance_gt?: InputMaybe<Scalars['BigInt']>;
    balance_lt?: InputMaybe<Scalars['BigInt']>;
    balance_gte?: InputMaybe<Scalars['BigInt']>;
    balance_lte?: InputMaybe<Scalars['BigInt']>;
    balance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    balance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    balanceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    balanceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    balanceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    balanceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    balanceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    balanceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    balanceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    balanceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal?: InputMaybe<Scalars['BigInt']>;
    principal_not?: InputMaybe<Scalars['BigInt']>;
    principal_gt?: InputMaybe<Scalars['BigInt']>;
    principal_lt?: InputMaybe<Scalars['BigInt']>;
    principal_gte?: InputMaybe<Scalars['BigInt']>;
    principal_lte?: InputMaybe<Scalars['BigInt']>;
    principal_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    index?: InputMaybe<Scalars['BigInt']>;
    index_not?: InputMaybe<Scalars['BigInt']>;
    index_gt?: InputMaybe<Scalars['BigInt']>;
    index_lt?: InputMaybe<Scalars['BigInt']>;
    index_gte?: InputMaybe<Scalars['BigInt']>;
    index_lte?: InputMaybe<Scalars['BigInt']>;
    index_in?: InputMaybe<Array<Scalars['BigInt']>>;
    index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryPositionSnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryPositionSnapshot_filter>>>;
};
export type ethereumPrimaryPositionSnapshot_orderBy = 'id' | 'hash' | 'logIndex' | 'nonce' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'balance' | 'balanceUSD' | 'blockNumber' | 'timestamp' | 'principal' | 'index';
export type ethereumPrimaryPosition_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<ethereumPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    hashOpened?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashOpened_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashOpened_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashOpened_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashOpened_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashOpened_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashOpened_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hashOpened_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hashOpened_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashOpened_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hashClosed_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hashClosed_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hashClosed_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    blockNumberOpened?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_not?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumberOpened_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumberOpened_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampOpened?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_not?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_gt?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_lt?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_gte?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_lte?: InputMaybe<Scalars['BigInt']>;
    timestampOpened_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampOpened_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumberClosed?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_not?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumberClosed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumberClosed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampClosed?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_not?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_gt?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_lt?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_gte?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_lte?: InputMaybe<Scalars['BigInt']>;
    timestampClosed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestampClosed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    side?: InputMaybe<ethereumPrimaryPositionSide>;
    side_not?: InputMaybe<ethereumPrimaryPositionSide>;
    side_in?: InputMaybe<Array<ethereumPrimaryPositionSide>>;
    side_not_in?: InputMaybe<Array<ethereumPrimaryPositionSide>>;
    type?: InputMaybe<ethereumPrimaryInterestRateType>;
    type_not?: InputMaybe<ethereumPrimaryInterestRateType>;
    type_in?: InputMaybe<Array<ethereumPrimaryInterestRateType>>;
    type_not_in?: InputMaybe<Array<ethereumPrimaryInterestRateType>>;
    isCollateral?: InputMaybe<Scalars['Boolean']>;
    isCollateral_not?: InputMaybe<Scalars['Boolean']>;
    isCollateral_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isCollateral_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isIsolated?: InputMaybe<Scalars['Boolean']>;
    isIsolated_not?: InputMaybe<Scalars['Boolean']>;
    isIsolated_in?: InputMaybe<Array<Scalars['Boolean']>>;
    isIsolated_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    balance?: InputMaybe<Scalars['BigInt']>;
    balance_not?: InputMaybe<Scalars['BigInt']>;
    balance_gt?: InputMaybe<Scalars['BigInt']>;
    balance_lt?: InputMaybe<Scalars['BigInt']>;
    balance_gte?: InputMaybe<Scalars['BigInt']>;
    balance_lte?: InputMaybe<Scalars['BigInt']>;
    balance_in?: InputMaybe<Array<Scalars['BigInt']>>;
    balance_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal?: InputMaybe<Scalars['BigInt']>;
    principal_not?: InputMaybe<Scalars['BigInt']>;
    principal_gt?: InputMaybe<Scalars['BigInt']>;
    principal_lt?: InputMaybe<Scalars['BigInt']>;
    principal_gte?: InputMaybe<Scalars['BigInt']>;
    principal_lte?: InputMaybe<Scalars['BigInt']>;
    principal_in?: InputMaybe<Array<Scalars['BigInt']>>;
    principal_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    depositCount?: InputMaybe<Scalars['Int']>;
    depositCount_not?: InputMaybe<Scalars['Int']>;
    depositCount_gt?: InputMaybe<Scalars['Int']>;
    depositCount_lt?: InputMaybe<Scalars['Int']>;
    depositCount_gte?: InputMaybe<Scalars['Int']>;
    depositCount_lte?: InputMaybe<Scalars['Int']>;
    depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    deposits_?: InputMaybe<ethereumPrimaryDeposit_filter>;
    withdrawCount?: InputMaybe<Scalars['Int']>;
    withdrawCount_not?: InputMaybe<Scalars['Int']>;
    withdrawCount_gt?: InputMaybe<Scalars['Int']>;
    withdrawCount_lt?: InputMaybe<Scalars['Int']>;
    withdrawCount_gte?: InputMaybe<Scalars['Int']>;
    withdrawCount_lte?: InputMaybe<Scalars['Int']>;
    withdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    withdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    withdraws_?: InputMaybe<ethereumPrimaryWithdraw_filter>;
    borrowCount?: InputMaybe<Scalars['Int']>;
    borrowCount_not?: InputMaybe<Scalars['Int']>;
    borrowCount_gt?: InputMaybe<Scalars['Int']>;
    borrowCount_lt?: InputMaybe<Scalars['Int']>;
    borrowCount_gte?: InputMaybe<Scalars['Int']>;
    borrowCount_lte?: InputMaybe<Scalars['Int']>;
    borrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    borrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    borrows_?: InputMaybe<ethereumPrimaryBorrow_filter>;
    repayCount?: InputMaybe<Scalars['Int']>;
    repayCount_not?: InputMaybe<Scalars['Int']>;
    repayCount_gt?: InputMaybe<Scalars['Int']>;
    repayCount_lt?: InputMaybe<Scalars['Int']>;
    repayCount_gte?: InputMaybe<Scalars['Int']>;
    repayCount_lte?: InputMaybe<Scalars['Int']>;
    repayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    repayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    repays_?: InputMaybe<ethereumPrimaryRepay_filter>;
    liquidationCount?: InputMaybe<Scalars['Int']>;
    liquidationCount_not?: InputMaybe<Scalars['Int']>;
    liquidationCount_gt?: InputMaybe<Scalars['Int']>;
    liquidationCount_lt?: InputMaybe<Scalars['Int']>;
    liquidationCount_gte?: InputMaybe<Scalars['Int']>;
    liquidationCount_lte?: InputMaybe<Scalars['Int']>;
    liquidationCount_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidationCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    liquidations_?: InputMaybe<ethereumPrimaryLiquidate_filter>;
    transferredCount?: InputMaybe<Scalars['Int']>;
    transferredCount_not?: InputMaybe<Scalars['Int']>;
    transferredCount_gt?: InputMaybe<Scalars['Int']>;
    transferredCount_lt?: InputMaybe<Scalars['Int']>;
    transferredCount_gte?: InputMaybe<Scalars['Int']>;
    transferredCount_lte?: InputMaybe<Scalars['Int']>;
    transferredCount_in?: InputMaybe<Array<Scalars['Int']>>;
    transferredCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    receivedCount?: InputMaybe<Scalars['Int']>;
    receivedCount_not?: InputMaybe<Scalars['Int']>;
    receivedCount_gt?: InputMaybe<Scalars['Int']>;
    receivedCount_lt?: InputMaybe<Scalars['Int']>;
    receivedCount_gte?: InputMaybe<Scalars['Int']>;
    receivedCount_lte?: InputMaybe<Scalars['Int']>;
    receivedCount_in?: InputMaybe<Array<Scalars['Int']>>;
    receivedCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    transfers_?: InputMaybe<ethereumPrimaryTransfer_filter>;
    snapshots_?: InputMaybe<ethereumPrimaryPositionSnapshot_filter>;
    _eMode?: InputMaybe<Scalars['Boolean']>;
    _eMode_not?: InputMaybe<Scalars['Boolean']>;
    _eMode_in?: InputMaybe<Array<Scalars['Boolean']>>;
    _eMode_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryPosition_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryPosition_filter>>>;
};
export type ethereumPrimaryPosition_orderBy = 'id' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'hashOpened' | 'hashClosed' | 'blockNumberOpened' | 'timestampOpened' | 'blockNumberClosed' | 'timestampClosed' | 'side' | 'type' | 'isCollateral' | 'isIsolated' | 'balance' | 'principal' | 'depositCount' | 'deposits' | 'withdrawCount' | 'withdraws' | 'borrowCount' | 'borrows' | 'repayCount' | 'repays' | 'liquidationCount' | 'liquidations' | 'transferredCount' | 'receivedCount' | 'transfers' | 'snapshots' | '_eMode';
export type ethereumPrimaryProtocol = {
    /**  Smart contract address of the protocol's main contract (Factory, Registry, etc)  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Base name of the protocol, excluding transformations. e.g. Aave  */
    protocol: Scalars['String'];
    /**  Name of the protocol, including version. e.g. Aave v2  */
    name: Scalars['String'];
    /**  Slug of protocol, including version. e.g. aave-v2  */
    slug: Scalars['String'];
    /**  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)  */
    schemaVersion: Scalars['String'];
    /**  Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)  */
    subgraphVersion: Scalars['String'];
    /**  Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)  */
    methodologyVersion: Scalars['String'];
    /**  The blockchain network this subgraph is indexing on  */
    network: ethereumPrimaryNetwork;
    /**  The type of protocol (e.g. DEX, Lending, Yield, etc)  */
    type: ethereumPrimaryProtocolType;
    /**  The specific lending protocol type  */
    lendingType?: Maybe<ethereumPrimaryLendingType>;
    /**  The specific permissions required to lend in this protocol  */
    lenderPermissionType?: Maybe<ethereumPrimaryPermissionType>;
    /**  The specific permissions required to borrow from this protocol  */
    borrowerPermissionType?: Maybe<ethereumPrimaryPermissionType>;
    /**  The specific permissions required to create a pool (market) in this protocol  */
    poolCreatorPermissionType?: Maybe<ethereumPrimaryPermissionType>;
    /**  Risk type of the lending protocol  */
    riskType?: Maybe<ethereumPrimaryRiskType>;
    /**  The way a positions can be collateralized  */
    collateralizationType?: Maybe<ethereumPrimaryCollateralizationType>;
    /**  Current TVL (Total Value Locked) of the entire protocol  */
    totalValueLockedUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.  */
    protocolControlledValueUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.  */
    cumulativeSupplySideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.  */
    cumulativeProtocolSideRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.  */
    cumulativeTotalRevenueUSD: Scalars['ethereumPrimaryBigDecimal'];
    /**  Total number of pools  */
    totalPoolCount: Scalars['Int'];
    /**  Daily usage metrics for this protocol  */
    dailyUsageMetrics: Array<ethereumPrimaryUsageMetricsDailySnapshot>;
    /**  Hourly usage metrics for this protocol  */
    hourlyUsageMetrics: Array<ethereumPrimaryUsageMetricsHourlySnapshot>;
    /**  Daily financial metrics for this protocol  */
    financialMetrics: Array<ethereumPrimaryFinancialsDailySnapshot>;
};
export type ethereumPrimaryProtocoldailyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>;
};
export type ethereumPrimaryProtocolhourlyUsageMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>;
};
export type ethereumPrimaryProtocolfinancialMetricsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>;
};
export type ethereumPrimaryProtocolType = 'EXCHANGE' | 'LENDING' | 'YIELD' | 'BRIDGE' | 'GENERIC';
export type ethereumPrimaryProtocol_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug?: InputMaybe<Scalars['String']>;
    slug_not?: InputMaybe<Scalars['String']>;
    slug_gt?: InputMaybe<Scalars['String']>;
    slug_lt?: InputMaybe<Scalars['String']>;
    slug_gte?: InputMaybe<Scalars['String']>;
    slug_lte?: InputMaybe<Scalars['String']>;
    slug_in?: InputMaybe<Array<Scalars['String']>>;
    slug_not_in?: InputMaybe<Array<Scalars['String']>>;
    slug_contains?: InputMaybe<Scalars['String']>;
    slug_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_not_contains?: InputMaybe<Scalars['String']>;
    slug_not_contains_nocase?: InputMaybe<Scalars['String']>;
    slug_starts_with?: InputMaybe<Scalars['String']>;
    slug_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_starts_with?: InputMaybe<Scalars['String']>;
    slug_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    slug_ends_with?: InputMaybe<Scalars['String']>;
    slug_ends_with_nocase?: InputMaybe<Scalars['String']>;
    slug_not_ends_with?: InputMaybe<Scalars['String']>;
    slug_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion?: InputMaybe<Scalars['String']>;
    schemaVersion_not?: InputMaybe<Scalars['String']>;
    schemaVersion_gt?: InputMaybe<Scalars['String']>;
    schemaVersion_lt?: InputMaybe<Scalars['String']>;
    schemaVersion_gte?: InputMaybe<Scalars['String']>;
    schemaVersion_lte?: InputMaybe<Scalars['String']>;
    schemaVersion_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    schemaVersion_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains?: InputMaybe<Scalars['String']>;
    schemaVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    schemaVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion?: InputMaybe<Scalars['String']>;
    subgraphVersion_not?: InputMaybe<Scalars['String']>;
    subgraphVersion_gt?: InputMaybe<Scalars['String']>;
    subgraphVersion_lt?: InputMaybe<Scalars['String']>;
    subgraphVersion_gte?: InputMaybe<Scalars['String']>;
    subgraphVersion_lte?: InputMaybe<Scalars['String']>;
    subgraphVersion_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    subgraphVersion_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    subgraphVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion?: InputMaybe<Scalars['String']>;
    methodologyVersion_not?: InputMaybe<Scalars['String']>;
    methodologyVersion_gt?: InputMaybe<Scalars['String']>;
    methodologyVersion_lt?: InputMaybe<Scalars['String']>;
    methodologyVersion_gte?: InputMaybe<Scalars['String']>;
    methodologyVersion_lte?: InputMaybe<Scalars['String']>;
    methodologyVersion_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_not_in?: InputMaybe<Array<Scalars['String']>>;
    methodologyVersion_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_contains_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_ends_with_nocase?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with?: InputMaybe<Scalars['String']>;
    methodologyVersion_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    network?: InputMaybe<ethereumPrimaryNetwork>;
    network_not?: InputMaybe<ethereumPrimaryNetwork>;
    network_in?: InputMaybe<Array<ethereumPrimaryNetwork>>;
    network_not_in?: InputMaybe<Array<ethereumPrimaryNetwork>>;
    type?: InputMaybe<ethereumPrimaryProtocolType>;
    type_not?: InputMaybe<ethereumPrimaryProtocolType>;
    type_in?: InputMaybe<Array<ethereumPrimaryProtocolType>>;
    type_not_in?: InputMaybe<Array<ethereumPrimaryProtocolType>>;
    lendingType?: InputMaybe<ethereumPrimaryLendingType>;
    lendingType_not?: InputMaybe<ethereumPrimaryLendingType>;
    lendingType_in?: InputMaybe<Array<ethereumPrimaryLendingType>>;
    lendingType_not_in?: InputMaybe<Array<ethereumPrimaryLendingType>>;
    lenderPermissionType?: InputMaybe<ethereumPrimaryPermissionType>;
    lenderPermissionType_not?: InputMaybe<ethereumPrimaryPermissionType>;
    lenderPermissionType_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    lenderPermissionType_not_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    borrowerPermissionType?: InputMaybe<ethereumPrimaryPermissionType>;
    borrowerPermissionType_not?: InputMaybe<ethereumPrimaryPermissionType>;
    borrowerPermissionType_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    borrowerPermissionType_not_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    poolCreatorPermissionType?: InputMaybe<ethereumPrimaryPermissionType>;
    poolCreatorPermissionType_not?: InputMaybe<ethereumPrimaryPermissionType>;
    poolCreatorPermissionType_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    poolCreatorPermissionType_not_in?: InputMaybe<Array<ethereumPrimaryPermissionType>>;
    riskType?: InputMaybe<ethereumPrimaryRiskType>;
    riskType_not?: InputMaybe<ethereumPrimaryRiskType>;
    riskType_in?: InputMaybe<Array<ethereumPrimaryRiskType>>;
    riskType_not_in?: InputMaybe<Array<ethereumPrimaryRiskType>>;
    collateralizationType?: InputMaybe<ethereumPrimaryCollateralizationType>;
    collateralizationType_not?: InputMaybe<ethereumPrimaryCollateralizationType>;
    collateralizationType_in?: InputMaybe<Array<ethereumPrimaryCollateralizationType>>;
    collateralizationType_not_in?: InputMaybe<Array<ethereumPrimaryCollateralizationType>>;
    totalValueLockedUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    totalValueLockedUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalValueLockedUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    protocolControlledValueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    protocolControlledValueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    protocolControlledValueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeSupplySideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeSupplySideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeSupplySideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeProtocolSideRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeProtocolSideRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    cumulativeTotalRevenueUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    cumulativeTotalRevenueUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    totalPoolCount?: InputMaybe<Scalars['Int']>;
    totalPoolCount_not?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyUsageMetrics_?: InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>;
    hourlyUsageMetrics_?: InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>;
    financialMetrics_?: InputMaybe<ethereumPrimaryFinancialsDailySnapshot_filter>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryProtocol_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryProtocol_filter>>>;
};
export type ethereumPrimaryProtocol_orderBy = 'id' | 'protocol' | 'name' | 'slug' | 'schemaVersion' | 'subgraphVersion' | 'methodologyVersion' | 'network' | 'type' | 'lendingType' | 'lenderPermissionType' | 'borrowerPermissionType' | 'poolCreatorPermissionType' | 'riskType' | 'collateralizationType' | 'totalValueLockedUSD' | 'protocolControlledValueUSD' | 'cumulativeUniqueUsers' | 'cumulativeSupplySideRevenueUSD' | 'cumulativeProtocolSideRevenueUSD' | 'cumulativeTotalRevenueUSD' | 'totalPoolCount' | 'dailyUsageMetrics' | 'hourlyUsageMetrics' | 'financialMetrics';
export type ethereumPrimaryRepay = ethereumPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that reduces their debt on this transaction  */
    account: ethereumPrimaryAccount;
    /**  Account that is providing the funds to repay the debt  */
    accountActor?: Maybe<ethereumPrimaryAccount>;
    /**  The market tokens are repaid/burned to  */
    market: ethereumPrimaryMarket;
    /**  The user position changed by this event  */
    position: ethereumPrimaryPosition;
    /**  Token repaid/burned  */
    asset: ethereumPrimaryToken;
    /**  Amount of token repaid/burned in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token repaid/burned in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryRepay_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<ethereumPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<ethereumPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<ethereumPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryRepay_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryRepay_filter>>>;
};
export type ethereumPrimaryRepay_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type ethereumPrimaryRevenueDetail = {
    /**  { Market/Protocol ID }{ Optional: Snapshot ID }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  The source of revenue (in alphabetical order)  */
    sources: Array<ethereumPrimaryFee>;
    /**  The amount of revenue in USD (same order as sources)  */
    amountsUSD: Array<Scalars['ethereumPrimaryBigDecimal']>;
};
export type ethereumPrimaryRevenueDetailsourcesArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryFee_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryFee_filter>;
};
export type ethereumPrimaryRevenueDetail_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    sources?: InputMaybe<Array<Scalars['String']>>;
    sources_not?: InputMaybe<Array<Scalars['String']>>;
    sources_contains?: InputMaybe<Array<Scalars['String']>>;
    sources_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    sources_not_contains?: InputMaybe<Array<Scalars['String']>>;
    sources_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    sources_?: InputMaybe<ethereumPrimaryFee_filter>;
    amountsUSD?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountsUSD_not?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountsUSD_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountsUSD_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountsUSD_not_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountsUSD_not_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryRevenueDetail_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryRevenueDetail_filter>>>;
};
export type ethereumPrimaryRevenueDetail_orderBy = 'id' | 'sources' | 'amountsUSD';
export type ethereumPrimaryRewardToken = {
    /**  { Reward token type }-{ Smart contract address of the reward token }  */
    id: Scalars['ID'];
    /**  Reference to the actual token  */
    token: ethereumPrimaryToken;
    /**  The type of the reward token  */
    type: ethereumPrimaryRewardTokenType;
    _distributionEnd?: Maybe<Scalars['BigInt']>;
};
export type ethereumPrimaryRewardTokenType = 
/**  For reward tokens awarded to LPs/lenders  */
'DEPOSIT'
/**  For reward tokens awarded to borrowers of variable debt  */
 | 'VARIABLE_BORROW'
/**  For reward tokens awarded to borrowers of stable debt  */
 | 'STABLE_BORROW'
/**  For reward tokens awarded to stakers  */
 | 'STAKE';
export type ethereumPrimaryRewardToken_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    token?: InputMaybe<Scalars['String']>;
    token_not?: InputMaybe<Scalars['String']>;
    token_gt?: InputMaybe<Scalars['String']>;
    token_lt?: InputMaybe<Scalars['String']>;
    token_gte?: InputMaybe<Scalars['String']>;
    token_lte?: InputMaybe<Scalars['String']>;
    token_in?: InputMaybe<Array<Scalars['String']>>;
    token_not_in?: InputMaybe<Array<Scalars['String']>>;
    token_contains?: InputMaybe<Scalars['String']>;
    token_contains_nocase?: InputMaybe<Scalars['String']>;
    token_not_contains?: InputMaybe<Scalars['String']>;
    token_not_contains_nocase?: InputMaybe<Scalars['String']>;
    token_starts_with?: InputMaybe<Scalars['String']>;
    token_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_starts_with?: InputMaybe<Scalars['String']>;
    token_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    token_ends_with?: InputMaybe<Scalars['String']>;
    token_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_not_ends_with?: InputMaybe<Scalars['String']>;
    token_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    token_?: InputMaybe<ethereumPrimaryToken_filter>;
    type?: InputMaybe<ethereumPrimaryRewardTokenType>;
    type_not?: InputMaybe<ethereumPrimaryRewardTokenType>;
    type_in?: InputMaybe<Array<ethereumPrimaryRewardTokenType>>;
    type_not_in?: InputMaybe<Array<ethereumPrimaryRewardTokenType>>;
    _distributionEnd?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_not?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_gt?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_lt?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_gte?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_lte?: InputMaybe<Scalars['BigInt']>;
    _distributionEnd_in?: InputMaybe<Array<Scalars['BigInt']>>;
    _distributionEnd_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryRewardToken_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryRewardToken_filter>>>;
};
export type ethereumPrimaryRewardToken_orderBy = 'id' | 'token' | 'token__id' | 'token__name' | 'token__symbol' | 'token__decimals' | 'token__lastPriceUSD' | 'token__lastPriceBlockNumber' | 'token__type' | 'token___iavsTokenType' | 'type' | '_distributionEnd';
export type ethereumPrimaryRiskType = 
/**  Global risk means each users position in a market is combined for one score to determine if they can be liquidated  */
'GLOBAL'
/**  Isolated risk means each users position in a market or CDP is isolated for risk of liquidation  */
 | 'ISOLATED';
export type ethereumPrimaryToken = {
    /**  Smart contract address of the token  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Name of the token, mirrored from the smart contract  */
    name: Scalars['String'];
    /**  Symbol of the token, mirrored from the smart contract  */
    symbol: Scalars['String'];
    /**  The number of decimal places this token uses, default to 18  */
    decimals: Scalars['Int'];
    /**  Optional field to track the price of a token, mostly for caching purposes  */
    lastPriceUSD?: Maybe<Scalars['ethereumPrimaryBigDecimal']>;
    /**  Optional field to track the block number of the last token price  */
    lastPriceBlockNumber?: Maybe<Scalars['BigInt']>;
    /**  The type of token the protocol creates for positions  */
    type?: Maybe<ethereumPrimaryTokenType>;
    /**  the market ID for underlying/asset token, aToken, vToken and sToken */
    _market?: Maybe<ethereumPrimaryMarket>;
    /**  type of token: inputToken, aToken, vToken, or sToken  */
    _iavsTokenType?: Maybe<Scalars['String']>;
};
export type ethereumPrimaryTokenType = 
/**  Rebasing tokens continuously adjust balances / supply as interest is accrued (e.g. Aave debt balances adjust at each block with interest)  */
'REBASING'
/**  Non-rebasing token balances / supply do not change as interest is accrued (e.g. Compound's cToken's do not adjust balance, the exchange rate changes with interest)  */
 | 'NON_REBASING';
export type ethereumPrimaryToken_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    name?: InputMaybe<Scalars['String']>;
    name_not?: InputMaybe<Scalars['String']>;
    name_gt?: InputMaybe<Scalars['String']>;
    name_lt?: InputMaybe<Scalars['String']>;
    name_gte?: InputMaybe<Scalars['String']>;
    name_lte?: InputMaybe<Scalars['String']>;
    name_in?: InputMaybe<Array<Scalars['String']>>;
    name_not_in?: InputMaybe<Array<Scalars['String']>>;
    name_contains?: InputMaybe<Scalars['String']>;
    name_contains_nocase?: InputMaybe<Scalars['String']>;
    name_not_contains?: InputMaybe<Scalars['String']>;
    name_not_contains_nocase?: InputMaybe<Scalars['String']>;
    name_starts_with?: InputMaybe<Scalars['String']>;
    name_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_starts_with?: InputMaybe<Scalars['String']>;
    name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    name_ends_with?: InputMaybe<Scalars['String']>;
    name_ends_with_nocase?: InputMaybe<Scalars['String']>;
    name_not_ends_with?: InputMaybe<Scalars['String']>;
    name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    symbol?: InputMaybe<Scalars['String']>;
    symbol_not?: InputMaybe<Scalars['String']>;
    symbol_gt?: InputMaybe<Scalars['String']>;
    symbol_lt?: InputMaybe<Scalars['String']>;
    symbol_gte?: InputMaybe<Scalars['String']>;
    symbol_lte?: InputMaybe<Scalars['String']>;
    symbol_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
    symbol_contains?: InputMaybe<Scalars['String']>;
    symbol_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_contains?: InputMaybe<Scalars['String']>;
    symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    symbol_starts_with?: InputMaybe<Scalars['String']>;
    symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with?: InputMaybe<Scalars['String']>;
    symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_ends_with?: InputMaybe<Scalars['String']>;
    symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with?: InputMaybe<Scalars['String']>;
    symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    decimals?: InputMaybe<Scalars['Int']>;
    decimals_not?: InputMaybe<Scalars['Int']>;
    decimals_gt?: InputMaybe<Scalars['Int']>;
    decimals_lt?: InputMaybe<Scalars['Int']>;
    decimals_gte?: InputMaybe<Scalars['Int']>;
    decimals_lte?: InputMaybe<Scalars['Int']>;
    decimals_in?: InputMaybe<Array<Scalars['Int']>>;
    decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lastPriceUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    lastPriceUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    lastPriceUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    lastPriceUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    lastPriceUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    lastPriceUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    lastPriceUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    lastPriceUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    lastPriceBlockNumber?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    lastPriceBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    lastPriceBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    type?: InputMaybe<ethereumPrimaryTokenType>;
    type_not?: InputMaybe<ethereumPrimaryTokenType>;
    type_in?: InputMaybe<Array<ethereumPrimaryTokenType>>;
    type_not_in?: InputMaybe<Array<ethereumPrimaryTokenType>>;
    _market?: InputMaybe<Scalars['String']>;
    _market_not?: InputMaybe<Scalars['String']>;
    _market_gt?: InputMaybe<Scalars['String']>;
    _market_lt?: InputMaybe<Scalars['String']>;
    _market_gte?: InputMaybe<Scalars['String']>;
    _market_lte?: InputMaybe<Scalars['String']>;
    _market_in?: InputMaybe<Array<Scalars['String']>>;
    _market_not_in?: InputMaybe<Array<Scalars['String']>>;
    _market_contains?: InputMaybe<Scalars['String']>;
    _market_contains_nocase?: InputMaybe<Scalars['String']>;
    _market_not_contains?: InputMaybe<Scalars['String']>;
    _market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _market_starts_with?: InputMaybe<Scalars['String']>;
    _market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _market_not_starts_with?: InputMaybe<Scalars['String']>;
    _market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _market_ends_with?: InputMaybe<Scalars['String']>;
    _market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _market_not_ends_with?: InputMaybe<Scalars['String']>;
    _market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    _iavsTokenType?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not?: InputMaybe<Scalars['String']>;
    _iavsTokenType_gt?: InputMaybe<Scalars['String']>;
    _iavsTokenType_lt?: InputMaybe<Scalars['String']>;
    _iavsTokenType_gte?: InputMaybe<Scalars['String']>;
    _iavsTokenType_lte?: InputMaybe<Scalars['String']>;
    _iavsTokenType_in?: InputMaybe<Array<Scalars['String']>>;
    _iavsTokenType_not_in?: InputMaybe<Array<Scalars['String']>>;
    _iavsTokenType_contains?: InputMaybe<Scalars['String']>;
    _iavsTokenType_contains_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_contains?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_contains_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_starts_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_starts_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_ends_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_ends_with_nocase?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_ends_with?: InputMaybe<Scalars['String']>;
    _iavsTokenType_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryToken_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryToken_filter>>>;
};
export type ethereumPrimaryToken_orderBy = 'id' | 'name' | 'symbol' | 'decimals' | 'lastPriceUSD' | 'lastPriceBlockNumber' | 'type' | '_market' | '_market__id' | '_market__name' | '_market__isActive' | '_market__canBorrowFrom' | '_market__canUseAsCollateral' | '_market__maximumLTV' | '_market__liquidationThreshold' | '_market__liquidationPenalty' | '_market__canIsolate' | '_market__createdTimestamp' | '_market__createdBlockNumber' | '_market__relation' | '_market__stakedOutputTokenAmount' | '_market__inputTokenBalance' | '_market__inputTokenPriceUSD' | '_market__outputTokenSupply' | '_market__outputTokenPriceUSD' | '_market__exchangeRate' | '_market__reserves' | '_market__reserveFactor' | '_market__variableBorrowedTokenBalance' | '_market__stableBorrowedTokenBalance' | '_market__indexLastUpdatedTimestamp' | '_market__supplyIndex' | '_market__supplyCap' | '_market__borrowIndex' | '_market__borrowCap' | '_market__totalValueLockedUSD' | '_market__cumulativeSupplySideRevenueUSD' | '_market__cumulativeProtocolSideRevenueUSD' | '_market__cumulativeTotalRevenueUSD' | '_market__totalDepositBalanceUSD' | '_market__cumulativeDepositUSD' | '_market__totalBorrowBalanceUSD' | '_market__cumulativeBorrowUSD' | '_market__cumulativeLiquidateUSD' | '_market__cumulativeTransferUSD' | '_market__cumulativeFlashloanUSD' | '_market__transactionCount' | '_market__depositCount' | '_market__withdrawCount' | '_market__borrowCount' | '_market__repayCount' | '_market__liquidationCount' | '_market__transferCount' | '_market__flashloanCount' | '_market__cumulativeUniqueUsers' | '_market__cumulativeUniqueDepositors' | '_market__cumulativeUniqueBorrowers' | '_market__cumulativeUniqueLiquidators' | '_market__cumulativeUniqueLiquidatees' | '_market__cumulativeUniqueTransferrers' | '_market__cumulativeUniqueFlashloaners' | '_market__positionCount' | '_market__openPositionCount' | '_market__closedPositionCount' | '_market__lendingPositionCount' | '_market__borrowingPositionCount' | '_market___baseTrackingBorrowSpeed' | '_market___baseTrackingSupplySpeed' | '_market___lastRewardsUpdated' | '_market___liquidationProtocolFee' | '_market___siloedBorrowing' | '_iavsTokenType';
export type ethereumPrimaryTranche = 
/**  Senior denotes debt with a higher priority. The first debt to be paid back to lenders.  */
'SENIOR'
/**  Junior tranche denotes lower priority debt. This is secondary priority to be paid back to lenders.  */
 | 'JUNIOR';
export type ethereumPrimaryTransfer = ethereumPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  The account that sent the tokens  */
    sender: ethereumPrimaryAccount;
    /**  The Account that received the tokens  */
    receiver: ethereumPrimaryAccount;
    /**  The user positions changed by this event  */
    positions: Array<ethereumPrimaryPosition>;
    /**  The market associated with the token transfer  */
    market: ethereumPrimaryMarket;
    /**  The asset that was actually transferred. This could also include a debt token.  */
    asset: ethereumPrimaryToken;
    /**  Amount of token transferred in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token transferred in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryTransferpositionsArgs = {
    skip?: InputMaybe<Scalars['Int']>;
    first?: InputMaybe<Scalars['Int']>;
    orderBy?: InputMaybe<ethereumPrimaryPosition_orderBy>;
    orderDirection?: InputMaybe<ethereumPrimaryOrderDirection>;
    where?: InputMaybe<ethereumPrimaryPosition_filter>;
};
export type ethereumPrimaryTransfer_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    sender?: InputMaybe<Scalars['String']>;
    sender_not?: InputMaybe<Scalars['String']>;
    sender_gt?: InputMaybe<Scalars['String']>;
    sender_lt?: InputMaybe<Scalars['String']>;
    sender_gte?: InputMaybe<Scalars['String']>;
    sender_lte?: InputMaybe<Scalars['String']>;
    sender_in?: InputMaybe<Array<Scalars['String']>>;
    sender_not_in?: InputMaybe<Array<Scalars['String']>>;
    sender_contains?: InputMaybe<Scalars['String']>;
    sender_contains_nocase?: InputMaybe<Scalars['String']>;
    sender_not_contains?: InputMaybe<Scalars['String']>;
    sender_not_contains_nocase?: InputMaybe<Scalars['String']>;
    sender_starts_with?: InputMaybe<Scalars['String']>;
    sender_starts_with_nocase?: InputMaybe<Scalars['String']>;
    sender_not_starts_with?: InputMaybe<Scalars['String']>;
    sender_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    sender_ends_with?: InputMaybe<Scalars['String']>;
    sender_ends_with_nocase?: InputMaybe<Scalars['String']>;
    sender_not_ends_with?: InputMaybe<Scalars['String']>;
    sender_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    sender_?: InputMaybe<ethereumPrimaryAccount_filter>;
    receiver?: InputMaybe<Scalars['String']>;
    receiver_not?: InputMaybe<Scalars['String']>;
    receiver_gt?: InputMaybe<Scalars['String']>;
    receiver_lt?: InputMaybe<Scalars['String']>;
    receiver_gte?: InputMaybe<Scalars['String']>;
    receiver_lte?: InputMaybe<Scalars['String']>;
    receiver_in?: InputMaybe<Array<Scalars['String']>>;
    receiver_not_in?: InputMaybe<Array<Scalars['String']>>;
    receiver_contains?: InputMaybe<Scalars['String']>;
    receiver_contains_nocase?: InputMaybe<Scalars['String']>;
    receiver_not_contains?: InputMaybe<Scalars['String']>;
    receiver_not_contains_nocase?: InputMaybe<Scalars['String']>;
    receiver_starts_with?: InputMaybe<Scalars['String']>;
    receiver_starts_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_not_starts_with?: InputMaybe<Scalars['String']>;
    receiver_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_ends_with?: InputMaybe<Scalars['String']>;
    receiver_ends_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_not_ends_with?: InputMaybe<Scalars['String']>;
    receiver_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    receiver_?: InputMaybe<ethereumPrimaryAccount_filter>;
    positions?: InputMaybe<Array<Scalars['String']>>;
    positions_not?: InputMaybe<Array<Scalars['String']>>;
    positions_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains?: InputMaybe<Array<Scalars['String']>>;
    positions_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
    positions_?: InputMaybe<ethereumPrimaryPosition_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryTransfer_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryTransfer_filter>>>;
};
export type ethereumPrimaryTransfer_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'sender' | 'sender__id' | 'sender__positionCount' | 'sender__openPositionCount' | 'sender__closedPositionCount' | 'sender__depositCount' | 'sender__withdrawCount' | 'sender__borrowCount' | 'sender__repayCount' | 'sender__liquidateCount' | 'sender__liquidationCount' | 'sender__transferredCount' | 'sender__receivedCount' | 'sender__flashloanCount' | 'sender__rewardsClaimedUSD' | 'sender___eMode' | 'receiver' | 'receiver__id' | 'receiver__positionCount' | 'receiver__openPositionCount' | 'receiver__closedPositionCount' | 'receiver__depositCount' | 'receiver__withdrawCount' | 'receiver__borrowCount' | 'receiver__repayCount' | 'receiver__liquidateCount' | 'receiver__liquidationCount' | 'receiver__transferredCount' | 'receiver__receivedCount' | 'receiver__flashloanCount' | 'receiver__rewardsClaimedUSD' | 'receiver___eMode' | 'positions' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type ethereumPrimaryUsageMetricsDailySnapshot = {
    /**  ID is # of days since Unix epoch time  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Number of days since Unix epoch time  */
    days: Scalars['Int'];
    /**  Protocol this snapshot is associated with  */
    protocol: ethereumPrimaryLendingProtocol;
    /**  Number of unique daily active users. e.g. accounts that spent gas to interact with this protocol  */
    dailyActiveUsers: Scalars['Int'];
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Number of unique daily depositors  */
    dailyActiveDepositors: Scalars['Int'];
    /**  Number of cumulative depositors  */
    cumulativeUniqueDepositors: Scalars['Int'];
    /**  Number of unique daily borrowers  */
    dailyActiveBorrowers: Scalars['Int'];
    /**  Number of cumulative borrowers  */
    cumulativeUniqueBorrowers: Scalars['Int'];
    /**  Number of unique daily liquidators (accounts that performed liquidation)  */
    dailyActiveLiquidators: Scalars['Int'];
    /**  Number of cumulative liquidators (accounts that performed liquidation)  */
    cumulativeUniqueLiquidators: Scalars['Int'];
    /**  Number of unique daily liquidatees (accounts that got liquidated)  */
    dailyActiveLiquidatees: Scalars['Int'];
    /**  Number of cumulative liquidatees (accounts that got liquidated)  */
    cumulativeUniqueLiquidatees: Scalars['Int'];
    /**  Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.  */
    dailyTransactionCount: Scalars['Int'];
    /**  Total number of deposits in a day  */
    dailyDepositCount: Scalars['Int'];
    /**  Total number of withdrawals in a day  */
    dailyWithdrawCount: Scalars['Int'];
    /**  Total number of borrows/mints in a day  */
    dailyBorrowCount: Scalars['Int'];
    /**  Total number of repayments/burns in a day  */
    dailyRepayCount: Scalars['Int'];
    /**  Total number of liquidations in a day  */
    dailyLiquidateCount: Scalars['Int'];
    /**  Total number of transfers in a day  */
    dailyTransferCount: Scalars['Int'];
    /**  Total number of flashloans in a day  */
    dailyFlashloanCount: Scalars['Int'];
    /**  Total number of positions (open and closed)  */
    cumulativePositionCount: Scalars['Int'];
    /**  Total number of open positions  */
    openPositionCount: Scalars['Int'];
    /**  Total number of positions touched in a day. This includes opening, closing, and modifying positions.  */
    dailyActivePositions: Scalars['Int'];
    /**  Total number of pools  */
    totalPoolCount: Scalars['Int'];
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
};
export type ethereumPrimaryUsageMetricsDailySnapshot_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    days?: InputMaybe<Scalars['Int']>;
    days_not?: InputMaybe<Scalars['Int']>;
    days_gt?: InputMaybe<Scalars['Int']>;
    days_lt?: InputMaybe<Scalars['Int']>;
    days_gte?: InputMaybe<Scalars['Int']>;
    days_lte?: InputMaybe<Scalars['Int']>;
    days_in?: InputMaybe<Array<Scalars['Int']>>;
    days_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    dailyActiveUsers?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_not?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueDepositors_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueDepositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_not?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueBorrowers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueBorrowers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidators_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidators_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_not?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    dailyActiveLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActiveLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueLiquidatees_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueLiquidatees_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransactionCount?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_not?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_gt?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_lt?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_gte?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_lte?: InputMaybe<Scalars['Int']>;
    dailyTransactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_not?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lt?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_gte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_lte?: InputMaybe<Scalars['Int']>;
    dailyDepositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_not?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lt?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_gte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_lte?: InputMaybe<Scalars['Int']>;
    dailyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_not?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lt?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_gte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_lte?: InputMaybe<Scalars['Int']>;
    dailyBorrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyBorrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_not?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lt?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_gte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_lte?: InputMaybe<Scalars['Int']>;
    dailyRepayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyRepayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_not?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lt?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_gte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_lte?: InputMaybe<Scalars['Int']>;
    dailyLiquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyLiquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_not?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lt?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_gte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_lte?: InputMaybe<Scalars['Int']>;
    dailyTransferCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyTransferCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_not?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lt?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_gte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_lte?: InputMaybe<Scalars['Int']>;
    dailyFlashloanCount_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyFlashloanCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_not?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lt?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_gte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_lte?: InputMaybe<Scalars['Int']>;
    cumulativePositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativePositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount?: InputMaybe<Scalars['Int']>;
    openPositionCount_not?: InputMaybe<Scalars['Int']>;
    openPositionCount_gt?: InputMaybe<Scalars['Int']>;
    openPositionCount_lt?: InputMaybe<Scalars['Int']>;
    openPositionCount_gte?: InputMaybe<Scalars['Int']>;
    openPositionCount_lte?: InputMaybe<Scalars['Int']>;
    openPositionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    openPositionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActivePositions?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_not?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_gt?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_lt?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_gte?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_lte?: InputMaybe<Scalars['Int']>;
    dailyActivePositions_in?: InputMaybe<Array<Scalars['Int']>>;
    dailyActivePositions_not_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount?: InputMaybe<Scalars['Int']>;
    totalPoolCount_not?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lt?: InputMaybe<Scalars['Int']>;
    totalPoolCount_gte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_lte?: InputMaybe<Scalars['Int']>;
    totalPoolCount_in?: InputMaybe<Array<Scalars['Int']>>;
    totalPoolCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryUsageMetricsDailySnapshot_filter>>>;
};
export type ethereumPrimaryUsageMetricsDailySnapshot_orderBy = 'id' | 'days' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'dailyActiveUsers' | 'cumulativeUniqueUsers' | 'dailyActiveDepositors' | 'cumulativeUniqueDepositors' | 'dailyActiveBorrowers' | 'cumulativeUniqueBorrowers' | 'dailyActiveLiquidators' | 'cumulativeUniqueLiquidators' | 'dailyActiveLiquidatees' | 'cumulativeUniqueLiquidatees' | 'dailyTransactionCount' | 'dailyDepositCount' | 'dailyWithdrawCount' | 'dailyBorrowCount' | 'dailyRepayCount' | 'dailyLiquidateCount' | 'dailyTransferCount' | 'dailyFlashloanCount' | 'cumulativePositionCount' | 'openPositionCount' | 'dailyActivePositions' | 'totalPoolCount' | 'blockNumber' | 'timestamp';
export type ethereumPrimaryUsageMetricsHourlySnapshot = {
    /**  { # of hours since Unix epoch time }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Number of hours since Unix epoch time  */
    hours: Scalars['Int'];
    /**  Protocol this snapshot is associated with  */
    protocol: ethereumPrimaryLendingProtocol;
    /**  Number of unique hourly active users  */
    hourlyActiveUsers: Scalars['Int'];
    /**  Number of cumulative unique users. e.g. accounts that spent gas to interact with this protocol  */
    cumulativeUniqueUsers: Scalars['Int'];
    /**  Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.  */
    hourlyTransactionCount: Scalars['Int'];
    /**  Total number of deposits in an hour  */
    hourlyDepositCount: Scalars['Int'];
    /**  Total number of withdrawals in an hour  */
    hourlyWithdrawCount: Scalars['Int'];
    /**  Total number of borrows/mints in an hour  */
    hourlyBorrowCount: Scalars['Int'];
    /**  Total number of repayments/burns in an hour  */
    hourlyRepayCount: Scalars['Int'];
    /**  Total number of liquidations in an hour  */
    hourlyLiquidateCount: Scalars['Int'];
    /**  Block number of this snapshot  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this snapshot  */
    timestamp: Scalars['BigInt'];
};
export type ethereumPrimaryUsageMetricsHourlySnapshot_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hours?: InputMaybe<Scalars['Int']>;
    hours_not?: InputMaybe<Scalars['Int']>;
    hours_gt?: InputMaybe<Scalars['Int']>;
    hours_lt?: InputMaybe<Scalars['Int']>;
    hours_gte?: InputMaybe<Scalars['Int']>;
    hours_lte?: InputMaybe<Scalars['Int']>;
    hours_in?: InputMaybe<Array<Scalars['Int']>>;
    hours_not_in?: InputMaybe<Array<Scalars['Int']>>;
    protocol?: InputMaybe<Scalars['String']>;
    protocol_not?: InputMaybe<Scalars['String']>;
    protocol_gt?: InputMaybe<Scalars['String']>;
    protocol_lt?: InputMaybe<Scalars['String']>;
    protocol_gte?: InputMaybe<Scalars['String']>;
    protocol_lte?: InputMaybe<Scalars['String']>;
    protocol_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_not_in?: InputMaybe<Array<Scalars['String']>>;
    protocol_contains?: InputMaybe<Scalars['String']>;
    protocol_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_contains?: InputMaybe<Scalars['String']>;
    protocol_not_contains_nocase?: InputMaybe<Scalars['String']>;
    protocol_starts_with?: InputMaybe<Scalars['String']>;
    protocol_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with?: InputMaybe<Scalars['String']>;
    protocol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_ends_with?: InputMaybe<Scalars['String']>;
    protocol_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with?: InputMaybe<Scalars['String']>;
    protocol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    protocol_?: InputMaybe<ethereumPrimaryLendingProtocol_filter>;
    hourlyActiveUsers?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_not?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_gt?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_lt?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_gte?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_lte?: InputMaybe<Scalars['Int']>;
    hourlyActiveUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyActiveUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_not?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lt?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_gte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_lte?: InputMaybe<Scalars['Int']>;
    cumulativeUniqueUsers_in?: InputMaybe<Array<Scalars['Int']>>;
    cumulativeUniqueUsers_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyTransactionCount?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_not?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyTransactionCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyTransactionCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyDepositCount?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_not?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyDepositCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyDepositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyWithdrawCount?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_not?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyWithdrawCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyWithdrawCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyBorrowCount?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_not?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyBorrowCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyBorrowCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyRepayCount?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_not?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyRepayCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyRepayCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyLiquidateCount?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_not?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_gt?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_lt?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_gte?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_lte?: InputMaybe<Scalars['Int']>;
    hourlyLiquidateCount_in?: InputMaybe<Array<Scalars['Int']>>;
    hourlyLiquidateCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryUsageMetricsHourlySnapshot_filter>>>;
};
export type ethereumPrimaryUsageMetricsHourlySnapshot_orderBy = 'id' | 'hours' | 'protocol' | 'protocol__id' | 'protocol__protocol' | 'protocol__name' | 'protocol__slug' | 'protocol__schemaVersion' | 'protocol__subgraphVersion' | 'protocol__methodologyVersion' | 'protocol__network' | 'protocol__type' | 'protocol__lendingType' | 'protocol__lenderPermissionType' | 'protocol__borrowerPermissionType' | 'protocol__poolCreatorPermissionType' | 'protocol__riskType' | 'protocol__collateralizationType' | 'protocol__cumulativeUniqueUsers' | 'protocol__cumulativeUniqueDepositors' | 'protocol__cumulativeUniqueBorrowers' | 'protocol__cumulativeUniqueLiquidators' | 'protocol__cumulativeUniqueLiquidatees' | 'protocol__totalValueLockedUSD' | 'protocol__protocolControlledValueUSD' | 'protocol__cumulativeSupplySideRevenueUSD' | 'protocol__cumulativeProtocolSideRevenueUSD' | 'protocol__cumulativeTotalRevenueUSD' | 'protocol__totalDepositBalanceUSD' | 'protocol__cumulativeDepositUSD' | 'protocol__totalBorrowBalanceUSD' | 'protocol__cumulativeBorrowUSD' | 'protocol__cumulativeLiquidateUSD' | 'protocol__totalPoolCount' | 'protocol__openPositionCount' | 'protocol__cumulativePositionCount' | 'protocol__transactionCount' | 'protocol__depositCount' | 'protocol__withdrawCount' | 'protocol__borrowCount' | 'protocol__repayCount' | 'protocol__liquidationCount' | 'protocol__transferCount' | 'protocol__flashloanCount' | 'hourlyActiveUsers' | 'cumulativeUniqueUsers' | 'hourlyTransactionCount' | 'hourlyDepositCount' | 'hourlyWithdrawCount' | 'hourlyBorrowCount' | 'hourlyRepayCount' | 'hourlyLiquidateCount' | 'blockNumber' | 'timestamp';
export type ethereumPrimaryWithdraw = ethereumPrimaryEvent & {
    /**  { Transaction hash }{ Log index }  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  Transaction hash of the transaction that emitted this event  */
    hash: Scalars['ethereumPrimaryBytes'];
    /**  Nonce of the transaction that emitted this event  */
    nonce: Scalars['BigInt'];
    /**  Event log index. For transactions that don't emit event, create arbitrary index starting from 0  */
    logIndex: Scalars['Int'];
    /**  Price of gas in this transaction  */
    gasPrice?: Maybe<Scalars['BigInt']>;
    /**  Gas used in this transaction. (Optional because not every chain will support this)  */
    gasUsed?: Maybe<Scalars['BigInt']>;
    /**  Gas limit of this transaction. e.g. the amount of gas the sender will pay  */
    gasLimit?: Maybe<Scalars['BigInt']>;
    /**  Block number of this event  */
    blockNumber: Scalars['BigInt'];
    /**  Timestamp of this event  */
    timestamp: Scalars['BigInt'];
    /**  Account that controls the position (e.g. the aToken owner initiating the withdraw in Aave)  */
    account: ethereumPrimaryAccount;
    /**  Account that receives the underlying withdrawn amount  */
    accountActor?: Maybe<ethereumPrimaryAccount>;
    /**  The market tokens are withdrew from  */
    market: ethereumPrimaryMarket;
    /**  The user position changed by this event  */
    position: ethereumPrimaryPosition;
    /**  Token withdrawn  */
    asset: ethereumPrimaryToken;
    /**  Amount of token withdrawn in native units  */
    amount: Scalars['BigInt'];
    /**  Amount of token withdrawn in USD  */
    amountUSD: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimaryWithdraw_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    hash_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    hash_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    nonce?: InputMaybe<Scalars['BigInt']>;
    nonce_not?: InputMaybe<Scalars['BigInt']>;
    nonce_gt?: InputMaybe<Scalars['BigInt']>;
    nonce_lt?: InputMaybe<Scalars['BigInt']>;
    nonce_gte?: InputMaybe<Scalars['BigInt']>;
    nonce_lte?: InputMaybe<Scalars['BigInt']>;
    nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
    nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    logIndex?: InputMaybe<Scalars['Int']>;
    logIndex_not?: InputMaybe<Scalars['Int']>;
    logIndex_gt?: InputMaybe<Scalars['Int']>;
    logIndex_lt?: InputMaybe<Scalars['Int']>;
    logIndex_gte?: InputMaybe<Scalars['Int']>;
    logIndex_lte?: InputMaybe<Scalars['Int']>;
    logIndex_in?: InputMaybe<Array<Scalars['Int']>>;
    logIndex_not_in?: InputMaybe<Array<Scalars['Int']>>;
    gasPrice?: InputMaybe<Scalars['BigInt']>;
    gasPrice_not?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
    gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
    gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed?: InputMaybe<Scalars['BigInt']>;
    gasUsed_not?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lt?: InputMaybe<Scalars['BigInt']>;
    gasUsed_gte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_lte?: InputMaybe<Scalars['BigInt']>;
    gasUsed_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasUsed_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit?: InputMaybe<Scalars['BigInt']>;
    gasLimit_not?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
    gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
    gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
    gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber?: InputMaybe<Scalars['BigInt']>;
    blockNumber_not?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
    blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
    blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
    blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp?: InputMaybe<Scalars['BigInt']>;
    timestamp_not?: InputMaybe<Scalars['BigInt']>;
    timestamp_gt?: InputMaybe<Scalars['BigInt']>;
    timestamp_lt?: InputMaybe<Scalars['BigInt']>;
    timestamp_gte?: InputMaybe<Scalars['BigInt']>;
    timestamp_lte?: InputMaybe<Scalars['BigInt']>;
    timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    account?: InputMaybe<Scalars['String']>;
    account_not?: InputMaybe<Scalars['String']>;
    account_gt?: InputMaybe<Scalars['String']>;
    account_lt?: InputMaybe<Scalars['String']>;
    account_gte?: InputMaybe<Scalars['String']>;
    account_lte?: InputMaybe<Scalars['String']>;
    account_in?: InputMaybe<Array<Scalars['String']>>;
    account_not_in?: InputMaybe<Array<Scalars['String']>>;
    account_contains?: InputMaybe<Scalars['String']>;
    account_contains_nocase?: InputMaybe<Scalars['String']>;
    account_not_contains?: InputMaybe<Scalars['String']>;
    account_not_contains_nocase?: InputMaybe<Scalars['String']>;
    account_starts_with?: InputMaybe<Scalars['String']>;
    account_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_starts_with?: InputMaybe<Scalars['String']>;
    account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    account_ends_with?: InputMaybe<Scalars['String']>;
    account_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_not_ends_with?: InputMaybe<Scalars['String']>;
    account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    account_?: InputMaybe<ethereumPrimaryAccount_filter>;
    accountActor?: InputMaybe<Scalars['String']>;
    accountActor_not?: InputMaybe<Scalars['String']>;
    accountActor_gt?: InputMaybe<Scalars['String']>;
    accountActor_lt?: InputMaybe<Scalars['String']>;
    accountActor_gte?: InputMaybe<Scalars['String']>;
    accountActor_lte?: InputMaybe<Scalars['String']>;
    accountActor_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_not_in?: InputMaybe<Array<Scalars['String']>>;
    accountActor_contains?: InputMaybe<Scalars['String']>;
    accountActor_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_contains?: InputMaybe<Scalars['String']>;
    accountActor_not_contains_nocase?: InputMaybe<Scalars['String']>;
    accountActor_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with?: InputMaybe<Scalars['String']>;
    accountActor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with?: InputMaybe<Scalars['String']>;
    accountActor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    accountActor_?: InputMaybe<ethereumPrimaryAccount_filter>;
    market?: InputMaybe<Scalars['String']>;
    market_not?: InputMaybe<Scalars['String']>;
    market_gt?: InputMaybe<Scalars['String']>;
    market_lt?: InputMaybe<Scalars['String']>;
    market_gte?: InputMaybe<Scalars['String']>;
    market_lte?: InputMaybe<Scalars['String']>;
    market_in?: InputMaybe<Array<Scalars['String']>>;
    market_not_in?: InputMaybe<Array<Scalars['String']>>;
    market_contains?: InputMaybe<Scalars['String']>;
    market_contains_nocase?: InputMaybe<Scalars['String']>;
    market_not_contains?: InputMaybe<Scalars['String']>;
    market_not_contains_nocase?: InputMaybe<Scalars['String']>;
    market_starts_with?: InputMaybe<Scalars['String']>;
    market_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_starts_with?: InputMaybe<Scalars['String']>;
    market_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    market_ends_with?: InputMaybe<Scalars['String']>;
    market_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_not_ends_with?: InputMaybe<Scalars['String']>;
    market_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    market_?: InputMaybe<ethereumPrimaryMarket_filter>;
    position?: InputMaybe<Scalars['String']>;
    position_not?: InputMaybe<Scalars['String']>;
    position_gt?: InputMaybe<Scalars['String']>;
    position_lt?: InputMaybe<Scalars['String']>;
    position_gte?: InputMaybe<Scalars['String']>;
    position_lte?: InputMaybe<Scalars['String']>;
    position_in?: InputMaybe<Array<Scalars['String']>>;
    position_not_in?: InputMaybe<Array<Scalars['String']>>;
    position_contains?: InputMaybe<Scalars['String']>;
    position_contains_nocase?: InputMaybe<Scalars['String']>;
    position_not_contains?: InputMaybe<Scalars['String']>;
    position_not_contains_nocase?: InputMaybe<Scalars['String']>;
    position_starts_with?: InputMaybe<Scalars['String']>;
    position_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_starts_with?: InputMaybe<Scalars['String']>;
    position_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    position_ends_with?: InputMaybe<Scalars['String']>;
    position_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_not_ends_with?: InputMaybe<Scalars['String']>;
    position_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    position_?: InputMaybe<ethereumPrimaryPosition_filter>;
    asset?: InputMaybe<Scalars['String']>;
    asset_not?: InputMaybe<Scalars['String']>;
    asset_gt?: InputMaybe<Scalars['String']>;
    asset_lt?: InputMaybe<Scalars['String']>;
    asset_gte?: InputMaybe<Scalars['String']>;
    asset_lte?: InputMaybe<Scalars['String']>;
    asset_in?: InputMaybe<Array<Scalars['String']>>;
    asset_not_in?: InputMaybe<Array<Scalars['String']>>;
    asset_contains?: InputMaybe<Scalars['String']>;
    asset_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_not_contains?: InputMaybe<Scalars['String']>;
    asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
    asset_starts_with?: InputMaybe<Scalars['String']>;
    asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_starts_with?: InputMaybe<Scalars['String']>;
    asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
    asset_ends_with?: InputMaybe<Scalars['String']>;
    asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_not_ends_with?: InputMaybe<Scalars['String']>;
    asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
    asset_?: InputMaybe<ethereumPrimaryToken_filter>;
    amount?: InputMaybe<Scalars['BigInt']>;
    amount_not?: InputMaybe<Scalars['BigInt']>;
    amount_gt?: InputMaybe<Scalars['BigInt']>;
    amount_lt?: InputMaybe<Scalars['BigInt']>;
    amount_gte?: InputMaybe<Scalars['BigInt']>;
    amount_lte?: InputMaybe<Scalars['BigInt']>;
    amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    amountUSD?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    amountUSD_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    amountUSD_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimaryWithdraw_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimaryWithdraw_filter>>>;
};
export type ethereumPrimaryWithdraw_orderBy = 'id' | 'hash' | 'nonce' | 'logIndex' | 'gasPrice' | 'gasUsed' | 'gasLimit' | 'blockNumber' | 'timestamp' | 'account' | 'account__id' | 'account__positionCount' | 'account__openPositionCount' | 'account__closedPositionCount' | 'account__depositCount' | 'account__withdrawCount' | 'account__borrowCount' | 'account__repayCount' | 'account__liquidateCount' | 'account__liquidationCount' | 'account__transferredCount' | 'account__receivedCount' | 'account__flashloanCount' | 'account__rewardsClaimedUSD' | 'account___eMode' | 'accountActor' | 'accountActor__id' | 'accountActor__positionCount' | 'accountActor__openPositionCount' | 'accountActor__closedPositionCount' | 'accountActor__depositCount' | 'accountActor__withdrawCount' | 'accountActor__borrowCount' | 'accountActor__repayCount' | 'accountActor__liquidateCount' | 'accountActor__liquidationCount' | 'accountActor__transferredCount' | 'accountActor__receivedCount' | 'accountActor__flashloanCount' | 'accountActor__rewardsClaimedUSD' | 'accountActor___eMode' | 'market' | 'market__id' | 'market__name' | 'market__isActive' | 'market__canBorrowFrom' | 'market__canUseAsCollateral' | 'market__maximumLTV' | 'market__liquidationThreshold' | 'market__liquidationPenalty' | 'market__canIsolate' | 'market__createdTimestamp' | 'market__createdBlockNumber' | 'market__relation' | 'market__stakedOutputTokenAmount' | 'market__inputTokenBalance' | 'market__inputTokenPriceUSD' | 'market__outputTokenSupply' | 'market__outputTokenPriceUSD' | 'market__exchangeRate' | 'market__reserves' | 'market__reserveFactor' | 'market__variableBorrowedTokenBalance' | 'market__stableBorrowedTokenBalance' | 'market__indexLastUpdatedTimestamp' | 'market__supplyIndex' | 'market__supplyCap' | 'market__borrowIndex' | 'market__borrowCap' | 'market__totalValueLockedUSD' | 'market__cumulativeSupplySideRevenueUSD' | 'market__cumulativeProtocolSideRevenueUSD' | 'market__cumulativeTotalRevenueUSD' | 'market__totalDepositBalanceUSD' | 'market__cumulativeDepositUSD' | 'market__totalBorrowBalanceUSD' | 'market__cumulativeBorrowUSD' | 'market__cumulativeLiquidateUSD' | 'market__cumulativeTransferUSD' | 'market__cumulativeFlashloanUSD' | 'market__transactionCount' | 'market__depositCount' | 'market__withdrawCount' | 'market__borrowCount' | 'market__repayCount' | 'market__liquidationCount' | 'market__transferCount' | 'market__flashloanCount' | 'market__cumulativeUniqueUsers' | 'market__cumulativeUniqueDepositors' | 'market__cumulativeUniqueBorrowers' | 'market__cumulativeUniqueLiquidators' | 'market__cumulativeUniqueLiquidatees' | 'market__cumulativeUniqueTransferrers' | 'market__cumulativeUniqueFlashloaners' | 'market__positionCount' | 'market__openPositionCount' | 'market__closedPositionCount' | 'market__lendingPositionCount' | 'market__borrowingPositionCount' | 'market___baseTrackingBorrowSpeed' | 'market___baseTrackingSupplySpeed' | 'market___lastRewardsUpdated' | 'market___liquidationProtocolFee' | 'market___siloedBorrowing' | 'position' | 'position__id' | 'position__hashOpened' | 'position__hashClosed' | 'position__blockNumberOpened' | 'position__timestampOpened' | 'position__blockNumberClosed' | 'position__timestampClosed' | 'position__side' | 'position__type' | 'position__isCollateral' | 'position__isIsolated' | 'position__balance' | 'position__principal' | 'position__depositCount' | 'position__withdrawCount' | 'position__borrowCount' | 'position__repayCount' | 'position__liquidationCount' | 'position__transferredCount' | 'position__receivedCount' | 'position___eMode' | 'asset' | 'asset__id' | 'asset__name' | 'asset__symbol' | 'asset__decimals' | 'asset__lastPriceUSD' | 'asset__lastPriceBlockNumber' | 'asset__type' | 'asset___iavsTokenType' | 'amount' | 'amountUSD';
export type ethereumPrimary_ActiveAccount = {
    /**  { daily/hourly }-{ Address of the account }-{ Optional: Transaction Type }-{ Optional: Market Address }-{ Optional: Days/hours since Unix epoch }  */
    id: Scalars['ID'];
};
export type ethereumPrimary_ActiveAccount_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimary_ActiveAccount_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimary_ActiveAccount_filter>>>;
};
export type ethereumPrimary_ActiveAccount_orderBy = 'id';
export type ethereumPrimary_Block_ = {
    /** The hash of the block */
    hash?: Maybe<Scalars['ethereumPrimaryBytes']>;
    /** The block number */
    number: Scalars['Int'];
    /** Integer representation of the timestamp stored in blocks for the chain */
    timestamp?: Maybe<Scalars['Int']>;
};
export type ethereumPrimary_DefaultOracle = {
    /**  protocol id  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  address of default oracle  */
    oracle: Scalars['ethereumPrimaryBytes'];
};
export type ethereumPrimary_DefaultOracle_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    oracle_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    oracle_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    oracle_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimary_DefaultOracle_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimary_DefaultOracle_filter>>>;
};
export type ethereumPrimary_DefaultOracle_orderBy = 'id' | 'oracle';
export type ethereumPrimary_FlashLoanPremium = {
    /**  protocol id  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  total premium rate  */
    premiumRateTotal: Scalars['ethereumPrimaryBigDecimal'];
    /**  premium rate to protocol  */
    premiumRateToProtocol: Scalars['ethereumPrimaryBigDecimal'];
};
export type ethereumPrimary_FlashLoanPremium_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    premiumRateTotal?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateTotal_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateTotal_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateTotal_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateTotal_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateTotal_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateTotal_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    premiumRateTotal_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    premiumRateToProtocol?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateToProtocol_not?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateToProtocol_gt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateToProtocol_lt?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateToProtocol_gte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateToProtocol_lte?: InputMaybe<Scalars['ethereumPrimaryBigDecimal']>;
    premiumRateToProtocol_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    premiumRateToProtocol_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBigDecimal']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimary_FlashLoanPremium_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimary_FlashLoanPremium_filter>>>;
};
export type ethereumPrimary_FlashLoanPremium_orderBy = 'id' | 'premiumRateTotal' | 'premiumRateToProtocol';
export type ethereumPrimary_MarketList = {
    /**  Same ID as LendingProtocol  */
    id: Scalars['ethereumPrimaryBytes'];
    /**  IDs of all markets in the LendingProtocol  */
    markets: Array<Scalars['ethereumPrimaryBytes']>;
};
export type ethereumPrimary_MarketList_filter = {
    id?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lt?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_gte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_lte?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_not_in?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    id_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    id_not_contains?: InputMaybe<Scalars['ethereumPrimaryBytes']>;
    markets?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    markets_not?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    markets_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    markets_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    markets_not_contains?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    markets_not_contains_nocase?: InputMaybe<Array<Scalars['ethereumPrimaryBytes']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimary_MarketList_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimary_MarketList_filter>>>;
};
export type ethereumPrimary_MarketList_orderBy = 'id' | 'markets';
/** The type for the top-level _meta field */
export type ethereumPrimary_Meta_ = {
    /**
     * Information about a specific subgraph block. The hash of the block
     * will be null if the _meta field has a block constraint that asks for
     * a block number. It will be filled if the _meta field has no block constraint
     * and therefore asks for the latest  block
     *
     */
    block: ethereumPrimary_Block_;
    /** The deployment ID */
    deployment: Scalars['String'];
    /** If `true`, the subgraph encountered indexing errors at some past block */
    hasIndexingErrors: Scalars['Boolean'];
};
export type ethereumPrimary_PositionCounter = {
    /**  { Account address }-{ Market address }-{ Position Side }  */
    id: Scalars['ID'];
    /**  Next count  */
    nextCount: Scalars['Int'];
    /**  The last timestamp this position was updated  */
    lastTimestamp: Scalars['BigInt'];
};
export type ethereumPrimary_PositionCounter_filter = {
    id?: InputMaybe<Scalars['ID']>;
    id_not?: InputMaybe<Scalars['ID']>;
    id_gt?: InputMaybe<Scalars['ID']>;
    id_lt?: InputMaybe<Scalars['ID']>;
    id_gte?: InputMaybe<Scalars['ID']>;
    id_lte?: InputMaybe<Scalars['ID']>;
    id_in?: InputMaybe<Array<Scalars['ID']>>;
    id_not_in?: InputMaybe<Array<Scalars['ID']>>;
    nextCount?: InputMaybe<Scalars['Int']>;
    nextCount_not?: InputMaybe<Scalars['Int']>;
    nextCount_gt?: InputMaybe<Scalars['Int']>;
    nextCount_lt?: InputMaybe<Scalars['Int']>;
    nextCount_gte?: InputMaybe<Scalars['Int']>;
    nextCount_lte?: InputMaybe<Scalars['Int']>;
    nextCount_in?: InputMaybe<Array<Scalars['Int']>>;
    nextCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
    lastTimestamp?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_not?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
    lastTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
    lastTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
    /** Filter for the block changed event. */
    _change_block?: InputMaybe<ethereumPrimaryBlockChangedFilter>;
    and?: InputMaybe<Array<InputMaybe<ethereumPrimary_PositionCounter_filter>>>;
    or?: InputMaybe<Array<InputMaybe<ethereumPrimary_PositionCounter_filter>>>;
};
export type ethereumPrimary_PositionCounter_orderBy = 'id' | 'nextCount' | 'lastTimestamp';
export type ethereumPrimary_SubgraphErrorPolicy_ = 
/** Data will be returned even if the subgraph has indexing errors */
'allow'
/** If the subgraph has indexing errors, data will be omitted. The default. */
 | 'deny';
export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;
export type ResolverTypeWrapper<T> = Promise<T> | T;
export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;
export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export type NextResolverFn<T> = () => Promise<T>;
export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
    Query: ResolverTypeWrapper<{}>;
    Subscription: ResolverTypeWrapper<{}>;
    gnosisPrimaryAccount: ResolverTypeWrapper<gnosisPrimaryAccount>;
    gnosisPrimaryAccount_filter: gnosisPrimaryAccount_filter;
    gnosisPrimaryAccount_orderBy: gnosisPrimaryAccount_orderBy;
    gnosisPrimaryBigDecimal: ResolverTypeWrapper<Scalars['gnosisPrimaryBigDecimal']>;
    BigInt: ResolverTypeWrapper<Scalars['BigInt']>;
    gnosisPrimaryBlockChangedFilter: gnosisPrimaryBlockChangedFilter;
    gnosisPrimaryBlock_height: gnosisPrimaryBlock_height;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
    gnosisPrimaryBorrow: ResolverTypeWrapper<gnosisPrimaryBorrow>;
    gnosisPrimaryBorrow_filter: gnosisPrimaryBorrow_filter;
    gnosisPrimaryBorrow_orderBy: gnosisPrimaryBorrow_orderBy;
    gnosisPrimaryBytes: ResolverTypeWrapper<Scalars['gnosisPrimaryBytes']>;
    gnosisPrimaryCollateralizationType: gnosisPrimaryCollateralizationType;
    gnosisPrimaryDeposit: ResolverTypeWrapper<gnosisPrimaryDeposit>;
    gnosisPrimaryDeposit_filter: gnosisPrimaryDeposit_filter;
    gnosisPrimaryDeposit_orderBy: gnosisPrimaryDeposit_orderBy;
    gnosisPrimaryEvent: ResolversTypes['gnosisPrimaryBorrow'] | ResolversTypes['gnosisPrimaryDeposit'] | ResolversTypes['gnosisPrimaryFlashloan'] | ResolversTypes['gnosisPrimaryLiquidate'] | ResolversTypes['gnosisPrimaryRepay'] | ResolversTypes['gnosisPrimaryTransfer'] | ResolversTypes['gnosisPrimaryWithdraw'];
    gnosisPrimaryEvent_filter: gnosisPrimaryEvent_filter;
    gnosisPrimaryEvent_orderBy: gnosisPrimaryEvent_orderBy;
    gnosisPrimaryFee: ResolverTypeWrapper<gnosisPrimaryFee>;
    gnosisPrimaryFeeType: gnosisPrimaryFeeType;
    gnosisPrimaryFee_filter: gnosisPrimaryFee_filter;
    gnosisPrimaryFee_orderBy: gnosisPrimaryFee_orderBy;
    gnosisPrimaryFinancialsDailySnapshot: ResolverTypeWrapper<gnosisPrimaryFinancialsDailySnapshot>;
    gnosisPrimaryFinancialsDailySnapshot_filter: gnosisPrimaryFinancialsDailySnapshot_filter;
    gnosisPrimaryFinancialsDailySnapshot_orderBy: gnosisPrimaryFinancialsDailySnapshot_orderBy;
    gnosisPrimaryFlashloan: ResolverTypeWrapper<gnosisPrimaryFlashloan>;
    gnosisPrimaryFlashloan_filter: gnosisPrimaryFlashloan_filter;
    gnosisPrimaryFlashloan_orderBy: gnosisPrimaryFlashloan_orderBy;
    Float: ResolverTypeWrapper<Scalars['Float']>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    gnosisPrimaryInt8: ResolverTypeWrapper<Scalars['gnosisPrimaryInt8']>;
    gnosisPrimaryInterestRate: ResolverTypeWrapper<gnosisPrimaryInterestRate>;
    gnosisPrimaryInterestRateSide: gnosisPrimaryInterestRateSide;
    gnosisPrimaryInterestRateType: gnosisPrimaryInterestRateType;
    gnosisPrimaryInterestRate_filter: gnosisPrimaryInterestRate_filter;
    gnosisPrimaryInterestRate_orderBy: gnosisPrimaryInterestRate_orderBy;
    gnosisPrimaryLendingProtocol: ResolverTypeWrapper<gnosisPrimaryLendingProtocol>;
    gnosisPrimaryLendingProtocol_filter: gnosisPrimaryLendingProtocol_filter;
    gnosisPrimaryLendingProtocol_orderBy: gnosisPrimaryLendingProtocol_orderBy;
    gnosisPrimaryLendingType: gnosisPrimaryLendingType;
    gnosisPrimaryLiquidate: ResolverTypeWrapper<gnosisPrimaryLiquidate>;
    gnosisPrimaryLiquidate_filter: gnosisPrimaryLiquidate_filter;
    gnosisPrimaryLiquidate_orderBy: gnosisPrimaryLiquidate_orderBy;
    gnosisPrimaryMarket: ResolverTypeWrapper<gnosisPrimaryMarket>;
    gnosisPrimaryMarketDailySnapshot: ResolverTypeWrapper<gnosisPrimaryMarketDailySnapshot>;
    gnosisPrimaryMarketDailySnapshot_filter: gnosisPrimaryMarketDailySnapshot_filter;
    gnosisPrimaryMarketDailySnapshot_orderBy: gnosisPrimaryMarketDailySnapshot_orderBy;
    gnosisPrimaryMarketHourlySnapshot: ResolverTypeWrapper<gnosisPrimaryMarketHourlySnapshot>;
    gnosisPrimaryMarketHourlySnapshot_filter: gnosisPrimaryMarketHourlySnapshot_filter;
    gnosisPrimaryMarketHourlySnapshot_orderBy: gnosisPrimaryMarketHourlySnapshot_orderBy;
    gnosisPrimaryMarket_filter: gnosisPrimaryMarket_filter;
    gnosisPrimaryMarket_orderBy: gnosisPrimaryMarket_orderBy;
    gnosisPrimaryNetwork: gnosisPrimaryNetwork;
    gnosisPrimaryOracle: ResolverTypeWrapper<gnosisPrimaryOracle>;
    gnosisPrimaryOracleSource: gnosisPrimaryOracleSource;
    gnosisPrimaryOracle_filter: gnosisPrimaryOracle_filter;
    gnosisPrimaryOracle_orderBy: gnosisPrimaryOracle_orderBy;
    gnosisPrimaryOrderDirection: gnosisPrimaryOrderDirection;
    gnosisPrimaryPermissionType: gnosisPrimaryPermissionType;
    gnosisPrimaryPosition: ResolverTypeWrapper<gnosisPrimaryPosition>;
    gnosisPrimaryPositionSide: gnosisPrimaryPositionSide;
    gnosisPrimaryPositionSnapshot: ResolverTypeWrapper<gnosisPrimaryPositionSnapshot>;
    gnosisPrimaryPositionSnapshot_filter: gnosisPrimaryPositionSnapshot_filter;
    gnosisPrimaryPositionSnapshot_orderBy: gnosisPrimaryPositionSnapshot_orderBy;
    gnosisPrimaryPosition_filter: gnosisPrimaryPosition_filter;
    gnosisPrimaryPosition_orderBy: gnosisPrimaryPosition_orderBy;
    gnosisPrimaryProtocol: ResolversTypes['gnosisPrimaryLendingProtocol'];
    gnosisPrimaryProtocolType: gnosisPrimaryProtocolType;
    gnosisPrimaryProtocol_filter: gnosisPrimaryProtocol_filter;
    gnosisPrimaryProtocol_orderBy: gnosisPrimaryProtocol_orderBy;
    gnosisPrimaryRepay: ResolverTypeWrapper<gnosisPrimaryRepay>;
    gnosisPrimaryRepay_filter: gnosisPrimaryRepay_filter;
    gnosisPrimaryRepay_orderBy: gnosisPrimaryRepay_orderBy;
    gnosisPrimaryRevenueDetail: ResolverTypeWrapper<gnosisPrimaryRevenueDetail>;
    gnosisPrimaryRevenueDetail_filter: gnosisPrimaryRevenueDetail_filter;
    gnosisPrimaryRevenueDetail_orderBy: gnosisPrimaryRevenueDetail_orderBy;
    gnosisPrimaryRewardToken: ResolverTypeWrapper<gnosisPrimaryRewardToken>;
    gnosisPrimaryRewardTokenType: gnosisPrimaryRewardTokenType;
    gnosisPrimaryRewardToken_filter: gnosisPrimaryRewardToken_filter;
    gnosisPrimaryRewardToken_orderBy: gnosisPrimaryRewardToken_orderBy;
    gnosisPrimaryRiskType: gnosisPrimaryRiskType;
    String: ResolverTypeWrapper<Scalars['String']>;
    gnosisPrimaryToken: ResolverTypeWrapper<gnosisPrimaryToken>;
    gnosisPrimaryTokenType: gnosisPrimaryTokenType;
    gnosisPrimaryToken_filter: gnosisPrimaryToken_filter;
    gnosisPrimaryToken_orderBy: gnosisPrimaryToken_orderBy;
    gnosisPrimaryTranche: gnosisPrimaryTranche;
    gnosisPrimaryTransfer: ResolverTypeWrapper<gnosisPrimaryTransfer>;
    gnosisPrimaryTransfer_filter: gnosisPrimaryTransfer_filter;
    gnosisPrimaryTransfer_orderBy: gnosisPrimaryTransfer_orderBy;
    gnosisPrimaryUsageMetricsDailySnapshot: ResolverTypeWrapper<gnosisPrimaryUsageMetricsDailySnapshot>;
    gnosisPrimaryUsageMetricsDailySnapshot_filter: gnosisPrimaryUsageMetricsDailySnapshot_filter;
    gnosisPrimaryUsageMetricsDailySnapshot_orderBy: gnosisPrimaryUsageMetricsDailySnapshot_orderBy;
    gnosisPrimaryUsageMetricsHourlySnapshot: ResolverTypeWrapper<gnosisPrimaryUsageMetricsHourlySnapshot>;
    gnosisPrimaryUsageMetricsHourlySnapshot_filter: gnosisPrimaryUsageMetricsHourlySnapshot_filter;
    gnosisPrimaryUsageMetricsHourlySnapshot_orderBy: gnosisPrimaryUsageMetricsHourlySnapshot_orderBy;
    gnosisPrimaryWithdraw: ResolverTypeWrapper<gnosisPrimaryWithdraw>;
    gnosisPrimaryWithdraw_filter: gnosisPrimaryWithdraw_filter;
    gnosisPrimaryWithdraw_orderBy: gnosisPrimaryWithdraw_orderBy;
    gnosisPrimary_ActiveAccount: ResolverTypeWrapper<gnosisPrimary_ActiveAccount>;
    gnosisPrimary_ActiveAccount_filter: gnosisPrimary_ActiveAccount_filter;
    gnosisPrimary_ActiveAccount_orderBy: gnosisPrimary_ActiveAccount_orderBy;
    gnosisPrimary_Block_: ResolverTypeWrapper<gnosisPrimary_Block_>;
    gnosisPrimary_DefaultOracle: ResolverTypeWrapper<gnosisPrimary_DefaultOracle>;
    gnosisPrimary_DefaultOracle_filter: gnosisPrimary_DefaultOracle_filter;
    gnosisPrimary_DefaultOracle_orderBy: gnosisPrimary_DefaultOracle_orderBy;
    gnosisPrimary_FlashLoanPremium: ResolverTypeWrapper<gnosisPrimary_FlashLoanPremium>;
    gnosisPrimary_FlashLoanPremium_filter: gnosisPrimary_FlashLoanPremium_filter;
    gnosisPrimary_FlashLoanPremium_orderBy: gnosisPrimary_FlashLoanPremium_orderBy;
    gnosisPrimary_MarketList: ResolverTypeWrapper<gnosisPrimary_MarketList>;
    gnosisPrimary_MarketList_filter: gnosisPrimary_MarketList_filter;
    gnosisPrimary_MarketList_orderBy: gnosisPrimary_MarketList_orderBy;
    gnosisPrimary_Meta_: ResolverTypeWrapper<gnosisPrimary_Meta_>;
    gnosisPrimary_PositionCounter: ResolverTypeWrapper<gnosisPrimary_PositionCounter>;
    gnosisPrimary_PositionCounter_filter: gnosisPrimary_PositionCounter_filter;
    gnosisPrimary_PositionCounter_orderBy: gnosisPrimary_PositionCounter_orderBy;
    gnosisPrimary_SubgraphErrorPolicy_: gnosisPrimary_SubgraphErrorPolicy_;
    ethereumPrimaryAccount: ResolverTypeWrapper<ethereumPrimaryAccount>;
    ethereumPrimaryAccount_filter: ethereumPrimaryAccount_filter;
    ethereumPrimaryAccount_orderBy: ethereumPrimaryAccount_orderBy;
    ethereumPrimaryBigDecimal: ResolverTypeWrapper<Scalars['ethereumPrimaryBigDecimal']>;
    ethereumPrimaryBlockChangedFilter: ethereumPrimaryBlockChangedFilter;
    ethereumPrimaryBlock_height: ethereumPrimaryBlock_height;
    ethereumPrimaryBorrow: ResolverTypeWrapper<ethereumPrimaryBorrow>;
    ethereumPrimaryBorrow_filter: ethereumPrimaryBorrow_filter;
    ethereumPrimaryBorrow_orderBy: ethereumPrimaryBorrow_orderBy;
    ethereumPrimaryBytes: ResolverTypeWrapper<Scalars['ethereumPrimaryBytes']>;
    ethereumPrimaryCollateralizationType: ethereumPrimaryCollateralizationType;
    ethereumPrimaryDeposit: ResolverTypeWrapper<ethereumPrimaryDeposit>;
    ethereumPrimaryDeposit_filter: ethereumPrimaryDeposit_filter;
    ethereumPrimaryDeposit_orderBy: ethereumPrimaryDeposit_orderBy;
    ethereumPrimaryEvent: ResolversTypes['ethereumPrimaryBorrow'] | ResolversTypes['ethereumPrimaryDeposit'] | ResolversTypes['ethereumPrimaryFlashloan'] | ResolversTypes['ethereumPrimaryLiquidate'] | ResolversTypes['ethereumPrimaryRepay'] | ResolversTypes['ethereumPrimaryTransfer'] | ResolversTypes['ethereumPrimaryWithdraw'];
    ethereumPrimaryEvent_filter: ethereumPrimaryEvent_filter;
    ethereumPrimaryEvent_orderBy: ethereumPrimaryEvent_orderBy;
    ethereumPrimaryFee: ResolverTypeWrapper<ethereumPrimaryFee>;
    ethereumPrimaryFeeType: ethereumPrimaryFeeType;
    ethereumPrimaryFee_filter: ethereumPrimaryFee_filter;
    ethereumPrimaryFee_orderBy: ethereumPrimaryFee_orderBy;
    ethereumPrimaryFinancialsDailySnapshot: ResolverTypeWrapper<ethereumPrimaryFinancialsDailySnapshot>;
    ethereumPrimaryFinancialsDailySnapshot_filter: ethereumPrimaryFinancialsDailySnapshot_filter;
    ethereumPrimaryFinancialsDailySnapshot_orderBy: ethereumPrimaryFinancialsDailySnapshot_orderBy;
    ethereumPrimaryFlashloan: ResolverTypeWrapper<ethereumPrimaryFlashloan>;
    ethereumPrimaryFlashloan_filter: ethereumPrimaryFlashloan_filter;
    ethereumPrimaryFlashloan_orderBy: ethereumPrimaryFlashloan_orderBy;
    ethereumPrimaryInt8: ResolverTypeWrapper<Scalars['ethereumPrimaryInt8']>;
    ethereumPrimaryInterestRate: ResolverTypeWrapper<ethereumPrimaryInterestRate>;
    ethereumPrimaryInterestRateSide: ethereumPrimaryInterestRateSide;
    ethereumPrimaryInterestRateType: ethereumPrimaryInterestRateType;
    ethereumPrimaryInterestRate_filter: ethereumPrimaryInterestRate_filter;
    ethereumPrimaryInterestRate_orderBy: ethereumPrimaryInterestRate_orderBy;
    ethereumPrimaryLendingProtocol: ResolverTypeWrapper<ethereumPrimaryLendingProtocol>;
    ethereumPrimaryLendingProtocol_filter: ethereumPrimaryLendingProtocol_filter;
    ethereumPrimaryLendingProtocol_orderBy: ethereumPrimaryLendingProtocol_orderBy;
    ethereumPrimaryLendingType: ethereumPrimaryLendingType;
    ethereumPrimaryLiquidate: ResolverTypeWrapper<ethereumPrimaryLiquidate>;
    ethereumPrimaryLiquidate_filter: ethereumPrimaryLiquidate_filter;
    ethereumPrimaryLiquidate_orderBy: ethereumPrimaryLiquidate_orderBy;
    ethereumPrimaryMarket: ResolverTypeWrapper<ethereumPrimaryMarket>;
    ethereumPrimaryMarketDailySnapshot: ResolverTypeWrapper<ethereumPrimaryMarketDailySnapshot>;
    ethereumPrimaryMarketDailySnapshot_filter: ethereumPrimaryMarketDailySnapshot_filter;
    ethereumPrimaryMarketDailySnapshot_orderBy: ethereumPrimaryMarketDailySnapshot_orderBy;
    ethereumPrimaryMarketHourlySnapshot: ResolverTypeWrapper<ethereumPrimaryMarketHourlySnapshot>;
    ethereumPrimaryMarketHourlySnapshot_filter: ethereumPrimaryMarketHourlySnapshot_filter;
    ethereumPrimaryMarketHourlySnapshot_orderBy: ethereumPrimaryMarketHourlySnapshot_orderBy;
    ethereumPrimaryMarket_filter: ethereumPrimaryMarket_filter;
    ethereumPrimaryMarket_orderBy: ethereumPrimaryMarket_orderBy;
    ethereumPrimaryNetwork: ethereumPrimaryNetwork;
    ethereumPrimaryOracle: ResolverTypeWrapper<ethereumPrimaryOracle>;
    ethereumPrimaryOracleSource: ethereumPrimaryOracleSource;
    ethereumPrimaryOracle_filter: ethereumPrimaryOracle_filter;
    ethereumPrimaryOracle_orderBy: ethereumPrimaryOracle_orderBy;
    ethereumPrimaryOrderDirection: ethereumPrimaryOrderDirection;
    ethereumPrimaryPermissionType: ethereumPrimaryPermissionType;
    ethereumPrimaryPosition: ResolverTypeWrapper<ethereumPrimaryPosition>;
    ethereumPrimaryPositionSide: ethereumPrimaryPositionSide;
    ethereumPrimaryPositionSnapshot: ResolverTypeWrapper<ethereumPrimaryPositionSnapshot>;
    ethereumPrimaryPositionSnapshot_filter: ethereumPrimaryPositionSnapshot_filter;
    ethereumPrimaryPositionSnapshot_orderBy: ethereumPrimaryPositionSnapshot_orderBy;
    ethereumPrimaryPosition_filter: ethereumPrimaryPosition_filter;
    ethereumPrimaryPosition_orderBy: ethereumPrimaryPosition_orderBy;
    ethereumPrimaryProtocol: ResolversTypes['ethereumPrimaryLendingProtocol'];
    ethereumPrimaryProtocolType: ethereumPrimaryProtocolType;
    ethereumPrimaryProtocol_filter: ethereumPrimaryProtocol_filter;
    ethereumPrimaryProtocol_orderBy: ethereumPrimaryProtocol_orderBy;
    ethereumPrimaryRepay: ResolverTypeWrapper<ethereumPrimaryRepay>;
    ethereumPrimaryRepay_filter: ethereumPrimaryRepay_filter;
    ethereumPrimaryRepay_orderBy: ethereumPrimaryRepay_orderBy;
    ethereumPrimaryRevenueDetail: ResolverTypeWrapper<ethereumPrimaryRevenueDetail>;
    ethereumPrimaryRevenueDetail_filter: ethereumPrimaryRevenueDetail_filter;
    ethereumPrimaryRevenueDetail_orderBy: ethereumPrimaryRevenueDetail_orderBy;
    ethereumPrimaryRewardToken: ResolverTypeWrapper<ethereumPrimaryRewardToken>;
    ethereumPrimaryRewardTokenType: ethereumPrimaryRewardTokenType;
    ethereumPrimaryRewardToken_filter: ethereumPrimaryRewardToken_filter;
    ethereumPrimaryRewardToken_orderBy: ethereumPrimaryRewardToken_orderBy;
    ethereumPrimaryRiskType: ethereumPrimaryRiskType;
    ethereumPrimaryToken: ResolverTypeWrapper<ethereumPrimaryToken>;
    ethereumPrimaryTokenType: ethereumPrimaryTokenType;
    ethereumPrimaryToken_filter: ethereumPrimaryToken_filter;
    ethereumPrimaryToken_orderBy: ethereumPrimaryToken_orderBy;
    ethereumPrimaryTranche: ethereumPrimaryTranche;
    ethereumPrimaryTransfer: ResolverTypeWrapper<ethereumPrimaryTransfer>;
    ethereumPrimaryTransfer_filter: ethereumPrimaryTransfer_filter;
    ethereumPrimaryTransfer_orderBy: ethereumPrimaryTransfer_orderBy;
    ethereumPrimaryUsageMetricsDailySnapshot: ResolverTypeWrapper<ethereumPrimaryUsageMetricsDailySnapshot>;
    ethereumPrimaryUsageMetricsDailySnapshot_filter: ethereumPrimaryUsageMetricsDailySnapshot_filter;
    ethereumPrimaryUsageMetricsDailySnapshot_orderBy: ethereumPrimaryUsageMetricsDailySnapshot_orderBy;
    ethereumPrimaryUsageMetricsHourlySnapshot: ResolverTypeWrapper<ethereumPrimaryUsageMetricsHourlySnapshot>;
    ethereumPrimaryUsageMetricsHourlySnapshot_filter: ethereumPrimaryUsageMetricsHourlySnapshot_filter;
    ethereumPrimaryUsageMetricsHourlySnapshot_orderBy: ethereumPrimaryUsageMetricsHourlySnapshot_orderBy;
    ethereumPrimaryWithdraw: ResolverTypeWrapper<ethereumPrimaryWithdraw>;
    ethereumPrimaryWithdraw_filter: ethereumPrimaryWithdraw_filter;
    ethereumPrimaryWithdraw_orderBy: ethereumPrimaryWithdraw_orderBy;
    ethereumPrimary_ActiveAccount: ResolverTypeWrapper<ethereumPrimary_ActiveAccount>;
    ethereumPrimary_ActiveAccount_filter: ethereumPrimary_ActiveAccount_filter;
    ethereumPrimary_ActiveAccount_orderBy: ethereumPrimary_ActiveAccount_orderBy;
    ethereumPrimary_Block_: ResolverTypeWrapper<ethereumPrimary_Block_>;
    ethereumPrimary_DefaultOracle: ResolverTypeWrapper<ethereumPrimary_DefaultOracle>;
    ethereumPrimary_DefaultOracle_filter: ethereumPrimary_DefaultOracle_filter;
    ethereumPrimary_DefaultOracle_orderBy: ethereumPrimary_DefaultOracle_orderBy;
    ethereumPrimary_FlashLoanPremium: ResolverTypeWrapper<ethereumPrimary_FlashLoanPremium>;
    ethereumPrimary_FlashLoanPremium_filter: ethereumPrimary_FlashLoanPremium_filter;
    ethereumPrimary_FlashLoanPremium_orderBy: ethereumPrimary_FlashLoanPremium_orderBy;
    ethereumPrimary_MarketList: ResolverTypeWrapper<ethereumPrimary_MarketList>;
    ethereumPrimary_MarketList_filter: ethereumPrimary_MarketList_filter;
    ethereumPrimary_MarketList_orderBy: ethereumPrimary_MarketList_orderBy;
    ethereumPrimary_Meta_: ResolverTypeWrapper<ethereumPrimary_Meta_>;
    ethereumPrimary_PositionCounter: ResolverTypeWrapper<ethereumPrimary_PositionCounter>;
    ethereumPrimary_PositionCounter_filter: ethereumPrimary_PositionCounter_filter;
    ethereumPrimary_PositionCounter_orderBy: ethereumPrimary_PositionCounter_orderBy;
    ethereumPrimary_SubgraphErrorPolicy_: ethereumPrimary_SubgraphErrorPolicy_;
}>;
/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
    Query: {};
    Subscription: {};
    gnosisPrimaryAccount: gnosisPrimaryAccount;
    gnosisPrimaryAccount_filter: gnosisPrimaryAccount_filter;
    gnosisPrimaryBigDecimal: Scalars['gnosisPrimaryBigDecimal'];
    BigInt: Scalars['BigInt'];
    gnosisPrimaryBlockChangedFilter: gnosisPrimaryBlockChangedFilter;
    gnosisPrimaryBlock_height: gnosisPrimaryBlock_height;
    Boolean: Scalars['Boolean'];
    gnosisPrimaryBorrow: gnosisPrimaryBorrow;
    gnosisPrimaryBorrow_filter: gnosisPrimaryBorrow_filter;
    gnosisPrimaryBytes: Scalars['gnosisPrimaryBytes'];
    gnosisPrimaryDeposit: gnosisPrimaryDeposit;
    gnosisPrimaryDeposit_filter: gnosisPrimaryDeposit_filter;
    gnosisPrimaryEvent: ResolversParentTypes['gnosisPrimaryBorrow'] | ResolversParentTypes['gnosisPrimaryDeposit'] | ResolversParentTypes['gnosisPrimaryFlashloan'] | ResolversParentTypes['gnosisPrimaryLiquidate'] | ResolversParentTypes['gnosisPrimaryRepay'] | ResolversParentTypes['gnosisPrimaryTransfer'] | ResolversParentTypes['gnosisPrimaryWithdraw'];
    gnosisPrimaryEvent_filter: gnosisPrimaryEvent_filter;
    gnosisPrimaryFee: gnosisPrimaryFee;
    gnosisPrimaryFee_filter: gnosisPrimaryFee_filter;
    gnosisPrimaryFinancialsDailySnapshot: gnosisPrimaryFinancialsDailySnapshot;
    gnosisPrimaryFinancialsDailySnapshot_filter: gnosisPrimaryFinancialsDailySnapshot_filter;
    gnosisPrimaryFlashloan: gnosisPrimaryFlashloan;
    gnosisPrimaryFlashloan_filter: gnosisPrimaryFlashloan_filter;
    Float: Scalars['Float'];
    ID: Scalars['ID'];
    Int: Scalars['Int'];
    gnosisPrimaryInt8: Scalars['gnosisPrimaryInt8'];
    gnosisPrimaryInterestRate: gnosisPrimaryInterestRate;
    gnosisPrimaryInterestRate_filter: gnosisPrimaryInterestRate_filter;
    gnosisPrimaryLendingProtocol: gnosisPrimaryLendingProtocol;
    gnosisPrimaryLendingProtocol_filter: gnosisPrimaryLendingProtocol_filter;
    gnosisPrimaryLiquidate: gnosisPrimaryLiquidate;
    gnosisPrimaryLiquidate_filter: gnosisPrimaryLiquidate_filter;
    gnosisPrimaryMarket: gnosisPrimaryMarket;
    gnosisPrimaryMarketDailySnapshot: gnosisPrimaryMarketDailySnapshot;
    gnosisPrimaryMarketDailySnapshot_filter: gnosisPrimaryMarketDailySnapshot_filter;
    gnosisPrimaryMarketHourlySnapshot: gnosisPrimaryMarketHourlySnapshot;
    gnosisPrimaryMarketHourlySnapshot_filter: gnosisPrimaryMarketHourlySnapshot_filter;
    gnosisPrimaryMarket_filter: gnosisPrimaryMarket_filter;
    gnosisPrimaryOracle: gnosisPrimaryOracle;
    gnosisPrimaryOracle_filter: gnosisPrimaryOracle_filter;
    gnosisPrimaryPosition: gnosisPrimaryPosition;
    gnosisPrimaryPositionSnapshot: gnosisPrimaryPositionSnapshot;
    gnosisPrimaryPositionSnapshot_filter: gnosisPrimaryPositionSnapshot_filter;
    gnosisPrimaryPosition_filter: gnosisPrimaryPosition_filter;
    gnosisPrimaryProtocol: ResolversParentTypes['gnosisPrimaryLendingProtocol'];
    gnosisPrimaryProtocol_filter: gnosisPrimaryProtocol_filter;
    gnosisPrimaryRepay: gnosisPrimaryRepay;
    gnosisPrimaryRepay_filter: gnosisPrimaryRepay_filter;
    gnosisPrimaryRevenueDetail: gnosisPrimaryRevenueDetail;
    gnosisPrimaryRevenueDetail_filter: gnosisPrimaryRevenueDetail_filter;
    gnosisPrimaryRewardToken: gnosisPrimaryRewardToken;
    gnosisPrimaryRewardToken_filter: gnosisPrimaryRewardToken_filter;
    String: Scalars['String'];
    gnosisPrimaryToken: gnosisPrimaryToken;
    gnosisPrimaryToken_filter: gnosisPrimaryToken_filter;
    gnosisPrimaryTransfer: gnosisPrimaryTransfer;
    gnosisPrimaryTransfer_filter: gnosisPrimaryTransfer_filter;
    gnosisPrimaryUsageMetricsDailySnapshot: gnosisPrimaryUsageMetricsDailySnapshot;
    gnosisPrimaryUsageMetricsDailySnapshot_filter: gnosisPrimaryUsageMetricsDailySnapshot_filter;
    gnosisPrimaryUsageMetricsHourlySnapshot: gnosisPrimaryUsageMetricsHourlySnapshot;
    gnosisPrimaryUsageMetricsHourlySnapshot_filter: gnosisPrimaryUsageMetricsHourlySnapshot_filter;
    gnosisPrimaryWithdraw: gnosisPrimaryWithdraw;
    gnosisPrimaryWithdraw_filter: gnosisPrimaryWithdraw_filter;
    gnosisPrimary_ActiveAccount: gnosisPrimary_ActiveAccount;
    gnosisPrimary_ActiveAccount_filter: gnosisPrimary_ActiveAccount_filter;
    gnosisPrimary_Block_: gnosisPrimary_Block_;
    gnosisPrimary_DefaultOracle: gnosisPrimary_DefaultOracle;
    gnosisPrimary_DefaultOracle_filter: gnosisPrimary_DefaultOracle_filter;
    gnosisPrimary_FlashLoanPremium: gnosisPrimary_FlashLoanPremium;
    gnosisPrimary_FlashLoanPremium_filter: gnosisPrimary_FlashLoanPremium_filter;
    gnosisPrimary_MarketList: gnosisPrimary_MarketList;
    gnosisPrimary_MarketList_filter: gnosisPrimary_MarketList_filter;
    gnosisPrimary_Meta_: gnosisPrimary_Meta_;
    gnosisPrimary_PositionCounter: gnosisPrimary_PositionCounter;
    gnosisPrimary_PositionCounter_filter: gnosisPrimary_PositionCounter_filter;
    ethereumPrimaryAccount: ethereumPrimaryAccount;
    ethereumPrimaryAccount_filter: ethereumPrimaryAccount_filter;
    ethereumPrimaryBigDecimal: Scalars['ethereumPrimaryBigDecimal'];
    ethereumPrimaryBlockChangedFilter: ethereumPrimaryBlockChangedFilter;
    ethereumPrimaryBlock_height: ethereumPrimaryBlock_height;
    ethereumPrimaryBorrow: ethereumPrimaryBorrow;
    ethereumPrimaryBorrow_filter: ethereumPrimaryBorrow_filter;
    ethereumPrimaryBytes: Scalars['ethereumPrimaryBytes'];
    ethereumPrimaryDeposit: ethereumPrimaryDeposit;
    ethereumPrimaryDeposit_filter: ethereumPrimaryDeposit_filter;
    ethereumPrimaryEvent: ResolversParentTypes['ethereumPrimaryBorrow'] | ResolversParentTypes['ethereumPrimaryDeposit'] | ResolversParentTypes['ethereumPrimaryFlashloan'] | ResolversParentTypes['ethereumPrimaryLiquidate'] | ResolversParentTypes['ethereumPrimaryRepay'] | ResolversParentTypes['ethereumPrimaryTransfer'] | ResolversParentTypes['ethereumPrimaryWithdraw'];
    ethereumPrimaryEvent_filter: ethereumPrimaryEvent_filter;
    ethereumPrimaryFee: ethereumPrimaryFee;
    ethereumPrimaryFee_filter: ethereumPrimaryFee_filter;
    ethereumPrimaryFinancialsDailySnapshot: ethereumPrimaryFinancialsDailySnapshot;
    ethereumPrimaryFinancialsDailySnapshot_filter: ethereumPrimaryFinancialsDailySnapshot_filter;
    ethereumPrimaryFlashloan: ethereumPrimaryFlashloan;
    ethereumPrimaryFlashloan_filter: ethereumPrimaryFlashloan_filter;
    ethereumPrimaryInt8: Scalars['ethereumPrimaryInt8'];
    ethereumPrimaryInterestRate: ethereumPrimaryInterestRate;
    ethereumPrimaryInterestRate_filter: ethereumPrimaryInterestRate_filter;
    ethereumPrimaryLendingProtocol: ethereumPrimaryLendingProtocol;
    ethereumPrimaryLendingProtocol_filter: ethereumPrimaryLendingProtocol_filter;
    ethereumPrimaryLiquidate: ethereumPrimaryLiquidate;
    ethereumPrimaryLiquidate_filter: ethereumPrimaryLiquidate_filter;
    ethereumPrimaryMarket: ethereumPrimaryMarket;
    ethereumPrimaryMarketDailySnapshot: ethereumPrimaryMarketDailySnapshot;
    ethereumPrimaryMarketDailySnapshot_filter: ethereumPrimaryMarketDailySnapshot_filter;
    ethereumPrimaryMarketHourlySnapshot: ethereumPrimaryMarketHourlySnapshot;
    ethereumPrimaryMarketHourlySnapshot_filter: ethereumPrimaryMarketHourlySnapshot_filter;
    ethereumPrimaryMarket_filter: ethereumPrimaryMarket_filter;
    ethereumPrimaryOracle: ethereumPrimaryOracle;
    ethereumPrimaryOracle_filter: ethereumPrimaryOracle_filter;
    ethereumPrimaryPosition: ethereumPrimaryPosition;
    ethereumPrimaryPositionSnapshot: ethereumPrimaryPositionSnapshot;
    ethereumPrimaryPositionSnapshot_filter: ethereumPrimaryPositionSnapshot_filter;
    ethereumPrimaryPosition_filter: ethereumPrimaryPosition_filter;
    ethereumPrimaryProtocol: ResolversParentTypes['ethereumPrimaryLendingProtocol'];
    ethereumPrimaryProtocol_filter: ethereumPrimaryProtocol_filter;
    ethereumPrimaryRepay: ethereumPrimaryRepay;
    ethereumPrimaryRepay_filter: ethereumPrimaryRepay_filter;
    ethereumPrimaryRevenueDetail: ethereumPrimaryRevenueDetail;
    ethereumPrimaryRevenueDetail_filter: ethereumPrimaryRevenueDetail_filter;
    ethereumPrimaryRewardToken: ethereumPrimaryRewardToken;
    ethereumPrimaryRewardToken_filter: ethereumPrimaryRewardToken_filter;
    ethereumPrimaryToken: ethereumPrimaryToken;
    ethereumPrimaryToken_filter: ethereumPrimaryToken_filter;
    ethereumPrimaryTransfer: ethereumPrimaryTransfer;
    ethereumPrimaryTransfer_filter: ethereumPrimaryTransfer_filter;
    ethereumPrimaryUsageMetricsDailySnapshot: ethereumPrimaryUsageMetricsDailySnapshot;
    ethereumPrimaryUsageMetricsDailySnapshot_filter: ethereumPrimaryUsageMetricsDailySnapshot_filter;
    ethereumPrimaryUsageMetricsHourlySnapshot: ethereumPrimaryUsageMetricsHourlySnapshot;
    ethereumPrimaryUsageMetricsHourlySnapshot_filter: ethereumPrimaryUsageMetricsHourlySnapshot_filter;
    ethereumPrimaryWithdraw: ethereumPrimaryWithdraw;
    ethereumPrimaryWithdraw_filter: ethereumPrimaryWithdraw_filter;
    ethereumPrimary_ActiveAccount: ethereumPrimary_ActiveAccount;
    ethereumPrimary_ActiveAccount_filter: ethereumPrimary_ActiveAccount_filter;
    ethereumPrimary_Block_: ethereumPrimary_Block_;
    ethereumPrimary_DefaultOracle: ethereumPrimary_DefaultOracle;
    ethereumPrimary_DefaultOracle_filter: ethereumPrimary_DefaultOracle_filter;
    ethereumPrimary_FlashLoanPremium: ethereumPrimary_FlashLoanPremium;
    ethereumPrimary_FlashLoanPremium_filter: ethereumPrimary_FlashLoanPremium_filter;
    ethereumPrimary_MarketList: ethereumPrimary_MarketList;
    ethereumPrimary_MarketList_filter: ethereumPrimary_MarketList_filter;
    ethereumPrimary_Meta_: ethereumPrimary_Meta_;
    ethereumPrimary_PositionCounter: ethereumPrimary_PositionCounter;
    ethereumPrimary_PositionCounter_filter: ethereumPrimary_PositionCounter_filter;
}>;
export type entityDirectiveArgs = {};
export type entityDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = entityDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export type subgraphIdDirectiveArgs = {
    id: Scalars['String'];
};
export type subgraphIdDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = subgraphIdDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export type derivedFromDirectiveArgs = {
    field: Scalars['String'];
};
export type derivedFromDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = derivedFromDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;
export type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
    gnosisPrimarytoken?: Resolver<Maybe<ResolversTypes['gnosisPrimaryToken']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarytokenArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarytokens?: Resolver<Array<ResolversTypes['gnosisPrimaryToken']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarytokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryrewardToken?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRewardToken']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryrewardTokenArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryrewardTokens?: Resolver<Array<ResolversTypes['gnosisPrimaryRewardToken']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryrewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryinterestRate?: Resolver<Maybe<ResolversTypes['gnosisPrimaryInterestRate']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryinterestRateArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryinterestRates?: Resolver<Array<ResolversTypes['gnosisPrimaryInterestRate']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryinterestRatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryfee?: Resolver<Maybe<ResolversTypes['gnosisPrimaryFee']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryfeeArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryfees?: Resolver<Array<ResolversTypes['gnosisPrimaryFee']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryfeesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryrevenueDetail?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRevenueDetail']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryrevenueDetailArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryrevenueDetails?: Resolver<Array<ResolversTypes['gnosisPrimaryRevenueDetail']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryrevenueDetailsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryoracle?: Resolver<Maybe<ResolversTypes['gnosisPrimaryOracle']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryoracleArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryoracles?: Resolver<Array<ResolversTypes['gnosisPrimaryOracle']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryoraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarylendingProtocol?: Resolver<Maybe<ResolversTypes['gnosisPrimaryLendingProtocol']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarylendingProtocolArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarylendingProtocols?: Resolver<Array<ResolversTypes['gnosisPrimaryLendingProtocol']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarylendingProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarketList?: Resolver<Maybe<ResolversTypes['gnosisPrimary_MarketList']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketListArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarketLists?: Resolver<Array<ResolversTypes['gnosisPrimary_MarketList']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketListsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsDailySnapshot?: Resolver<Maybe<ResolversTypes['gnosisPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryusageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsDailySnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryusageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsHourlySnapshot?: Resolver<Maybe<ResolversTypes['gnosisPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryusageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsHourlySnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryusageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryfinancialsDailySnapshot?: Resolver<Maybe<ResolversTypes['gnosisPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryfinancialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryfinancialsDailySnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryfinancialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarket?: Resolver<Maybe<ResolversTypes['gnosisPrimaryMarket']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarkets?: Resolver<Array<ResolversTypes['gnosisPrimaryMarket']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarketDailySnapshot?: Resolver<Maybe<ResolversTypes['gnosisPrimaryMarketDailySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketDailySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarketDailySnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryMarketDailySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarketHourlySnapshot?: Resolver<Maybe<ResolversTypes['gnosisPrimaryMarketHourlySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarketHourlySnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryMarketHourlySnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarymarketHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryaccount?: Resolver<Maybe<ResolversTypes['gnosisPrimaryAccount']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryaccountArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryaccounts?: Resolver<Array<ResolversTypes['gnosisPrimaryAccount']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryaccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryposition?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPosition']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarypositionArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarypositions?: Resolver<Array<ResolversTypes['gnosisPrimaryPosition']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarypositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarypositionSnapshot?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPositionSnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarypositionSnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarypositionSnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryPositionSnapshot']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarypositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryactiveAccount?: Resolver<Maybe<ResolversTypes['gnosisPrimary_ActiveAccount']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryactiveAccountArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryactiveAccounts?: Resolver<Array<ResolversTypes['gnosisPrimary_ActiveAccount']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryactiveAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarypositionCounter?: Resolver<Maybe<ResolversTypes['gnosisPrimary_PositionCounter']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarypositionCounterArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarypositionCounters?: Resolver<Array<ResolversTypes['gnosisPrimary_PositionCounter']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarypositionCountersArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarydeposit?: Resolver<Maybe<ResolversTypes['gnosisPrimaryDeposit']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarydepositArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarydeposits?: Resolver<Array<ResolversTypes['gnosisPrimaryDeposit']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarydepositsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarywithdraw?: Resolver<Maybe<ResolversTypes['gnosisPrimaryWithdraw']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarywithdrawArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarywithdraws?: Resolver<Array<ResolversTypes['gnosisPrimaryWithdraw']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarywithdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryborrow?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBorrow']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryborrowArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryborrows?: Resolver<Array<ResolversTypes['gnosisPrimaryBorrow']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryborrowsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryrepay?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRepay']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryrepayArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryrepays?: Resolver<Array<ResolversTypes['gnosisPrimaryRepay']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryrepaysArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryliquidate?: Resolver<Maybe<ResolversTypes['gnosisPrimaryLiquidate']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryliquidateArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryliquidates?: Resolver<Array<ResolversTypes['gnosisPrimaryLiquidate']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryliquidatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarytransfer?: Resolver<Maybe<ResolversTypes['gnosisPrimaryTransfer']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarytransferArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarytransfers?: Resolver<Array<ResolversTypes['gnosisPrimaryTransfer']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarytransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryflashloan?: Resolver<Maybe<ResolversTypes['gnosisPrimaryFlashloan']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryflashloanArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryflashloans?: Resolver<Array<ResolversTypes['gnosisPrimaryFlashloan']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryflashloansArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarydefaultOracle?: Resolver<Maybe<ResolversTypes['gnosisPrimary_DefaultOracle']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarydefaultOracleArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarydefaultOracles?: Resolver<Array<ResolversTypes['gnosisPrimary_DefaultOracle']>, ParentType, ContextType, RequireFields<QuerygnosisPrimarydefaultOraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryflashLoanPremium?: Resolver<Maybe<ResolversTypes['gnosisPrimary_FlashLoanPremium']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryflashLoanPremiumArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryflashLoanPremiums?: Resolver<Array<ResolversTypes['gnosisPrimary_FlashLoanPremium']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryflashLoanPremiumsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryprotocol?: Resolver<Maybe<ResolversTypes['gnosisPrimaryProtocol']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryprotocolArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryprotocols?: Resolver<Array<ResolversTypes['gnosisPrimaryProtocol']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryprotocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryevent?: Resolver<Maybe<ResolversTypes['gnosisPrimaryEvent']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryeventArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryevents?: Resolver<Array<ResolversTypes['gnosisPrimaryEvent']>, ParentType, ContextType, RequireFields<QuerygnosisPrimaryeventsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimary_meta?: Resolver<Maybe<ResolversTypes['gnosisPrimary_Meta_']>, ParentType, ContextType, Partial<QuerygnosisPrimary_metaArgs>>;
    ethereumPrimarytoken?: Resolver<Maybe<ResolversTypes['ethereumPrimaryToken']>, ParentType, ContextType, RequireFields<QueryethereumPrimarytokenArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarytokens?: Resolver<Array<ResolversTypes['ethereumPrimaryToken']>, ParentType, ContextType, RequireFields<QueryethereumPrimarytokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryrewardToken?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRewardToken']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryrewardTokenArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryrewardTokens?: Resolver<Array<ResolversTypes['ethereumPrimaryRewardToken']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryrewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryinterestRate?: Resolver<Maybe<ResolversTypes['ethereumPrimaryInterestRate']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryinterestRateArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryinterestRates?: Resolver<Array<ResolversTypes['ethereumPrimaryInterestRate']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryinterestRatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryfee?: Resolver<Maybe<ResolversTypes['ethereumPrimaryFee']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryfeeArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryfees?: Resolver<Array<ResolversTypes['ethereumPrimaryFee']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryfeesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryrevenueDetail?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRevenueDetail']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryrevenueDetailArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryrevenueDetails?: Resolver<Array<ResolversTypes['ethereumPrimaryRevenueDetail']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryrevenueDetailsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryoracle?: Resolver<Maybe<ResolversTypes['ethereumPrimaryOracle']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryoracleArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryoracles?: Resolver<Array<ResolversTypes['ethereumPrimaryOracle']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryoraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarylendingProtocol?: Resolver<Maybe<ResolversTypes['ethereumPrimaryLendingProtocol']>, ParentType, ContextType, RequireFields<QueryethereumPrimarylendingProtocolArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarylendingProtocols?: Resolver<Array<ResolversTypes['ethereumPrimaryLendingProtocol']>, ParentType, ContextType, RequireFields<QueryethereumPrimarylendingProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarketList?: Resolver<Maybe<ResolversTypes['ethereumPrimary_MarketList']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketListArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarketLists?: Resolver<Array<ResolversTypes['ethereumPrimary_MarketList']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketListsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsDailySnapshot?: Resolver<Maybe<ResolversTypes['ethereumPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryusageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsDailySnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryusageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsHourlySnapshot?: Resolver<Maybe<ResolversTypes['ethereumPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryusageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsHourlySnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryusageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryfinancialsDailySnapshot?: Resolver<Maybe<ResolversTypes['ethereumPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryfinancialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryfinancialsDailySnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryfinancialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarket?: Resolver<Maybe<ResolversTypes['ethereumPrimaryMarket']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarkets?: Resolver<Array<ResolversTypes['ethereumPrimaryMarket']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarketDailySnapshot?: Resolver<Maybe<ResolversTypes['ethereumPrimaryMarketDailySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketDailySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarketDailySnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryMarketDailySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarketHourlySnapshot?: Resolver<Maybe<ResolversTypes['ethereumPrimaryMarketHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarketHourlySnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryMarketHourlySnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimarymarketHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryaccount?: Resolver<Maybe<ResolversTypes['ethereumPrimaryAccount']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryaccountArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryaccounts?: Resolver<Array<ResolversTypes['ethereumPrimaryAccount']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryaccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryposition?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPosition']>, ParentType, ContextType, RequireFields<QueryethereumPrimarypositionArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarypositions?: Resolver<Array<ResolversTypes['ethereumPrimaryPosition']>, ParentType, ContextType, RequireFields<QueryethereumPrimarypositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarypositionSnapshot?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimarypositionSnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarypositionSnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryPositionSnapshot']>, ParentType, ContextType, RequireFields<QueryethereumPrimarypositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryactiveAccount?: Resolver<Maybe<ResolversTypes['ethereumPrimary_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryactiveAccountArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryactiveAccounts?: Resolver<Array<ResolversTypes['ethereumPrimary_ActiveAccount']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryactiveAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarypositionCounter?: Resolver<Maybe<ResolversTypes['ethereumPrimary_PositionCounter']>, ParentType, ContextType, RequireFields<QueryethereumPrimarypositionCounterArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarypositionCounters?: Resolver<Array<ResolversTypes['ethereumPrimary_PositionCounter']>, ParentType, ContextType, RequireFields<QueryethereumPrimarypositionCountersArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarydeposit?: Resolver<Maybe<ResolversTypes['ethereumPrimaryDeposit']>, ParentType, ContextType, RequireFields<QueryethereumPrimarydepositArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarydeposits?: Resolver<Array<ResolversTypes['ethereumPrimaryDeposit']>, ParentType, ContextType, RequireFields<QueryethereumPrimarydepositsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarywithdraw?: Resolver<Maybe<ResolversTypes['ethereumPrimaryWithdraw']>, ParentType, ContextType, RequireFields<QueryethereumPrimarywithdrawArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarywithdraws?: Resolver<Array<ResolversTypes['ethereumPrimaryWithdraw']>, ParentType, ContextType, RequireFields<QueryethereumPrimarywithdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryborrow?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBorrow']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryborrowArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryborrows?: Resolver<Array<ResolversTypes['ethereumPrimaryBorrow']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryborrowsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryrepay?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRepay']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryrepayArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryrepays?: Resolver<Array<ResolversTypes['ethereumPrimaryRepay']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryrepaysArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryliquidate?: Resolver<Maybe<ResolversTypes['ethereumPrimaryLiquidate']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryliquidateArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryliquidates?: Resolver<Array<ResolversTypes['ethereumPrimaryLiquidate']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryliquidatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarytransfer?: Resolver<Maybe<ResolversTypes['ethereumPrimaryTransfer']>, ParentType, ContextType, RequireFields<QueryethereumPrimarytransferArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarytransfers?: Resolver<Array<ResolversTypes['ethereumPrimaryTransfer']>, ParentType, ContextType, RequireFields<QueryethereumPrimarytransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryflashloan?: Resolver<Maybe<ResolversTypes['ethereumPrimaryFlashloan']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryflashloanArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryflashloans?: Resolver<Array<ResolversTypes['ethereumPrimaryFlashloan']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryflashloansArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarydefaultOracle?: Resolver<Maybe<ResolversTypes['ethereumPrimary_DefaultOracle']>, ParentType, ContextType, RequireFields<QueryethereumPrimarydefaultOracleArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarydefaultOracles?: Resolver<Array<ResolversTypes['ethereumPrimary_DefaultOracle']>, ParentType, ContextType, RequireFields<QueryethereumPrimarydefaultOraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryflashLoanPremium?: Resolver<Maybe<ResolversTypes['ethereumPrimary_FlashLoanPremium']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryflashLoanPremiumArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryflashLoanPremiums?: Resolver<Array<ResolversTypes['ethereumPrimary_FlashLoanPremium']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryflashLoanPremiumsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryprotocol?: Resolver<Maybe<ResolversTypes['ethereumPrimaryProtocol']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryprotocolArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryprotocols?: Resolver<Array<ResolversTypes['ethereumPrimaryProtocol']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryprotocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryevent?: Resolver<Maybe<ResolversTypes['ethereumPrimaryEvent']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryeventArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryevents?: Resolver<Array<ResolversTypes['ethereumPrimaryEvent']>, ParentType, ContextType, RequireFields<QueryethereumPrimaryeventsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimary_meta?: Resolver<Maybe<ResolversTypes['ethereumPrimary_Meta_']>, ParentType, ContextType, Partial<QueryethereumPrimary_metaArgs>>;
}>;
export type SubscriptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
    gnosisPrimarytoken?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryToken']>, "gnosisPrimarytoken", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarytokenArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarytokens?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryToken']>, "gnosisPrimarytokens", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarytokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryrewardToken?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryRewardToken']>, "gnosisPrimaryrewardToken", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryrewardTokenArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryrewardTokens?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryRewardToken']>, "gnosisPrimaryrewardTokens", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryrewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryinterestRate?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryInterestRate']>, "gnosisPrimaryinterestRate", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryinterestRateArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryinterestRates?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryInterestRate']>, "gnosisPrimaryinterestRates", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryinterestRatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryfee?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryFee']>, "gnosisPrimaryfee", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryfeeArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryfees?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryFee']>, "gnosisPrimaryfees", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryfeesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryrevenueDetail?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryRevenueDetail']>, "gnosisPrimaryrevenueDetail", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryrevenueDetailArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryrevenueDetails?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryRevenueDetail']>, "gnosisPrimaryrevenueDetails", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryrevenueDetailsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryoracle?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryOracle']>, "gnosisPrimaryoracle", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryoracleArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryoracles?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryOracle']>, "gnosisPrimaryoracles", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryoraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarylendingProtocol?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryLendingProtocol']>, "gnosisPrimarylendingProtocol", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarylendingProtocolArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarylendingProtocols?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryLendingProtocol']>, "gnosisPrimarylendingProtocols", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarylendingProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarketList?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimary_MarketList']>, "gnosisPrimarymarketList", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketListArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarketLists?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimary_MarketList']>, "gnosisPrimarymarketLists", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketListsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryUsageMetricsDailySnapshot']>, "gnosisPrimaryusageMetricsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryusageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsDailySnapshot']>, "gnosisPrimaryusageMetricsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryusageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryUsageMetricsHourlySnapshot']>, "gnosisPrimaryusageMetricsHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryusageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryusageMetricsHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsHourlySnapshot']>, "gnosisPrimaryusageMetricsHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryusageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryfinancialsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryFinancialsDailySnapshot']>, "gnosisPrimaryfinancialsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryfinancialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryfinancialsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryFinancialsDailySnapshot']>, "gnosisPrimaryfinancialsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryfinancialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarket?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryMarket']>, "gnosisPrimarymarket", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarkets?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryMarket']>, "gnosisPrimarymarkets", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarketDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryMarketDailySnapshot']>, "gnosisPrimarymarketDailySnapshot", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketDailySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarketDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryMarketDailySnapshot']>, "gnosisPrimarymarketDailySnapshots", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarymarketHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryMarketHourlySnapshot']>, "gnosisPrimarymarketHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarymarketHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryMarketHourlySnapshot']>, "gnosisPrimarymarketHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarymarketHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryaccount?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryAccount']>, "gnosisPrimaryaccount", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryaccountArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryaccounts?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryAccount']>, "gnosisPrimaryaccounts", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryaccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryposition?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryPosition']>, "gnosisPrimaryposition", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarypositionArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarypositions?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryPosition']>, "gnosisPrimarypositions", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarypositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarypositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryPositionSnapshot']>, "gnosisPrimarypositionSnapshot", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarypositionSnapshotArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarypositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryPositionSnapshot']>, "gnosisPrimarypositionSnapshots", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarypositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryactiveAccount?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimary_ActiveAccount']>, "gnosisPrimaryactiveAccount", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryactiveAccountArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryactiveAccounts?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimary_ActiveAccount']>, "gnosisPrimaryactiveAccounts", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryactiveAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarypositionCounter?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimary_PositionCounter']>, "gnosisPrimarypositionCounter", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarypositionCounterArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarypositionCounters?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimary_PositionCounter']>, "gnosisPrimarypositionCounters", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarypositionCountersArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarydeposit?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryDeposit']>, "gnosisPrimarydeposit", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarydepositArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarydeposits?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryDeposit']>, "gnosisPrimarydeposits", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarydepositsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarywithdraw?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryWithdraw']>, "gnosisPrimarywithdraw", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarywithdrawArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarywithdraws?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryWithdraw']>, "gnosisPrimarywithdraws", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarywithdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryborrow?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryBorrow']>, "gnosisPrimaryborrow", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryborrowArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryborrows?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryBorrow']>, "gnosisPrimaryborrows", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryborrowsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryrepay?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryRepay']>, "gnosisPrimaryrepay", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryrepayArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryrepays?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryRepay']>, "gnosisPrimaryrepays", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryrepaysArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryliquidate?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryLiquidate']>, "gnosisPrimaryliquidate", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryliquidateArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryliquidates?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryLiquidate']>, "gnosisPrimaryliquidates", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryliquidatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarytransfer?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryTransfer']>, "gnosisPrimarytransfer", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarytransferArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarytransfers?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryTransfer']>, "gnosisPrimarytransfers", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarytransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryflashloan?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryFlashloan']>, "gnosisPrimaryflashloan", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryflashloanArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryflashloans?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryFlashloan']>, "gnosisPrimaryflashloans", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryflashloansArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimarydefaultOracle?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimary_DefaultOracle']>, "gnosisPrimarydefaultOracle", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarydefaultOracleArgs, 'id' | 'subgraphError'>>;
    gnosisPrimarydefaultOracles?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimary_DefaultOracle']>, "gnosisPrimarydefaultOracles", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimarydefaultOraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryflashLoanPremium?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimary_FlashLoanPremium']>, "gnosisPrimaryflashLoanPremium", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryflashLoanPremiumArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryflashLoanPremiums?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimary_FlashLoanPremium']>, "gnosisPrimaryflashLoanPremiums", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryflashLoanPremiumsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryprotocol?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryProtocol']>, "gnosisPrimaryprotocol", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryprotocolArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryprotocols?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryProtocol']>, "gnosisPrimaryprotocols", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryprotocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimaryevent?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimaryEvent']>, "gnosisPrimaryevent", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryeventArgs, 'id' | 'subgraphError'>>;
    gnosisPrimaryevents?: SubscriptionResolver<Array<ResolversTypes['gnosisPrimaryEvent']>, "gnosisPrimaryevents", ParentType, ContextType, RequireFields<SubscriptiongnosisPrimaryeventsArgs, 'skip' | 'first' | 'subgraphError'>>;
    gnosisPrimary_meta?: SubscriptionResolver<Maybe<ResolversTypes['gnosisPrimary_Meta_']>, "gnosisPrimary_meta", ParentType, ContextType, Partial<SubscriptiongnosisPrimary_metaArgs>>;
    ethereumPrimarytoken?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryToken']>, "ethereumPrimarytoken", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarytokenArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarytokens?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryToken']>, "ethereumPrimarytokens", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarytokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryrewardToken?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryRewardToken']>, "ethereumPrimaryrewardToken", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryrewardTokenArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryrewardTokens?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryRewardToken']>, "ethereumPrimaryrewardTokens", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryrewardTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryinterestRate?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryInterestRate']>, "ethereumPrimaryinterestRate", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryinterestRateArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryinterestRates?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryInterestRate']>, "ethereumPrimaryinterestRates", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryinterestRatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryfee?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryFee']>, "ethereumPrimaryfee", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryfeeArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryfees?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryFee']>, "ethereumPrimaryfees", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryfeesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryrevenueDetail?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryRevenueDetail']>, "ethereumPrimaryrevenueDetail", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryrevenueDetailArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryrevenueDetails?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryRevenueDetail']>, "ethereumPrimaryrevenueDetails", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryrevenueDetailsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryoracle?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryOracle']>, "ethereumPrimaryoracle", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryoracleArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryoracles?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryOracle']>, "ethereumPrimaryoracles", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryoraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarylendingProtocol?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryLendingProtocol']>, "ethereumPrimarylendingProtocol", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarylendingProtocolArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarylendingProtocols?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryLendingProtocol']>, "ethereumPrimarylendingProtocols", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarylendingProtocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarketList?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimary_MarketList']>, "ethereumPrimarymarketList", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketListArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarketLists?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimary_MarketList']>, "ethereumPrimarymarketLists", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketListsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryUsageMetricsDailySnapshot']>, "ethereumPrimaryusageMetricsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryusageMetricsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsDailySnapshot']>, "ethereumPrimaryusageMetricsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryusageMetricsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryUsageMetricsHourlySnapshot']>, "ethereumPrimaryusageMetricsHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryusageMetricsHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryusageMetricsHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsHourlySnapshot']>, "ethereumPrimaryusageMetricsHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryusageMetricsHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryfinancialsDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryFinancialsDailySnapshot']>, "ethereumPrimaryfinancialsDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryfinancialsDailySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryfinancialsDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryFinancialsDailySnapshot']>, "ethereumPrimaryfinancialsDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryfinancialsDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarket?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryMarket']>, "ethereumPrimarymarket", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarkets?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryMarket']>, "ethereumPrimarymarkets", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarketDailySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryMarketDailySnapshot']>, "ethereumPrimarymarketDailySnapshot", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketDailySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarketDailySnapshots?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryMarketDailySnapshot']>, "ethereumPrimarymarketDailySnapshots", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketDailySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarymarketHourlySnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryMarketHourlySnapshot']>, "ethereumPrimarymarketHourlySnapshot", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketHourlySnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarymarketHourlySnapshots?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryMarketHourlySnapshot']>, "ethereumPrimarymarketHourlySnapshots", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarymarketHourlySnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryaccount?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryAccount']>, "ethereumPrimaryaccount", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryaccountArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryaccounts?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryAccount']>, "ethereumPrimaryaccounts", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryaccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryposition?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryPosition']>, "ethereumPrimaryposition", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarypositionArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarypositions?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryPosition']>, "ethereumPrimarypositions", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarypositionsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarypositionSnapshot?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryPositionSnapshot']>, "ethereumPrimarypositionSnapshot", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarypositionSnapshotArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarypositionSnapshots?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryPositionSnapshot']>, "ethereumPrimarypositionSnapshots", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarypositionSnapshotsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryactiveAccount?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimary_ActiveAccount']>, "ethereumPrimaryactiveAccount", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryactiveAccountArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryactiveAccounts?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimary_ActiveAccount']>, "ethereumPrimaryactiveAccounts", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryactiveAccountsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarypositionCounter?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimary_PositionCounter']>, "ethereumPrimarypositionCounter", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarypositionCounterArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarypositionCounters?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimary_PositionCounter']>, "ethereumPrimarypositionCounters", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarypositionCountersArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarydeposit?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryDeposit']>, "ethereumPrimarydeposit", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarydepositArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarydeposits?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryDeposit']>, "ethereumPrimarydeposits", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarydepositsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarywithdraw?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryWithdraw']>, "ethereumPrimarywithdraw", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarywithdrawArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarywithdraws?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryWithdraw']>, "ethereumPrimarywithdraws", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarywithdrawsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryborrow?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryBorrow']>, "ethereumPrimaryborrow", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryborrowArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryborrows?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryBorrow']>, "ethereumPrimaryborrows", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryborrowsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryrepay?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryRepay']>, "ethereumPrimaryrepay", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryrepayArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryrepays?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryRepay']>, "ethereumPrimaryrepays", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryrepaysArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryliquidate?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryLiquidate']>, "ethereumPrimaryliquidate", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryliquidateArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryliquidates?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryLiquidate']>, "ethereumPrimaryliquidates", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryliquidatesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarytransfer?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryTransfer']>, "ethereumPrimarytransfer", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarytransferArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarytransfers?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryTransfer']>, "ethereumPrimarytransfers", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarytransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryflashloan?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryFlashloan']>, "ethereumPrimaryflashloan", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryflashloanArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryflashloans?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryFlashloan']>, "ethereumPrimaryflashloans", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryflashloansArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimarydefaultOracle?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimary_DefaultOracle']>, "ethereumPrimarydefaultOracle", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarydefaultOracleArgs, 'id' | 'subgraphError'>>;
    ethereumPrimarydefaultOracles?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimary_DefaultOracle']>, "ethereumPrimarydefaultOracles", ParentType, ContextType, RequireFields<SubscriptionethereumPrimarydefaultOraclesArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryflashLoanPremium?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimary_FlashLoanPremium']>, "ethereumPrimaryflashLoanPremium", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryflashLoanPremiumArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryflashLoanPremiums?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimary_FlashLoanPremium']>, "ethereumPrimaryflashLoanPremiums", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryflashLoanPremiumsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryprotocol?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryProtocol']>, "ethereumPrimaryprotocol", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryprotocolArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryprotocols?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryProtocol']>, "ethereumPrimaryprotocols", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryprotocolsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimaryevent?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimaryEvent']>, "ethereumPrimaryevent", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryeventArgs, 'id' | 'subgraphError'>>;
    ethereumPrimaryevents?: SubscriptionResolver<Array<ResolversTypes['ethereumPrimaryEvent']>, "ethereumPrimaryevents", ParentType, ContextType, RequireFields<SubscriptionethereumPrimaryeventsArgs, 'skip' | 'first' | 'subgraphError'>>;
    ethereumPrimary_meta?: SubscriptionResolver<Maybe<ResolversTypes['ethereumPrimary_Meta_']>, "ethereumPrimary_meta", ParentType, ContextType, Partial<SubscriptionethereumPrimary_metaArgs>>;
}>;
export type gnosisPrimaryAccountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryAccount'] = ResolversParentTypes['gnosisPrimaryAccount']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['gnosisPrimaryPosition']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountpositionsArgs, 'skip' | 'first'>>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    deposits?: Resolver<Array<ResolversTypes['gnosisPrimaryDeposit']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountdepositsArgs, 'skip' | 'first'>>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdraws?: Resolver<Array<ResolversTypes['gnosisPrimaryWithdraw']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountwithdrawsArgs, 'skip' | 'first'>>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrows?: Resolver<Array<ResolversTypes['gnosisPrimaryBorrow']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountborrowsArgs, 'skip' | 'first'>>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repays?: Resolver<Array<ResolversTypes['gnosisPrimaryRepay']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountrepaysArgs, 'skip' | 'first'>>;
    liquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidates?: Resolver<Array<ResolversTypes['gnosisPrimaryLiquidate']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountliquidatesArgs, 'skip' | 'first'>>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidations?: Resolver<Array<ResolversTypes['gnosisPrimaryLiquidate']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountliquidationsArgs, 'skip' | 'first'>>;
    transferredCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transfers?: Resolver<Array<ResolversTypes['gnosisPrimaryTransfer']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccounttransfersArgs, 'skip' | 'first'>>;
    receivedCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    receives?: Resolver<Array<ResolversTypes['gnosisPrimaryTransfer']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountreceivesArgs, 'skip' | 'first'>>;
    flashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    flashloans?: Resolver<Array<ResolversTypes['gnosisPrimaryFlashloan']>, ParentType, ContextType, RequireFields<gnosisPrimaryAccountflashloansArgs, 'skip' | 'first'>>;
    rewardsClaimedUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    _enabledCollaterals?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryMarket']>>, ParentType, ContextType, RequireFields<gnosisPrimaryAccount_enabledCollateralsArgs, 'skip' | 'first'>>;
    _eMode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface gnosisPrimaryBigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['gnosisPrimaryBigDecimal'], any> {
    name: 'gnosisPrimaryBigDecimal';
}
export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
    name: 'BigInt';
}
export type gnosisPrimaryBorrowResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryBorrow'] = ResolversParentTypes['gnosisPrimaryBorrow']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['gnosisPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['gnosisPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface gnosisPrimaryBytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['gnosisPrimaryBytes'], any> {
    name: 'gnosisPrimaryBytes';
}
export type gnosisPrimaryDepositResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryDeposit'] = ResolversParentTypes['gnosisPrimaryDeposit']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['gnosisPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['gnosisPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryEvent'] = ResolversParentTypes['gnosisPrimaryEvent']> = ResolversObject<{
    __resolveType: TypeResolveFn<'gnosisPrimaryBorrow' | 'gnosisPrimaryDeposit' | 'gnosisPrimaryFlashloan' | 'gnosisPrimaryLiquidate' | 'gnosisPrimaryRepay' | 'gnosisPrimaryTransfer' | 'gnosisPrimaryWithdraw', ParentType, ContextType>;
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
}>;
export type gnosisPrimaryFeeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryFee'] = ResolversParentTypes['gnosisPrimaryFee']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    rate?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    flatFee?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    type?: Resolver<ResolversTypes['gnosisPrimaryFeeType'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryFinancialsDailySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryFinancialsDailySnapshot'] = ResolversParentTypes['gnosisPrimaryFinancialsDailySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    days?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['gnosisPrimaryLendingProtocol'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    mintedTokenSupplies?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    dailySupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyWithdrawUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyRepayUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyTransferUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyFlashloanUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryFlashloanResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryFlashloan'] = ResolversParentTypes['gnosisPrimaryFlashloan']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['gnosisPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    feeAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    feeAmountUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface gnosisPrimaryInt8ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['gnosisPrimaryInt8'], any> {
    name: 'gnosisPrimaryInt8';
}
export type gnosisPrimaryInterestRateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryInterestRate'] = ResolversParentTypes['gnosisPrimaryInterestRate']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    rate?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    duration?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    maturityBlock?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    side?: Resolver<ResolversTypes['gnosisPrimaryInterestRateSide'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['gnosisPrimaryInterestRateType'], ParentType, ContextType>;
    tranche?: Resolver<Maybe<ResolversTypes['gnosisPrimaryTranche']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryLendingProtocolResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryLendingProtocol'] = ResolversParentTypes['gnosisPrimaryLendingProtocol']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    network?: Resolver<ResolversTypes['gnosisPrimaryNetwork'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['gnosisPrimaryProtocolType'], ParentType, ContextType>;
    lendingType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryLendingType']>, ParentType, ContextType>;
    lenderPermissionType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPermissionType']>, ParentType, ContextType>;
    borrowerPermissionType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPermissionType']>, ParentType, ContextType>;
    poolCreatorPermissionType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPermissionType']>, ParentType, ContextType>;
    riskType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRiskType']>, ParentType, ContextType>;
    collateralizationType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryCollateralizationType']>, ParentType, ContextType>;
    mintedTokens?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryToken']>>, ParentType, ContextType, RequireFields<gnosisPrimaryLendingProtocolmintedTokensArgs, 'skip' | 'first'>>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<gnosisPrimaryLendingProtocolrewardTokensArgs, 'skip' | 'first'>>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    fees?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryFee']>>, ParentType, ContextType, RequireFields<gnosisPrimaryLendingProtocolfeesArgs, 'skip' | 'first'>>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    mintedTokenSupplies?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    flashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryBigDecimal']>>, ParentType, ContextType>;
    dailyUsageMetrics?: Resolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryLendingProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
    hourlyUsageMetrics?: Resolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryLendingProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
    financialMetrics?: Resolver<Array<ResolversTypes['gnosisPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryLendingProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
    markets?: Resolver<Array<ResolversTypes['gnosisPrimaryMarket']>, ParentType, ContextType, RequireFields<gnosisPrimaryLendingProtocolmarketsArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryLiquidateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryLiquidate'] = ResolversParentTypes['gnosisPrimaryLiquidate']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidator?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    liquidatee?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['gnosisPrimaryPosition']>, ParentType, ContextType, RequireFields<gnosisPrimaryLiquidatepositionsArgs, 'skip' | 'first'>>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    profitUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryMarketResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryMarket'] = ResolversParentTypes['gnosisPrimaryMarket']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['gnosisPrimaryLendingProtocol'], ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    canBorrowFrom?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    canUseAsCollateral?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    maximumLTV?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    liquidationThreshold?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    liquidationPenalty?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    canIsolate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    oracle?: Resolver<Maybe<ResolversTypes['gnosisPrimaryOracle']>, ParentType, ContextType>;
    relation?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBytes']>, ParentType, ContextType>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketrewardTokensArgs, 'skip' | 'first'>>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryBigDecimal']>>, ParentType, ContextType>;
    stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    inputToken?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    inputTokenBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    inputTokenPriceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    outputToken?: Resolver<Maybe<ResolversTypes['gnosisPrimaryToken']>, ParentType, ContextType>;
    outputTokenSupply?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    outputTokenPriceUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    exchangeRate?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    rates?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryInterestRate']>>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketratesArgs, 'skip' | 'first'>>;
    reserves?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    reserveFactor?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    borrowedToken?: Resolver<Maybe<ResolversTypes['gnosisPrimaryToken']>, ParentType, ContextType>;
    variableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    stableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    indexLastUpdatedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    supplyIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    supplyCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    borrowIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    borrowCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTransferUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeFlashloanUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    transactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    flashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueTransferrers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueFlashloaners?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['gnosisPrimaryPosition']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketpositionsArgs, 'skip' | 'first'>>;
    positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lendingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailySnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryMarketDailySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketdailySnapshotsArgs, 'skip' | 'first'>>;
    hourlySnapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryMarketHourlySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarkethourlySnapshotsArgs, 'skip' | 'first'>>;
    deposits?: Resolver<Array<ResolversTypes['gnosisPrimaryDeposit']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketdepositsArgs, 'skip' | 'first'>>;
    withdraws?: Resolver<Array<ResolversTypes['gnosisPrimaryWithdraw']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketwithdrawsArgs, 'skip' | 'first'>>;
    borrows?: Resolver<Array<ResolversTypes['gnosisPrimaryBorrow']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketborrowsArgs, 'skip' | 'first'>>;
    repays?: Resolver<Array<ResolversTypes['gnosisPrimaryRepay']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketrepaysArgs, 'skip' | 'first'>>;
    liquidates?: Resolver<Array<ResolversTypes['gnosisPrimaryLiquidate']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketliquidatesArgs, 'skip' | 'first'>>;
    transfers?: Resolver<Array<ResolversTypes['gnosisPrimaryTransfer']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarkettransfersArgs, 'skip' | 'first'>>;
    flashloans?: Resolver<Array<ResolversTypes['gnosisPrimaryFlashloan']>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketflashloansArgs, 'skip' | 'first'>>;
    _baseTrackingBorrowSpeed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    _baseTrackingSupplySpeed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    _vToken?: Resolver<Maybe<ResolversTypes['gnosisPrimaryToken']>, ParentType, ContextType>;
    _sToken?: Resolver<Maybe<ResolversTypes['gnosisPrimaryToken']>, ParentType, ContextType>;
    _prePauseState?: Resolver<Maybe<Array<ResolversTypes['Boolean']>>, ParentType, ContextType>;
    _lastRewardsUpdated?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    _liquidationProtocolFee?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    _siloedBorrowing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryMarketDailySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryMarketDailySnapshot'] = ResolversParentTypes['gnosisPrimaryMarketDailySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    days?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['gnosisPrimaryLendingProtocol'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    relation?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBytes']>, ParentType, ContextType>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketDailySnapshotrewardTokensArgs, 'skip' | 'first'>>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryBigDecimal']>>, ParentType, ContextType>;
    stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    inputTokenBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    inputTokenPriceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    outputTokenSupply?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    outputTokenPriceUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    exchangeRate?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    rates?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryInterestRate']>>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketDailySnapshotratesArgs, 'skip' | 'first'>>;
    reserves?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    reserveFactor?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    variableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    stableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    supplyCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    borrowCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailySupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeDeposit?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeBorrow?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeLiquidate?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyWithdrawUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeWithdraw?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    dailyRepayUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeRepay?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    dailyTransferUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeTransferUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyFlashloanUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeFlashloan?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeFlashloanUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveTransferrers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveFlashloaners?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyBorrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyRepayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyLiquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyTransferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyFlashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lendingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLendingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveBorrowingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryMarketHourlySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryMarketHourlySnapshot'] = ResolversParentTypes['gnosisPrimaryMarketHourlySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hours?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['gnosisPrimaryLendingProtocol'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    relation?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBytes']>, ParentType, ContextType>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketHourlySnapshotrewardTokensArgs, 'skip' | 'first'>>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryBigDecimal']>>, ParentType, ContextType>;
    stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    inputTokenBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    inputTokenPriceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    outputTokenSupply?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    outputTokenPriceUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    exchangeRate?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    rates?: Resolver<Maybe<Array<ResolversTypes['gnosisPrimaryInterestRate']>>, ParentType, ContextType, RequireFields<gnosisPrimaryMarketHourlySnapshotratesArgs, 'skip' | 'first'>>;
    reserves?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    variableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    stableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlySupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyWithdrawUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyRepayUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyTransferUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyFlashloanUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryOracleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryOracle'] = ResolversParentTypes['gnosisPrimaryOracle']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    oracleAddress?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    blockCreated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestampCreated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    isUSD?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    hashEnded?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBytes']>, ParentType, ContextType>;
    oracleSource?: Resolver<Maybe<ResolversTypes['gnosisPrimaryOracleSource']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryPosition'] = ResolversParentTypes['gnosisPrimaryPosition']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    hashOpened?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hashClosed?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBytes']>, ParentType, ContextType>;
    blockNumberOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestampOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    blockNumberClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    timestampClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    side?: Resolver<ResolversTypes['gnosisPrimaryPositionSide'], ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['gnosisPrimaryInterestRateType']>, ParentType, ContextType>;
    isCollateral?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    isIsolated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    balance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    principal?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    deposits?: Resolver<Array<ResolversTypes['gnosisPrimaryDeposit']>, ParentType, ContextType, RequireFields<gnosisPrimaryPositiondepositsArgs, 'skip' | 'first'>>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdraws?: Resolver<Array<ResolversTypes['gnosisPrimaryWithdraw']>, ParentType, ContextType, RequireFields<gnosisPrimaryPositionwithdrawsArgs, 'skip' | 'first'>>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrows?: Resolver<Array<ResolversTypes['gnosisPrimaryBorrow']>, ParentType, ContextType, RequireFields<gnosisPrimaryPositionborrowsArgs, 'skip' | 'first'>>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repays?: Resolver<Array<ResolversTypes['gnosisPrimaryRepay']>, ParentType, ContextType, RequireFields<gnosisPrimaryPositionrepaysArgs, 'skip' | 'first'>>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidations?: Resolver<Array<ResolversTypes['gnosisPrimaryLiquidate']>, ParentType, ContextType, RequireFields<gnosisPrimaryPositionliquidationsArgs, 'skip' | 'first'>>;
    transferredCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    receivedCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transfers?: Resolver<Array<ResolversTypes['gnosisPrimaryTransfer']>, ParentType, ContextType, RequireFields<gnosisPrimaryPositiontransfersArgs, 'skip' | 'first'>>;
    snapshots?: Resolver<Array<ResolversTypes['gnosisPrimaryPositionSnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryPositionsnapshotsArgs, 'skip' | 'first'>>;
    _eMode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryPositionSnapshot'] = ResolversParentTypes['gnosisPrimaryPositionSnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['gnosisPrimaryPosition'], ParentType, ContextType>;
    balance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    balanceUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    principal?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryProtocolResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryProtocol'] = ResolversParentTypes['gnosisPrimaryProtocol']> = ResolversObject<{
    __resolveType: TypeResolveFn<'gnosisPrimaryLendingProtocol', ParentType, ContextType>;
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    network?: Resolver<ResolversTypes['gnosisPrimaryNetwork'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['gnosisPrimaryProtocolType'], ParentType, ContextType>;
    lendingType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryLendingType']>, ParentType, ContextType>;
    lenderPermissionType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPermissionType']>, ParentType, ContextType>;
    borrowerPermissionType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPermissionType']>, ParentType, ContextType>;
    poolCreatorPermissionType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryPermissionType']>, ParentType, ContextType>;
    riskType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryRiskType']>, ParentType, ContextType>;
    collateralizationType?: Resolver<Maybe<ResolversTypes['gnosisPrimaryCollateralizationType']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyUsageMetrics?: Resolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
    hourlyUsageMetrics?: Resolver<Array<ResolversTypes['gnosisPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
    financialMetrics?: Resolver<Array<ResolversTypes['gnosisPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<gnosisPrimaryProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
}>;
export type gnosisPrimaryRepayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryRepay'] = ResolversParentTypes['gnosisPrimaryRepay']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['gnosisPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['gnosisPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryRevenueDetailResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryRevenueDetail'] = ResolversParentTypes['gnosisPrimaryRevenueDetail']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    sources?: Resolver<Array<ResolversTypes['gnosisPrimaryFee']>, ParentType, ContextType, RequireFields<gnosisPrimaryRevenueDetailsourcesArgs, 'skip' | 'first'>>;
    amountsUSD?: Resolver<Array<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryRewardTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryRewardToken'] = ResolversParentTypes['gnosisPrimaryRewardToken']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    token?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['gnosisPrimaryRewardTokenType'], ParentType, ContextType>;
    _distributionEnd?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryToken'] = ResolversParentTypes['gnosisPrimaryToken']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    decimals?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lastPriceUSD?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBigDecimal']>, ParentType, ContextType>;
    lastPriceBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['gnosisPrimaryTokenType']>, ParentType, ContextType>;
    _market?: Resolver<Maybe<ResolversTypes['gnosisPrimaryMarket']>, ParentType, ContextType>;
    _iavsTokenType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryTransfer'] = ResolversParentTypes['gnosisPrimaryTransfer']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    sender?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    receiver?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['gnosisPrimaryPosition']>, ParentType, ContextType, RequireFields<gnosisPrimaryTransferpositionsArgs, 'skip' | 'first'>>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryUsageMetricsDailySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryUsageMetricsDailySnapshot'] = ResolversParentTypes['gnosisPrimaryUsageMetricsDailySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    days?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['gnosisPrimaryLendingProtocol'], ParentType, ContextType>;
    dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyBorrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyRepayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyLiquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyTransferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyFlashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActivePositions?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryUsageMetricsHourlySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryUsageMetricsHourlySnapshot'] = ResolversParentTypes['gnosisPrimaryUsageMetricsHourlySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hours?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['gnosisPrimaryLendingProtocol'], ParentType, ContextType>;
    hourlyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyBorrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyRepayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyLiquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimaryWithdrawResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimaryWithdraw'] = ResolversParentTypes['gnosisPrimaryWithdraw']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['gnosisPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['gnosisPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['gnosisPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['gnosisPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['gnosisPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimary_ActiveAccountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimary_ActiveAccount'] = ResolversParentTypes['gnosisPrimary_ActiveAccount']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimary_Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimary_Block_'] = ResolversParentTypes['gnosisPrimary_Block_']> = ResolversObject<{
    hash?: Resolver<Maybe<ResolversTypes['gnosisPrimaryBytes']>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimary_DefaultOracleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimary_DefaultOracle'] = ResolversParentTypes['gnosisPrimary_DefaultOracle']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    oracle?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimary_FlashLoanPremiumResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimary_FlashLoanPremium'] = ResolversParentTypes['gnosisPrimary_FlashLoanPremium']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    premiumRateTotal?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    premiumRateToProtocol?: Resolver<ResolversTypes['gnosisPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimary_MarketListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimary_MarketList'] = ResolversParentTypes['gnosisPrimary_MarketList']> = ResolversObject<{
    id?: Resolver<ResolversTypes['gnosisPrimaryBytes'], ParentType, ContextType>;
    markets?: Resolver<Array<ResolversTypes['gnosisPrimaryBytes']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimary_Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimary_Meta_'] = ResolversParentTypes['gnosisPrimary_Meta_']> = ResolversObject<{
    block?: Resolver<ResolversTypes['gnosisPrimary_Block_'], ParentType, ContextType>;
    deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type gnosisPrimary_PositionCounterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['gnosisPrimary_PositionCounter'] = ResolversParentTypes['gnosisPrimary_PositionCounter']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    nextCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lastTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryAccountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryAccount'] = ResolversParentTypes['ethereumPrimaryAccount']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['ethereumPrimaryPosition']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountpositionsArgs, 'skip' | 'first'>>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    deposits?: Resolver<Array<ResolversTypes['ethereumPrimaryDeposit']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountdepositsArgs, 'skip' | 'first'>>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdraws?: Resolver<Array<ResolversTypes['ethereumPrimaryWithdraw']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountwithdrawsArgs, 'skip' | 'first'>>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrows?: Resolver<Array<ResolversTypes['ethereumPrimaryBorrow']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountborrowsArgs, 'skip' | 'first'>>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repays?: Resolver<Array<ResolversTypes['ethereumPrimaryRepay']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountrepaysArgs, 'skip' | 'first'>>;
    liquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidates?: Resolver<Array<ResolversTypes['ethereumPrimaryLiquidate']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountliquidatesArgs, 'skip' | 'first'>>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidations?: Resolver<Array<ResolversTypes['ethereumPrimaryLiquidate']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountliquidationsArgs, 'skip' | 'first'>>;
    transferredCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transfers?: Resolver<Array<ResolversTypes['ethereumPrimaryTransfer']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccounttransfersArgs, 'skip' | 'first'>>;
    receivedCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    receives?: Resolver<Array<ResolversTypes['ethereumPrimaryTransfer']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountreceivesArgs, 'skip' | 'first'>>;
    flashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    flashloans?: Resolver<Array<ResolversTypes['ethereumPrimaryFlashloan']>, ParentType, ContextType, RequireFields<ethereumPrimaryAccountflashloansArgs, 'skip' | 'first'>>;
    rewardsClaimedUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    _enabledCollaterals?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryMarket']>>, ParentType, ContextType, RequireFields<ethereumPrimaryAccount_enabledCollateralsArgs, 'skip' | 'first'>>;
    _eMode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface ethereumPrimaryBigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ethereumPrimaryBigDecimal'], any> {
    name: 'ethereumPrimaryBigDecimal';
}
export type ethereumPrimaryBorrowResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryBorrow'] = ResolversParentTypes['ethereumPrimaryBorrow']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['ethereumPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['ethereumPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface ethereumPrimaryBytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ethereumPrimaryBytes'], any> {
    name: 'ethereumPrimaryBytes';
}
export type ethereumPrimaryDepositResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryDeposit'] = ResolversParentTypes['ethereumPrimaryDeposit']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['ethereumPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['ethereumPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryEvent'] = ResolversParentTypes['ethereumPrimaryEvent']> = ResolversObject<{
    __resolveType: TypeResolveFn<'ethereumPrimaryBorrow' | 'ethereumPrimaryDeposit' | 'ethereumPrimaryFlashloan' | 'ethereumPrimaryLiquidate' | 'ethereumPrimaryRepay' | 'ethereumPrimaryTransfer' | 'ethereumPrimaryWithdraw', ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
}>;
export type ethereumPrimaryFeeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryFee'] = ResolversParentTypes['ethereumPrimaryFee']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    rate?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    flatFee?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    type?: Resolver<ResolversTypes['ethereumPrimaryFeeType'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryFinancialsDailySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryFinancialsDailySnapshot'] = ResolversParentTypes['ethereumPrimaryFinancialsDailySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    days?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['ethereumPrimaryLendingProtocol'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    mintedTokenSupplies?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    dailySupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyWithdrawUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyRepayUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyTransferUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyFlashloanUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryFlashloanResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryFlashloan'] = ResolversParentTypes['ethereumPrimaryFlashloan']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['ethereumPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    feeAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    feeAmountUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface ethereumPrimaryInt8ScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['ethereumPrimaryInt8'], any> {
    name: 'ethereumPrimaryInt8';
}
export type ethereumPrimaryInterestRateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryInterestRate'] = ResolversParentTypes['ethereumPrimaryInterestRate']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    rate?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    duration?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    maturityBlock?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    side?: Resolver<ResolversTypes['ethereumPrimaryInterestRateSide'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['ethereumPrimaryInterestRateType'], ParentType, ContextType>;
    tranche?: Resolver<Maybe<ResolversTypes['ethereumPrimaryTranche']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryLendingProtocolResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryLendingProtocol'] = ResolversParentTypes['ethereumPrimaryLendingProtocol']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    network?: Resolver<ResolversTypes['ethereumPrimaryNetwork'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['ethereumPrimaryProtocolType'], ParentType, ContextType>;
    lendingType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryLendingType']>, ParentType, ContextType>;
    lenderPermissionType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPermissionType']>, ParentType, ContextType>;
    borrowerPermissionType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPermissionType']>, ParentType, ContextType>;
    poolCreatorPermissionType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPermissionType']>, ParentType, ContextType>;
    riskType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRiskType']>, ParentType, ContextType>;
    collateralizationType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryCollateralizationType']>, ParentType, ContextType>;
    mintedTokens?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryToken']>>, ParentType, ContextType, RequireFields<ethereumPrimaryLendingProtocolmintedTokensArgs, 'skip' | 'first'>>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<ethereumPrimaryLendingProtocolrewardTokensArgs, 'skip' | 'first'>>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    fees?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryFee']>>, ParentType, ContextType, RequireFields<ethereumPrimaryLendingProtocolfeesArgs, 'skip' | 'first'>>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    mintedTokenSupplies?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    flashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryBigDecimal']>>, ParentType, ContextType>;
    dailyUsageMetrics?: Resolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryLendingProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
    hourlyUsageMetrics?: Resolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryLendingProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
    financialMetrics?: Resolver<Array<ResolversTypes['ethereumPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryLendingProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
    markets?: Resolver<Array<ResolversTypes['ethereumPrimaryMarket']>, ParentType, ContextType, RequireFields<ethereumPrimaryLendingProtocolmarketsArgs, 'skip' | 'first'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryLiquidateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryLiquidate'] = ResolversParentTypes['ethereumPrimaryLiquidate']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    liquidator?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    liquidatee?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['ethereumPrimaryPosition']>, ParentType, ContextType, RequireFields<ethereumPrimaryLiquidatepositionsArgs, 'skip' | 'first'>>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    profitUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryMarketResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryMarket'] = ResolversParentTypes['ethereumPrimaryMarket']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['ethereumPrimaryLendingProtocol'], ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    canBorrowFrom?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    canUseAsCollateral?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    maximumLTV?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    liquidationThreshold?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    liquidationPenalty?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    canIsolate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    createdTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    createdBlockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    oracle?: Resolver<Maybe<ResolversTypes['ethereumPrimaryOracle']>, ParentType, ContextType>;
    relation?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBytes']>, ParentType, ContextType>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketrewardTokensArgs, 'skip' | 'first'>>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryBigDecimal']>>, ParentType, ContextType>;
    stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    inputToken?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    inputTokenBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    inputTokenPriceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    outputToken?: Resolver<Maybe<ResolversTypes['ethereumPrimaryToken']>, ParentType, ContextType>;
    outputTokenSupply?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    outputTokenPriceUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    exchangeRate?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    rates?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryInterestRate']>>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketratesArgs, 'skip' | 'first'>>;
    reserves?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    reserveFactor?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    borrowedToken?: Resolver<Maybe<ResolversTypes['ethereumPrimaryToken']>, ParentType, ContextType>;
    variableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    stableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    indexLastUpdatedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    supplyIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    supplyCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    borrowIndex?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    borrowCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTransferUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeFlashloanUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    transactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    flashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueTransferrers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueFlashloaners?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['ethereumPrimaryPosition']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketpositionsArgs, 'skip' | 'first'>>;
    positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lendingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailySnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryMarketDailySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketdailySnapshotsArgs, 'skip' | 'first'>>;
    hourlySnapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryMarketHourlySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarkethourlySnapshotsArgs, 'skip' | 'first'>>;
    deposits?: Resolver<Array<ResolversTypes['ethereumPrimaryDeposit']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketdepositsArgs, 'skip' | 'first'>>;
    withdraws?: Resolver<Array<ResolversTypes['ethereumPrimaryWithdraw']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketwithdrawsArgs, 'skip' | 'first'>>;
    borrows?: Resolver<Array<ResolversTypes['ethereumPrimaryBorrow']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketborrowsArgs, 'skip' | 'first'>>;
    repays?: Resolver<Array<ResolversTypes['ethereumPrimaryRepay']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketrepaysArgs, 'skip' | 'first'>>;
    liquidates?: Resolver<Array<ResolversTypes['ethereumPrimaryLiquidate']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketliquidatesArgs, 'skip' | 'first'>>;
    transfers?: Resolver<Array<ResolversTypes['ethereumPrimaryTransfer']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarkettransfersArgs, 'skip' | 'first'>>;
    flashloans?: Resolver<Array<ResolversTypes['ethereumPrimaryFlashloan']>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketflashloansArgs, 'skip' | 'first'>>;
    _baseTrackingBorrowSpeed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    _baseTrackingSupplySpeed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    _vToken?: Resolver<Maybe<ResolversTypes['ethereumPrimaryToken']>, ParentType, ContextType>;
    _sToken?: Resolver<Maybe<ResolversTypes['ethereumPrimaryToken']>, ParentType, ContextType>;
    _prePauseState?: Resolver<Maybe<Array<ResolversTypes['Boolean']>>, ParentType, ContextType>;
    _lastRewardsUpdated?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    _liquidationProtocolFee?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    _siloedBorrowing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryMarketDailySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryMarketDailySnapshot'] = ResolversParentTypes['ethereumPrimaryMarketDailySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    days?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['ethereumPrimaryLendingProtocol'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    relation?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBytes']>, ParentType, ContextType>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketDailySnapshotrewardTokensArgs, 'skip' | 'first'>>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryBigDecimal']>>, ParentType, ContextType>;
    stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    inputTokenBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    inputTokenPriceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    outputTokenSupply?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    outputTokenPriceUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    exchangeRate?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    rates?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryInterestRate']>>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketDailySnapshotratesArgs, 'skip' | 'first'>>;
    reserves?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    reserveFactor?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    variableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    stableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    supplyCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    borrowCap?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailySupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    revenueDetail?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRevenueDetail']>, ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeDeposit?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeBorrow?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeLiquidate?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyWithdrawUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeWithdraw?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    dailyRepayUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeRepay?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    dailyTransferUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeTransferUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyFlashloanUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyNativeFlashloan?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    cumulativeFlashloanUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveTransferrers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveFlashloaners?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyBorrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyRepayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyLiquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyTransferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyFlashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    positionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    closedPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lendingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLendingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrowingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveBorrowingPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryMarketHourlySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryMarketHourlySnapshot'] = ResolversParentTypes['ethereumPrimaryMarketHourlySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hours?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['ethereumPrimaryLendingProtocol'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    relation?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBytes']>, ParentType, ContextType>;
    rewardTokens?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryRewardToken']>>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketHourlySnapshotrewardTokensArgs, 'skip' | 'first'>>;
    rewardTokenEmissionsAmount?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
    rewardTokenEmissionsUSD?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryBigDecimal']>>, ParentType, ContextType>;
    stakedOutputTokenAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    inputTokenBalance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    inputTokenPriceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    outputTokenSupply?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    outputTokenPriceUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    exchangeRate?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    rates?: Resolver<Maybe<Array<ResolversTypes['ethereumPrimaryInterestRate']>>, ParentType, ContextType, RequireFields<ethereumPrimaryMarketHourlySnapshotratesArgs, 'skip' | 'first'>>;
    reserves?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    variableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    stableBorrowedTokenBalance?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlySupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    totalDepositBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeDepositUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    totalBorrowBalanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeBorrowUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeLiquidateUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyWithdrawUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyRepayUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyTransferUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    hourlyFlashloanUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryOracleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryOracle'] = ResolversParentTypes['ethereumPrimaryOracle']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    oracleAddress?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    blockCreated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestampCreated?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    isUSD?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    hashEnded?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBytes']>, ParentType, ContextType>;
    oracleSource?: Resolver<Maybe<ResolversTypes['ethereumPrimaryOracleSource']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryPositionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryPosition'] = ResolversParentTypes['ethereumPrimaryPosition']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    hashOpened?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hashClosed?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBytes']>, ParentType, ContextType>;
    blockNumberOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestampOpened?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    blockNumberClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    timestampClosed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    side?: Resolver<ResolversTypes['ethereumPrimaryPositionSide'], ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['ethereumPrimaryInterestRateType']>, ParentType, ContextType>;
    isCollateral?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    isIsolated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    balance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    principal?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    depositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    deposits?: Resolver<Array<ResolversTypes['ethereumPrimaryDeposit']>, ParentType, ContextType, RequireFields<ethereumPrimaryPositiondepositsArgs, 'skip' | 'first'>>;
    withdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    withdraws?: Resolver<Array<ResolversTypes['ethereumPrimaryWithdraw']>, ParentType, ContextType, RequireFields<ethereumPrimaryPositionwithdrawsArgs, 'skip' | 'first'>>;
    borrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    borrows?: Resolver<Array<ResolversTypes['ethereumPrimaryBorrow']>, ParentType, ContextType, RequireFields<ethereumPrimaryPositionborrowsArgs, 'skip' | 'first'>>;
    repayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    repays?: Resolver<Array<ResolversTypes['ethereumPrimaryRepay']>, ParentType, ContextType, RequireFields<ethereumPrimaryPositionrepaysArgs, 'skip' | 'first'>>;
    liquidationCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    liquidations?: Resolver<Array<ResolversTypes['ethereumPrimaryLiquidate']>, ParentType, ContextType, RequireFields<ethereumPrimaryPositionliquidationsArgs, 'skip' | 'first'>>;
    transferredCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    receivedCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    transfers?: Resolver<Array<ResolversTypes['ethereumPrimaryTransfer']>, ParentType, ContextType, RequireFields<ethereumPrimaryPositiontransfersArgs, 'skip' | 'first'>>;
    snapshots?: Resolver<Array<ResolversTypes['ethereumPrimaryPositionSnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryPositionsnapshotsArgs, 'skip' | 'first'>>;
    _eMode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryPositionSnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryPositionSnapshot'] = ResolversParentTypes['ethereumPrimaryPositionSnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['ethereumPrimaryPosition'], ParentType, ContextType>;
    balance?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    balanceUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    principal?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryProtocolResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryProtocol'] = ResolversParentTypes['ethereumPrimaryProtocol']> = ResolversObject<{
    __resolveType: TypeResolveFn<'ethereumPrimaryLendingProtocol', ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    schemaVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    subgraphVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    methodologyVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    network?: Resolver<ResolversTypes['ethereumPrimaryNetwork'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['ethereumPrimaryProtocolType'], ParentType, ContextType>;
    lendingType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryLendingType']>, ParentType, ContextType>;
    lenderPermissionType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPermissionType']>, ParentType, ContextType>;
    borrowerPermissionType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPermissionType']>, ParentType, ContextType>;
    poolCreatorPermissionType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryPermissionType']>, ParentType, ContextType>;
    riskType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryRiskType']>, ParentType, ContextType>;
    collateralizationType?: Resolver<Maybe<ResolversTypes['ethereumPrimaryCollateralizationType']>, ParentType, ContextType>;
    totalValueLockedUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    protocolControlledValueUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeSupplySideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeProtocolSideRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    cumulativeTotalRevenueUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyUsageMetrics?: Resolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsDailySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryProtocoldailyUsageMetricsArgs, 'skip' | 'first'>>;
    hourlyUsageMetrics?: Resolver<Array<ResolversTypes['ethereumPrimaryUsageMetricsHourlySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryProtocolhourlyUsageMetricsArgs, 'skip' | 'first'>>;
    financialMetrics?: Resolver<Array<ResolversTypes['ethereumPrimaryFinancialsDailySnapshot']>, ParentType, ContextType, RequireFields<ethereumPrimaryProtocolfinancialMetricsArgs, 'skip' | 'first'>>;
}>;
export type ethereumPrimaryRepayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryRepay'] = ResolversParentTypes['ethereumPrimaryRepay']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['ethereumPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['ethereumPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryRevenueDetailResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryRevenueDetail'] = ResolversParentTypes['ethereumPrimaryRevenueDetail']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    sources?: Resolver<Array<ResolversTypes['ethereumPrimaryFee']>, ParentType, ContextType, RequireFields<ethereumPrimaryRevenueDetailsourcesArgs, 'skip' | 'first'>>;
    amountsUSD?: Resolver<Array<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryRewardTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryRewardToken'] = ResolversParentTypes['ethereumPrimaryRewardToken']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    token?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['ethereumPrimaryRewardTokenType'], ParentType, ContextType>;
    _distributionEnd?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryToken'] = ResolversParentTypes['ethereumPrimaryToken']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    symbol?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    decimals?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lastPriceUSD?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBigDecimal']>, ParentType, ContextType>;
    lastPriceBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['ethereumPrimaryTokenType']>, ParentType, ContextType>;
    _market?: Resolver<Maybe<ResolversTypes['ethereumPrimaryMarket']>, ParentType, ContextType>;
    _iavsTokenType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryTransfer'] = ResolversParentTypes['ethereumPrimaryTransfer']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    sender?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    receiver?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    positions?: Resolver<Array<ResolversTypes['ethereumPrimaryPosition']>, ParentType, ContextType, RequireFields<ethereumPrimaryTransferpositionsArgs, 'skip' | 'first'>>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryUsageMetricsDailySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryUsageMetricsDailySnapshot'] = ResolversParentTypes['ethereumPrimaryUsageMetricsDailySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    days?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['ethereumPrimaryLendingProtocol'], ParentType, ContextType>;
    dailyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueDepositors?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueBorrowers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidators?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActiveLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueLiquidatees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyBorrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyRepayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyLiquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyTransferCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyFlashloanCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativePositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    openPositionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    dailyActivePositions?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    totalPoolCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryUsageMetricsHourlySnapshotResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryUsageMetricsHourlySnapshot'] = ResolversParentTypes['ethereumPrimaryUsageMetricsHourlySnapshot']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hours?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    protocol?: Resolver<ResolversTypes['ethereumPrimaryLendingProtocol'], ParentType, ContextType>;
    hourlyActiveUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    cumulativeUniqueUsers?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyTransactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyDepositCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyWithdrawCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyBorrowCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyRepayCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hourlyLiquidateCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimaryWithdrawResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimaryWithdraw'] = ResolversParentTypes['ethereumPrimaryWithdraw']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    hash?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    nonce?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    logIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasUsed?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
    blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    account?: Resolver<ResolversTypes['ethereumPrimaryAccount'], ParentType, ContextType>;
    accountActor?: Resolver<Maybe<ResolversTypes['ethereumPrimaryAccount']>, ParentType, ContextType>;
    market?: Resolver<ResolversTypes['ethereumPrimaryMarket'], ParentType, ContextType>;
    position?: Resolver<ResolversTypes['ethereumPrimaryPosition'], ParentType, ContextType>;
    asset?: Resolver<ResolversTypes['ethereumPrimaryToken'], ParentType, ContextType>;
    amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    amountUSD?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimary_ActiveAccountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimary_ActiveAccount'] = ResolversParentTypes['ethereumPrimary_ActiveAccount']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimary_Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimary_Block_'] = ResolversParentTypes['ethereumPrimary_Block_']> = ResolversObject<{
    hash?: Resolver<Maybe<ResolversTypes['ethereumPrimaryBytes']>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimary_DefaultOracleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimary_DefaultOracle'] = ResolversParentTypes['ethereumPrimary_DefaultOracle']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    oracle?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimary_FlashLoanPremiumResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimary_FlashLoanPremium'] = ResolversParentTypes['ethereumPrimary_FlashLoanPremium']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    premiumRateTotal?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    premiumRateToProtocol?: Resolver<ResolversTypes['ethereumPrimaryBigDecimal'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimary_MarketListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimary_MarketList'] = ResolversParentTypes['ethereumPrimary_MarketList']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ethereumPrimaryBytes'], ParentType, ContextType>;
    markets?: Resolver<Array<ResolversTypes['ethereumPrimaryBytes']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimary_Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimary_Meta_'] = ResolversParentTypes['ethereumPrimary_Meta_']> = ResolversObject<{
    block?: Resolver<ResolversTypes['ethereumPrimary_Block_'], ParentType, ContextType>;
    deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type ethereumPrimary_PositionCounterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ethereumPrimary_PositionCounter'] = ResolversParentTypes['ethereumPrimary_PositionCounter']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    nextCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    lastTimestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export type Resolvers<ContextType = MeshContext> = ResolversObject<{
    Query?: QueryResolvers<ContextType>;
    Subscription?: SubscriptionResolvers<ContextType>;
    gnosisPrimaryAccount?: gnosisPrimaryAccountResolvers<ContextType>;
    gnosisPrimaryBigDecimal?: GraphQLScalarType;
    BigInt?: GraphQLScalarType;
    gnosisPrimaryBorrow?: gnosisPrimaryBorrowResolvers<ContextType>;
    gnosisPrimaryBytes?: GraphQLScalarType;
    gnosisPrimaryDeposit?: gnosisPrimaryDepositResolvers<ContextType>;
    gnosisPrimaryEvent?: gnosisPrimaryEventResolvers<ContextType>;
    gnosisPrimaryFee?: gnosisPrimaryFeeResolvers<ContextType>;
    gnosisPrimaryFinancialsDailySnapshot?: gnosisPrimaryFinancialsDailySnapshotResolvers<ContextType>;
    gnosisPrimaryFlashloan?: gnosisPrimaryFlashloanResolvers<ContextType>;
    gnosisPrimaryInt8?: GraphQLScalarType;
    gnosisPrimaryInterestRate?: gnosisPrimaryInterestRateResolvers<ContextType>;
    gnosisPrimaryLendingProtocol?: gnosisPrimaryLendingProtocolResolvers<ContextType>;
    gnosisPrimaryLiquidate?: gnosisPrimaryLiquidateResolvers<ContextType>;
    gnosisPrimaryMarket?: gnosisPrimaryMarketResolvers<ContextType>;
    gnosisPrimaryMarketDailySnapshot?: gnosisPrimaryMarketDailySnapshotResolvers<ContextType>;
    gnosisPrimaryMarketHourlySnapshot?: gnosisPrimaryMarketHourlySnapshotResolvers<ContextType>;
    gnosisPrimaryOracle?: gnosisPrimaryOracleResolvers<ContextType>;
    gnosisPrimaryPosition?: gnosisPrimaryPositionResolvers<ContextType>;
    gnosisPrimaryPositionSnapshot?: gnosisPrimaryPositionSnapshotResolvers<ContextType>;
    gnosisPrimaryProtocol?: gnosisPrimaryProtocolResolvers<ContextType>;
    gnosisPrimaryRepay?: gnosisPrimaryRepayResolvers<ContextType>;
    gnosisPrimaryRevenueDetail?: gnosisPrimaryRevenueDetailResolvers<ContextType>;
    gnosisPrimaryRewardToken?: gnosisPrimaryRewardTokenResolvers<ContextType>;
    gnosisPrimaryToken?: gnosisPrimaryTokenResolvers<ContextType>;
    gnosisPrimaryTransfer?: gnosisPrimaryTransferResolvers<ContextType>;
    gnosisPrimaryUsageMetricsDailySnapshot?: gnosisPrimaryUsageMetricsDailySnapshotResolvers<ContextType>;
    gnosisPrimaryUsageMetricsHourlySnapshot?: gnosisPrimaryUsageMetricsHourlySnapshotResolvers<ContextType>;
    gnosisPrimaryWithdraw?: gnosisPrimaryWithdrawResolvers<ContextType>;
    gnosisPrimary_ActiveAccount?: gnosisPrimary_ActiveAccountResolvers<ContextType>;
    gnosisPrimary_Block_?: gnosisPrimary_Block_Resolvers<ContextType>;
    gnosisPrimary_DefaultOracle?: gnosisPrimary_DefaultOracleResolvers<ContextType>;
    gnosisPrimary_FlashLoanPremium?: gnosisPrimary_FlashLoanPremiumResolvers<ContextType>;
    gnosisPrimary_MarketList?: gnosisPrimary_MarketListResolvers<ContextType>;
    gnosisPrimary_Meta_?: gnosisPrimary_Meta_Resolvers<ContextType>;
    gnosisPrimary_PositionCounter?: gnosisPrimary_PositionCounterResolvers<ContextType>;
    ethereumPrimaryAccount?: ethereumPrimaryAccountResolvers<ContextType>;
    ethereumPrimaryBigDecimal?: GraphQLScalarType;
    ethereumPrimaryBorrow?: ethereumPrimaryBorrowResolvers<ContextType>;
    ethereumPrimaryBytes?: GraphQLScalarType;
    ethereumPrimaryDeposit?: ethereumPrimaryDepositResolvers<ContextType>;
    ethereumPrimaryEvent?: ethereumPrimaryEventResolvers<ContextType>;
    ethereumPrimaryFee?: ethereumPrimaryFeeResolvers<ContextType>;
    ethereumPrimaryFinancialsDailySnapshot?: ethereumPrimaryFinancialsDailySnapshotResolvers<ContextType>;
    ethereumPrimaryFlashloan?: ethereumPrimaryFlashloanResolvers<ContextType>;
    ethereumPrimaryInt8?: GraphQLScalarType;
    ethereumPrimaryInterestRate?: ethereumPrimaryInterestRateResolvers<ContextType>;
    ethereumPrimaryLendingProtocol?: ethereumPrimaryLendingProtocolResolvers<ContextType>;
    ethereumPrimaryLiquidate?: ethereumPrimaryLiquidateResolvers<ContextType>;
    ethereumPrimaryMarket?: ethereumPrimaryMarketResolvers<ContextType>;
    ethereumPrimaryMarketDailySnapshot?: ethereumPrimaryMarketDailySnapshotResolvers<ContextType>;
    ethereumPrimaryMarketHourlySnapshot?: ethereumPrimaryMarketHourlySnapshotResolvers<ContextType>;
    ethereumPrimaryOracle?: ethereumPrimaryOracleResolvers<ContextType>;
    ethereumPrimaryPosition?: ethereumPrimaryPositionResolvers<ContextType>;
    ethereumPrimaryPositionSnapshot?: ethereumPrimaryPositionSnapshotResolvers<ContextType>;
    ethereumPrimaryProtocol?: ethereumPrimaryProtocolResolvers<ContextType>;
    ethereumPrimaryRepay?: ethereumPrimaryRepayResolvers<ContextType>;
    ethereumPrimaryRevenueDetail?: ethereumPrimaryRevenueDetailResolvers<ContextType>;
    ethereumPrimaryRewardToken?: ethereumPrimaryRewardTokenResolvers<ContextType>;
    ethereumPrimaryToken?: ethereumPrimaryTokenResolvers<ContextType>;
    ethereumPrimaryTransfer?: ethereumPrimaryTransferResolvers<ContextType>;
    ethereumPrimaryUsageMetricsDailySnapshot?: ethereumPrimaryUsageMetricsDailySnapshotResolvers<ContextType>;
    ethereumPrimaryUsageMetricsHourlySnapshot?: ethereumPrimaryUsageMetricsHourlySnapshotResolvers<ContextType>;
    ethereumPrimaryWithdraw?: ethereumPrimaryWithdrawResolvers<ContextType>;
    ethereumPrimary_ActiveAccount?: ethereumPrimary_ActiveAccountResolvers<ContextType>;
    ethereumPrimary_Block_?: ethereumPrimary_Block_Resolvers<ContextType>;
    ethereumPrimary_DefaultOracle?: ethereumPrimary_DefaultOracleResolvers<ContextType>;
    ethereumPrimary_FlashLoanPremium?: ethereumPrimary_FlashLoanPremiumResolvers<ContextType>;
    ethereumPrimary_MarketList?: ethereumPrimary_MarketListResolvers<ContextType>;
    ethereumPrimary_Meta_?: ethereumPrimary_Meta_Resolvers<ContextType>;
    ethereumPrimary_PositionCounter?: ethereumPrimary_PositionCounterResolvers<ContextType>;
}>;
export type DirectiveResolvers<ContextType = MeshContext> = ResolversObject<{
    entity?: entityDirectiveResolver<any, any, ContextType>;
    subgraphId?: subgraphIdDirectiveResolver<any, any, ContextType>;
    derivedFrom?: derivedFromDirectiveResolver<any, any, ContextType>;
}>;
export type MeshContext = GnosisPrimaryTypes.Context & EthereumPrimaryTypes.Context & BaseMeshContext;
export declare const rawServeConfig: YamlConfig.Config['serve'];
export declare function getMeshOptions(): Promise<GetMeshOptions>;
export declare function createBuiltMeshHTTPHandler<TServerContext = {}>(): MeshHTTPHandler<TServerContext>;
export declare function getBuiltGraphClient(): Promise<MeshInstance>;
export declare const execute: ExecuteMeshFn;
export declare const subscribe: SubscribeMeshFn;
